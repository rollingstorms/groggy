{"version":3,"file":"index.js","mappings":"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","sources":["webpack://groggy-widgets/external amd \"@jupyter-widgets/base\"","webpack://groggy-widgets/webpack/bootstrap","webpack://groggy-widgets/webpack/runtime/define property getters","webpack://groggy-widgets/webpack/runtime/hasOwnProperty shorthand","webpack://groggy-widgets/webpack/runtime/make namespace object","webpack://groggy-widgets/./src/widget.ts","webpack://groggy-widgets/./src/core/PhysicsEngine.js","webpack://groggy-widgets/./src/core/SVGRenderer.js","webpack://groggy-widgets/./src/core/InteractionEngine.js","webpack://groggy-widgets/./src/core/VizCore.js","webpack://groggy-widgets/./src/widget_unified.ts","webpack://groggy-widgets/./src/core/index.js","webpack://groggy-widgets/./src/plugin.ts"],"sourcesContent":["module.exports = __WEBPACK_EXTERNAL_MODULE__55__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { DOMWidgetModel, DOMWidgetView } from '@jupyter-widgets/base';\n\nexport const MODULE_NAME = 'groggy-widgets';\nexport const MODULE_VERSION = '0.1.0';\n\nexport class GroggyGraphModel extends DOMWidgetModel {\n  static model_name = 'GroggyGraphModel';\n  static model_module = MODULE_NAME;\n  static model_module_version = MODULE_VERSION;\n\n  defaults() {\n    return {\n      ...super.defaults(),\n      _model_name: 'GroggyGraphModel',\n      _model_module: MODULE_NAME,\n      _model_module_version: MODULE_VERSION,\n      _view_name: 'GroggyGraphView',\n      _view_module: MODULE_NAME,\n      _view_module_version: MODULE_VERSION,\n      // Graph data traits\n      nodes: [],\n      edges: [],\n      title: 'Graph Visualization',\n    };\n  }\n}\n\nexport class GroggyGraphView extends DOMWidgetView {\n  static view_name = 'GroggyGraphView';\n  static view_module = MODULE_NAME;\n  static view_module_version = MODULE_VERSION;\n  \n  private nodePositions = new Map<string, {x: number, y: number}>();\n  private nodeVelocities = new Map<string, {vx: number, vy: number}>();\n  private isDragging = false;\n  private draggedNode: string | null = null;\n  private dragOffset = {x: 0, y: 0};\n  private animationId: number | null = null;\n  private simulation = {\n    alpha: 1.0,\n    alphaDecay: 0.0228,\n    alphaMin: 0.001,\n    velocityDecay: 0.4,\n    forceStrength: 30,\n    linkDistance: 50,\n    linkStrength: 0.1,\n    chargeStrength: -300,\n    centerStrength: 0.1\n  };\n\n  render() {\n    // Create container\n    this.el.style.cssText = `\n      border: 2px solid #4CAF50;\n      padding: 10px;\n      margin: 10px;\n      border-radius: 8px;\n      background: #f9f9f9;\n      font-family: Arial, sans-serif;\n      min-height: 400px;\n      position: relative;\n      user-select: none;\n    `;\n    \n    // Create a header\n    const header = document.createElement('div');\n    header.style.cssText = `\n      font-weight: bold;\n      margin-bottom: 10px;\n      color: #333;\n    `;\n    header.textContent = this.model.get('title') || 'Graph Visualization';\n    this.el.appendChild(header);\n    \n    // Create graph container\n    const graphContainer = document.createElement('div');\n    graphContainer.style.cssText = `\n      width: 100%;\n      height: 350px;\n      border: 1px solid #ddd;\n      background: white;\n      position: relative;\n      overflow: hidden;\n      cursor: grab;\n    `;\n    this.el.appendChild(graphContainer);\n    \n    // Render basic graph visualization\n    this.renderGraph(graphContainer);\n    \n    // Listen for model changes\n    this.model.on('change', this.onModelChange, this);\n  }\n  \n  private renderGraph(container: HTMLElement) {\n    const nodes = this.model.get('nodes') || [];\n    const edges = this.model.get('edges') || [];\n    \n    // Clear container\n    container.innerHTML = '';\n    \n    if (nodes.length === 0) {\n      container.innerHTML = `\n        <div style=\"\n          display: flex; \n          align-items: center; \n          justify-content: center; \n          height: 100%; \n          color: #666;\n          font-style: italic;\n        \">\n          No graph data provided. Add nodes and edges to see visualization.\n        </div>\n      `;\n      return;\n    }\n    \n    // Create simple SVG visualization\n    const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('height', '100%');\n    svg.style.cursor = 'grab';\n    container.appendChild(svg);\n    \n    // Initialize force-directed layout\n    const centerX = container.clientWidth / 2;\n    const centerY = container.clientHeight / 2;\n    \n    // Initialize positions and velocities (if not already positioned)\n    if (this.nodePositions.size === 0) {\n      nodes.forEach((node: any) => {\n        // Random initial positions near center\n        const angle = Math.random() * 2 * Math.PI;\n        const radius = Math.random() * 100;\n        const x = centerX + radius * Math.cos(angle);\n        const y = centerY + radius * Math.sin(angle);\n        \n        this.nodePositions.set(node.id, { x, y });\n        this.nodeVelocities.set(node.id, { vx: 0, vy: 0 });\n      });\n      \n      // Start physics simulation\n      this.startForceSimulation(nodes, edges, centerX, centerY);\n    }\n    \n    // Draw edges first (so they appear behind nodes)\n    const edgeElements: SVGLineElement[] = [];\n    edges.forEach((edge: any) => {\n      const sourcePos = this.nodePositions.get(edge.source);\n      const targetPos = this.nodePositions.get(edge.target);\n      \n      if (sourcePos && targetPos) {\n        const line = document.createElementNS('http://www.w3.org/2000/svg', 'line');\n        line.setAttribute('x1', sourcePos.x.toString());\n        line.setAttribute('y1', sourcePos.y.toString());\n        line.setAttribute('x2', targetPos.x.toString());\n        line.setAttribute('y2', targetPos.y.toString());\n        line.setAttribute('stroke', '#999');\n        line.setAttribute('stroke-width', '2');\n        line.setAttribute('opacity', '0.6');\n        svg.appendChild(line);\n        edgeElements.push(line);\n      }\n    });\n    \n    // Draw nodes with drag functionality\n    nodes.forEach((node: any) => {\n      const pos = this.nodePositions.get(node.id);\n      if (!pos) return;\n      \n      // Create node group for easier manipulation\n      const nodeGroup = document.createElementNS('http://www.w3.org/2000/svg', 'g');\n      nodeGroup.style.cursor = 'grab';\n      \n      // Node circle\n      const circle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\n      circle.setAttribute('cx', pos.x.toString());\n      circle.setAttribute('cy', pos.y.toString());\n      circle.setAttribute('r', (node.size || 20).toString());\n      circle.setAttribute('fill', this.getNodeColor(node.group));\n      circle.setAttribute('stroke', '#333');\n      circle.setAttribute('stroke-width', '2');\n      circle.style.filter = 'drop-shadow(2px 2px 4px rgba(0,0,0,0.3))';\n      \n      // Node label\n      const text = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n      text.setAttribute('x', pos.x.toString());\n      text.setAttribute('y', (pos.y + 5).toString());\n      text.setAttribute('text-anchor', 'middle');\n      text.setAttribute('font-family', 'Arial, sans-serif');\n      text.setAttribute('font-size', '12');\n      text.setAttribute('fill', '#333');\n      text.setAttribute('pointer-events', 'none'); // Don't interfere with dragging\n      text.textContent = node.label || node.id;\n      \n      nodeGroup.appendChild(circle);\n      nodeGroup.appendChild(text);\n      svg.appendChild(nodeGroup);\n      \n      // Add drag functionality\n      this.addDragBehavior(nodeGroup, node, circle, text, edgeElements, edges);\n    });\n    \n    // Add stats\n    const stats = document.createElement('div');\n    stats.style.cssText = `\n      position: absolute;\n      top: 5px;\n      right: 5px;\n      background: rgba(255,255,255,0.9);\n      padding: 5px;\n      border-radius: 3px;\n      font-size: 12px;\n      color: #666;\n    `;\n    stats.innerHTML = `${nodes.length} nodes, ${edges.length} edges<br><small>Drag nodes to reposition</small>`;\n    container.appendChild(stats);\n  }\n  \n  private addDragBehavior(nodeGroup: SVGGElement, node: any, circle: SVGCircleElement, text: SVGTextElement, edgeElements: SVGLineElement[], edges: any[]) {\n    let startX = 0, startY = 0;\n    let isDragging = false;\n    \n    const onMouseDown = (e: MouseEvent) => {\n      isDragging = true;\n      startX = e.clientX;\n      startY = e.clientY;\n      nodeGroup.style.cursor = 'grabbing';\n      circle.setAttribute('stroke-width', '3');\n      e.preventDefault();\n    };\n    \n    const onMouseMove = (e: MouseEvent) => {\n      if (!isDragging) return;\n      \n      const deltaX = e.clientX - startX;\n      const deltaY = e.clientY - startY;\n      \n      const currentPos = this.nodePositions.get(node.id);\n      if (!currentPos) return; // Safety check\n      \n      const newX = currentPos.x + deltaX;\n      const newY = currentPos.y + deltaY;\n      \n      // Update node position\n      this.nodePositions.set(node.id, { x: newX, y: newY });\n      \n      // Update visual elements\n      circle.setAttribute('cx', newX.toString());\n      circle.setAttribute('cy', newY.toString());\n      text.setAttribute('x', newX.toString());\n      text.setAttribute('y', (newY + 5).toString());\n      \n      // Update connected edges\n      this.updateEdges(node.id, edgeElements, edges);\n      \n      startX = e.clientX;\n      startY = e.clientY;\n    };\n    \n    const onMouseUp = () => {\n      isDragging = false;\n      nodeGroup.style.cursor = 'grab';\n      circle.setAttribute('stroke-width', '2');\n    };\n    \n    // Mouse events\n    nodeGroup.addEventListener('mousedown', onMouseDown);\n    document.addEventListener('mousemove', onMouseMove);\n    document.addEventListener('mouseup', onMouseUp);\n    \n    // Touch events for mobile\n    nodeGroup.addEventListener('touchstart', (e) => {\n      const touch = e.touches[0];\n      onMouseDown({ clientX: touch.clientX, clientY: touch.clientY, preventDefault: () => e.preventDefault() } as any);\n    });\n    \n    document.addEventListener('touchmove', (e) => {\n      if (isDragging) {\n        const touch = e.touches[0];\n        onMouseMove({ clientX: touch.clientX, clientY: touch.clientY } as any);\n        e.preventDefault();\n      }\n    });\n    \n    document.addEventListener('touchend', onMouseUp);\n    \n    // Hover effects\n    nodeGroup.addEventListener('mouseenter', () => {\n      if (!isDragging) {\n        circle.setAttribute('opacity', '0.8');\n        circle.style.filter = 'drop-shadow(3px 3px 6px rgba(0,0,0,0.4))';\n      }\n    });\n    \n    nodeGroup.addEventListener('mouseleave', () => {\n      if (!isDragging) {\n        circle.setAttribute('opacity', '1');\n        circle.style.filter = 'drop-shadow(2px 2px 4px rgba(0,0,0,0.3))';\n      }\n    });\n  }\n  \n  private updateEdges(nodeId: string, edgeElements: SVGLineElement[], edges: any[]) {\n    edges.forEach((edge: any, index: number) => {\n      if (edge.source === nodeId || edge.target === nodeId) {\n        const sourcePos = this.nodePositions.get(edge.source);\n        const targetPos = this.nodePositions.get(edge.target);\n        \n        if (sourcePos && targetPos && edgeElements[index]) {\n          edgeElements[index].setAttribute('x1', sourcePos.x.toString());\n          edgeElements[index].setAttribute('y1', sourcePos.y.toString());\n          edgeElements[index].setAttribute('x2', targetPos.x.toString());\n          edgeElements[index].setAttribute('y2', targetPos.y.toString());\n        }\n      }\n    });\n  }\n  \n  private getNodeColor(group: string): string {\n    const colors: { [key: string]: string } = {\n      'person': '#FF6B6B',\n      'team': '#4ECDC4', \n      'project': '#45B7D1',\n      'executive': '#96CEB4',\n      'manager': '#FFEAA7',\n      'lead': '#DDA0DD',\n      'developer': '#98D8C8',\n      'product': '#F7DC6F',\n      'application': '#85C1E9',\n      'service': '#F8C471',\n      'storage': '#82E0AA',\n      'infrastructure': '#D7BDE2',\n      'core': '#F1948A',\n      'satellite': '#AED6F1'\n    };\n    return colors[group] || '#BDC3C7';\n  }\n  \n  private onModelChange() {\n    // Re-render when model data changes\n    const graphContainer = this.el.querySelector('div:last-child') as HTMLElement;\n    if (graphContainer) {\n      this.renderGraph(graphContainer);\n    }\n    \n    // Update title\n    const header = this.el.querySelector('div:first-child') as HTMLElement;\n    if (header) {\n      header.textContent = this.model.get('title') || 'Graph Visualization';\n    }\n  }\n  \n  /**\n   * Start force-directed simulation for node positions\n   */\n  private startForceSimulation(nodes: any[], edges: any[], centerX: number, centerY: number) {\n    // Simple force-directed layout simulation\n    const iterations = 100;\n    const repulsionStrength = 1000;\n    const attractionStrength = 0.1;\n    const damping = 0.9;\n    \n    // Initialize velocities\n    const velocities = new Map();\n    nodes.forEach(node => {\n      velocities.set(node.id, { x: 0, y: 0 });\n    });\n    \n    for (let i = 0; i < iterations; i++) {\n      const forces = new Map();\n      \n      // Initialize forces\n      nodes.forEach(node => {\n        forces.set(node.id, { x: 0, y: 0 });\n      });\n      \n      // Repulsion forces\n      for (let j = 0; j < nodes.length; j++) {\n        for (let k = j + 1; k < nodes.length; k++) {\n          const nodeA = nodes[j];\n          const nodeB = nodes[k];\n          const posA = this.nodePositions.get(nodeA.id);\n          const posB = this.nodePositions.get(nodeB.id);\n          \n          if (posA && posB) {\n            const dx = posB.x - posA.x;\n            const dy = posB.y - posA.y;\n            const distance = Math.sqrt(dx * dx + dy * dy) || 1;\n            const force = repulsionStrength / (distance * distance);\n            \n            const fx = force * dx / distance;\n            const fy = force * dy / distance;\n            \n            const forceA = forces.get(nodeA.id);\n            const forceB = forces.get(nodeB.id);\n            if (forceA && forceB) {\n              forceA.x -= fx;\n              forceA.y -= fy;\n              forceB.x += fx;\n              forceB.y += fy;\n            }\n          }\n        }\n      }\n      \n      // Attraction forces from edges\n      edges.forEach(edge => {\n        const sourcePos = this.nodePositions.get(edge.source);\n        const targetPos = this.nodePositions.get(edge.target);\n        const sourceForce = forces.get(edge.source);\n        const targetForce = forces.get(edge.target);\n        \n        if (sourcePos && targetPos && sourceForce && targetForce) {\n          const dx = targetPos.x - sourcePos.x;\n          const dy = targetPos.y - sourcePos.y;\n          const distance = Math.sqrt(dx * dx + dy * dy) || 1;\n          const force = attractionStrength * distance;\n          \n          const fx = force * dx / distance;\n          const fy = force * dy / distance;\n          \n          sourceForce.x += fx;\n          sourceForce.y += fy;\n          targetForce.x -= fx;\n          targetForce.y -= fy;\n        }\n      });\n      \n      // Update positions\n      nodes.forEach(node => {\n        const position = this.nodePositions.get(node.id);\n        const velocity = velocities.get(node.id);\n        const force = forces.get(node.id);\n        \n        if (position && velocity && force) {\n          velocity.x += force.x * 0.01;\n          velocity.y += force.y * 0.01;\n          velocity.x *= damping;\n          velocity.y *= damping;\n          \n          position.x += velocity.x;\n          position.y += velocity.y;\n          \n          // Keep within bounds\n          position.x = Math.max(50, Math.min(750, position.x));\n          position.y = Math.max(50, Math.min(550, position.y));\n        }\n      });\n    }\n  }\n}","/**\n * 🌟 Unified Physics Engine\n * \n * Handles force-directed layout with Barnes-Hut optimization\n * Used consistently across all visualization environments\n */\n\nexport class PhysicsEngine {\n    constructor(config = {}) {\n        this.config = {\n            charge: -300,        // Repulsion force\n            distance: 50,        // Ideal edge length\n            damping: 0.9,        // Velocity damping\n            iterations: 100,     // Max iterations per frame\n            threshold: 0.01,     // Convergence threshold\n            timeStep: 0.016,     // 60 FPS\n            ...config\n        };\n        \n        this.isRunning = false;\n        this.iteration = 0;\n        this.totalEnergy = 0;\n        \n        console.log('⚡ PhysicsEngine initialized:', this.config);\n    }\n    \n    /**\n     * 🎯 Main physics update method - used by all environments\n     */\n    updatePositions(nodes, edges, positions, velocities, deltaTime = 0.016) {\n        if (!this.isRunning || nodes.length === 0) return;\n        \n        const forces = new Map();\n        \n        // Initialize forces\n        nodes.forEach(node => {\n            forces.set(node.id, { x: 0, y: 0 });\n        });\n        \n        // Calculate repulsion forces (Barnes-Hut for O(n log n))\n        this.calculateRepulsionForces(nodes, positions, forces);\n        \n        // Calculate attraction forces from edges\n        this.calculateAttractionForces(edges, positions, forces);\n        \n        // Apply forces using Verlet integration\n        this.integrateForces(nodes, positions, velocities, forces, deltaTime);\n        \n        // Update iteration count and energy\n        this.iteration++;\n        this.totalEnergy = this.calculateTotalEnergy(velocities);\n        \n        // Check for convergence\n        if (this.totalEnergy < this.config.threshold) {\n            this.pause();\n        }\n    }\n    \n    /**\n     * Calculate repulsion forces between all nodes\n     * Using Barnes-Hut approximation for better performance\n     */\n    calculateRepulsionForces(nodes, positions, forces) {\n        // Simplified O(n²) for now - can be optimized to Barnes-Hut later\n        for (let i = 0; i < nodes.length; i++) {\n            for (let j = i + 1; j < nodes.length; j++) {\n                const nodeA = nodes[i];\n                const nodeB = nodes[j];\n                \n                const posA = positions.get(nodeA.id);\n                const posB = positions.get(nodeB.id);\n                \n                if (!posA || !posB) continue;\n                \n                const dx = posB.x - posA.x;\n                const dy = posB.y - posA.y;\n                const distance = Math.sqrt(dx * dx + dy * dy) || 1;\n                \n                // Coulomb's law: F = k * q1 * q2 / r²\n                const force = this.config.charge / (distance * distance);\n                const fx = force * dx / distance;\n                const fy = force * dy / distance;\n                \n                // Apply equal and opposite forces\n                const forceA = forces.get(nodeA.id);\n                const forceB = forces.get(nodeB.id);\n                \n                forceA.x -= fx;\n                forceA.y -= fy;\n                forceB.x += fx;\n                forceB.y += fy;\n            }\n        }\n    }\n    \n    /**\n     * Calculate attraction forces from edges (springs)\n     */\n    calculateAttractionForces(edges, positions, forces) {\n        edges.forEach(edge => {\n            const sourcePos = positions.get(edge.source);\n            const targetPos = positions.get(edge.target);\n            const sourceForce = forces.get(edge.source);\n            const targetForce = forces.get(edge.target);\n            \n            if (!sourcePos || !targetPos || !sourceForce || !targetForce) return;\n            \n            const dx = targetPos.x - sourcePos.x;\n            const dy = targetPos.y - sourcePos.y;\n            const distance = Math.sqrt(dx * dx + dy * dy) || 1;\n            \n            // Hooke's law: F = k * (distance - restLength)\n            const displacement = distance - this.config.distance;\n            const force = displacement * 0.1; // Spring constant\n            \n            const fx = force * dx / distance;\n            const fy = force * dy / distance;\n            \n            // Apply forces\n            sourceForce.x += fx;\n            sourceForce.y += fy;\n            targetForce.x -= fx;\n            targetForce.y -= fy;\n        });\n    }\n    \n    /**\n     * Integrate forces using Verlet integration\n     */\n    integrateForces(nodes, positions, velocities, forces, deltaTime) {\n        nodes.forEach(node => {\n            const position = positions.get(node.id);\n            const velocity = velocities.get(node.id);\n            const force = forces.get(node.id);\n            \n            if (!position || !velocity || !force) return;\n            \n            // Update velocity: v = v + a * dt\n            velocity.x += force.x * deltaTime;\n            velocity.y += force.y * deltaTime;\n            \n            // Apply damping\n            velocity.x *= this.config.damping;\n            velocity.y *= this.config.damping;\n            \n            // Update position: p = p + v * dt\n            position.x += velocity.x * deltaTime;\n            position.y += velocity.y * deltaTime;\n            \n            // Keep nodes within bounds (optional)\n            const margin = 50;\n            position.x = Math.max(margin, Math.min(800 - margin, position.x));\n            position.y = Math.max(margin, Math.min(600 - margin, position.y));\n        });\n    }\n    \n    /**\n     * Calculate total kinetic energy for convergence detection\n     */\n    calculateTotalEnergy(velocities) {\n        let energy = 0;\n        for (const velocity of velocities.values()) {\n            energy += velocity.x * velocity.x + velocity.y * velocity.y;\n        }\n        return energy;\n    }\n    \n    /**\n     * Start physics simulation\n     */\n    start() {\n        this.isRunning = true;\n        this.iteration = 0;\n        console.log('▶️ PhysicsEngine started');\n    }\n    \n    /**\n     * Stop physics simulation\n     */\n    stop() {\n        this.isRunning = false;\n        console.log('⏹️ PhysicsEngine stopped');\n    }\n    \n    /**\n     * Pause physics (can be resumed)\n     */\n    pause() {\n        this.isRunning = false;\n        console.log('⏸️ PhysicsEngine paused (converged)');\n    }\n    \n    /**\n     * Update configuration\n     */\n    updateConfig(newConfig) {\n        this.config = { ...this.config, ...newConfig };\n        console.log('⚙️ PhysicsEngine config updated:', this.config);\n    }\n    \n    /**\n     * Get current state\n     */\n    getState() {\n        return {\n            isRunning: this.isRunning,\n            iteration: this.iteration,\n            totalEnergy: this.totalEnergy,\n            config: this.config\n        };\n    }\n    \n    /**\n     * Reset simulation state\n     */\n    reset() {\n        this.iteration = 0;\n        this.totalEnergy = 0;\n        console.log('🔄 PhysicsEngine reset');\n    }\n}\n\nexport default PhysicsEngine;","/**\n * 🎨 Unified SVG Renderer\n * \n * Efficient SVG rendering with Level-of-Detail (LOD) optimization\n * Consistent rendering pipeline across all visualization environments\n */\n\nexport class SVGRenderer {\n    constructor(config = {}) {\n        this.config = {\n            width: 800,\n            height: 600,\n            nodeRadius: 8,\n            edgeWidth: 1,\n            nodeColor: '#007bff',\n            edgeColor: '#999',\n            backgroundColor: '#ffffff',\n            enableLOD: true,        // Level-of-detail rendering\n            lodThreshold: 1000,     // Switch to LOD when > 1000 nodes\n            enableLabels: true,\n            labelThreshold: 100,    // Hide labels when > 100 nodes\n            ...config\n        };\n        \n        this.element = null;\n        this.svg = null;\n        this.nodesGroup = null;\n        this.edgesGroup = null;\n        this.labelsGroup = null;\n        \n        // Performance tracking\n        this.frameCount = 0;\n        this.lastRenderTime = 0;\n        this.renderTimes = [];\n        \n        console.log('🎨 SVGRenderer initialized:', this.config);\n    }\n    \n    /**\n     * Attach renderer to DOM element\n     */\n    attachToElement(element) {\n        this.element = element;\n        this.createSVGStructure();\n        console.log('🔗 SVGRenderer attached to element');\n    }\n    \n    /**\n     * Create SVG structure\n     */\n    createSVGStructure() {\n        if (!this.element) return;\n        \n        // Clear existing content\n        this.element.innerHTML = '';\n        \n        // Create SVG\n        this.svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n        this.svg.setAttribute('width', this.config.width);\n        this.svg.setAttribute('height', this.config.height);\n        this.svg.style.backgroundColor = this.config.backgroundColor;\n        this.svg.style.border = '1px solid #ddd';\n        \n        // Create groups for layered rendering (edges behind nodes)\n        this.edgesGroup = document.createElementNS('http://www.w3.org/2000/svg', 'g');\n        this.edgesGroup.setAttribute('class', 'edges');\n        \n        this.nodesGroup = document.createElementNS('http://www.w3.org/2000/svg', 'g');\n        this.nodesGroup.setAttribute('class', 'nodes');\n        \n        this.labelsGroup = document.createElementNS('http://www.w3.org/2000/svg', 'g');\n        this.labelsGroup.setAttribute('class', 'labels');\n        \n        // Add groups to SVG in correct order\n        this.svg.appendChild(this.edgesGroup);\n        this.svg.appendChild(this.nodesGroup);\n        this.svg.appendChild(this.labelsGroup);\n        \n        // Add to DOM\n        this.element.appendChild(this.svg);\n    }\n    \n    /**\n     * 🎯 Main render method - used by all environments\n     */\n    render(renderData) {\n        if (!this.svg) return;\n        \n        const startTime = performance.now();\n        \n        const { nodes, edges, positions, frameCount } = renderData;\n        \n        // Choose rendering strategy based on data size\n        const shouldUseLOD = this.config.enableLOD && nodes.length > this.config.lodThreshold;\n        const shouldShowLabels = this.config.enableLabels && nodes.length <= this.config.labelThreshold;\n        \n        if (shouldUseLOD) {\n            this.renderLOD(nodes, edges, positions);\n        } else {\n            this.renderFull(nodes, edges, positions, shouldShowLabels);\n        }\n        \n        // Performance tracking\n        const renderTime = performance.now() - startTime;\n        this.recordRenderTime(renderTime);\n        this.frameCount = frameCount || this.frameCount + 1;\n    }\n    \n    /**\n     * Full quality rendering\n     */\n    renderFull(nodes, edges, positions, showLabels = true) {\n        // Render edges first (behind nodes)\n        this.renderEdges(edges, positions);\n        \n        // Render nodes\n        this.renderNodes(nodes, positions);\n        \n        // Render labels if enabled\n        if (showLabels) {\n            this.renderLabels(nodes, positions);\n        } else {\n            this.labelsGroup.innerHTML = '';\n        }\n    }\n    \n    /**\n     * Level-of-detail rendering for large graphs\n     */\n    renderLOD(nodes, edges, positions) {\n        // Simplified rendering for performance\n        // - Smaller nodes\n        // - No labels\n        // - Thinner edges\n        // - Possible node clustering\n        \n        this.renderEdgesLOD(edges, positions);\n        this.renderNodesLOD(nodes, positions);\n        this.labelsGroup.innerHTML = '';\n    }\n    \n    /**\n     * Render edges\n     */\n    renderEdges(edges, positions) {\n        // Clear existing edges\n        this.edgesGroup.innerHTML = '';\n        \n        edges.forEach(edge => {\n            const sourcePos = positions.get ? positions.get(edge.source) : positions[edge.source];\n            const targetPos = positions.get ? positions.get(edge.target) : positions[edge.target];\n            \n            if (!sourcePos || !targetPos) return;\n            \n            const line = document.createElementNS('http://www.w3.org/2000/svg', 'line');\n            line.setAttribute('x1', sourcePos.x);\n            line.setAttribute('y1', sourcePos.y);\n            line.setAttribute('x2', targetPos.x);\n            line.setAttribute('y2', targetPos.y);\n            line.setAttribute('stroke', edge.color || this.config.edgeColor);\n            line.setAttribute('stroke-width', edge.width || this.config.edgeWidth);\n            line.setAttribute('opacity', '0.8');\n            \n            // Add edge ID for interaction\n            line.setAttribute('data-edge-id', edge.id);\n            \n            this.edgesGroup.appendChild(line);\n        });\n    }\n    \n    /**\n     * Render edges (LOD version)\n     */\n    renderEdgesLOD(edges, positions) {\n        this.edgesGroup.innerHTML = '';\n        \n        edges.forEach(edge => {\n            const sourcePos = positions.get ? positions.get(edge.source) : positions[edge.source];\n            const targetPos = positions.get ? positions.get(edge.target) : positions[edge.target];\n            \n            if (!sourcePos || !targetPos) return;\n            \n            const line = document.createElementNS('http://www.w3.org/2000/svg', 'line');\n            line.setAttribute('x1', sourcePos.x);\n            line.setAttribute('y1', sourcePos.y);\n            line.setAttribute('x2', targetPos.x);\n            line.setAttribute('y2', targetPos.y);\n            line.setAttribute('stroke', this.config.edgeColor);\n            line.setAttribute('stroke-width', '0.5'); // Thinner for LOD\n            line.setAttribute('opacity', '0.6');\n            \n            this.edgesGroup.appendChild(line);\n        });\n    }\n    \n    /**\n     * Render nodes\n     */\n    renderNodes(nodes, positions) {\n        // Clear existing nodes\n        this.nodesGroup.innerHTML = '';\n        \n        nodes.forEach(node => {\n            const position = positions.get ? positions.get(node.id) : positions[node.id];\n            if (!position) return;\n            \n            const circle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\n            circle.setAttribute('cx', position.x);\n            circle.setAttribute('cy', position.y);\n            circle.setAttribute('r', node.size || this.config.nodeRadius);\n            circle.setAttribute('fill', node.color || this.config.nodeColor);\n            circle.setAttribute('stroke', '#ffffff');\n            circle.setAttribute('stroke-width', '2');\n            circle.setAttribute('opacity', '0.9');\n            \n            // Add node ID for interaction\n            circle.setAttribute('data-node-id', node.id);\n            \n            // Make interactive\n            circle.style.cursor = 'pointer';\n            \n            this.nodesGroup.appendChild(circle);\n        });\n    }\n    \n    /**\n     * Render nodes (LOD version)\n     */\n    renderNodesLOD(nodes, positions) {\n        this.nodesGroup.innerHTML = '';\n        \n        nodes.forEach(node => {\n            const position = positions.get ? positions.get(node.id) : positions[node.id];\n            if (!position) return;\n            \n            const circle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\n            circle.setAttribute('cx', position.x);\n            circle.setAttribute('cy', position.y);\n            circle.setAttribute('r', '3'); // Smaller for LOD\n            circle.setAttribute('fill', this.config.nodeColor);\n            circle.setAttribute('stroke', 'none');\n            circle.setAttribute('opacity', '0.8');\n            \n            this.nodesGroup.appendChild(circle);\n        });\n    }\n    \n    /**\n     * Render labels\n     */\n    renderLabels(nodes, positions) {\n        this.labelsGroup.innerHTML = '';\n        \n        nodes.forEach(node => {\n            if (!node.label) return;\n            \n            const position = positions.get ? positions.get(node.id) : positions[node.id];\n            if (!position) return;\n            \n            const text = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n            text.setAttribute('x', position.x);\n            text.setAttribute('y', position.y - (node.size || this.config.nodeRadius) - 5);\n            text.setAttribute('text-anchor', 'middle');\n            text.setAttribute('font-family', 'Arial, sans-serif');\n            text.setAttribute('font-size', '12');\n            text.setAttribute('fill', '#333');\n            text.textContent = node.label;\n            \n            this.labelsGroup.appendChild(text);\n        });\n    }\n    \n    /**\n     * Record render time for performance monitoring\n     */\n    recordRenderTime(time) {\n        this.renderTimes.push(time);\n        if (this.renderTimes.length > 60) { // Keep last 60 frames\n            this.renderTimes.shift();\n        }\n        this.lastRenderTime = time;\n    }\n    \n    /**\n     * Get performance statistics\n     */\n    getPerformanceStats() {\n        if (this.renderTimes.length === 0) return null;\n        \n        const avg = this.renderTimes.reduce((a, b) => a + b, 0) / this.renderTimes.length;\n        const max = Math.max(...this.renderTimes);\n        const min = Math.min(...this.renderTimes);\n        \n        return {\n            averageRenderTime: avg.toFixed(2),\n            maxRenderTime: max.toFixed(2),\n            minRenderTime: min.toFixed(2),\n            frameCount: this.frameCount,\n            fps: (1000 / avg).toFixed(1)\n        };\n    }\n    \n    /**\n     * Update configuration\n     */\n    updateConfig(newConfig) {\n        this.config = { ...this.config, ...newConfig };\n        \n        // Update SVG if size changed\n        if (this.svg && (newConfig.width || newConfig.height)) {\n            this.svg.setAttribute('width', this.config.width);\n            this.svg.setAttribute('height', this.config.height);\n        }\n        \n        console.log('⚙️ SVGRenderer config updated:', this.config);\n    }\n    \n    /**\n     * Clear renderer\n     */\n    clear() {\n        if (this.nodesGroup) this.nodesGroup.innerHTML = '';\n        if (this.edgesGroup) this.edgesGroup.innerHTML = '';\n        if (this.labelsGroup) this.labelsGroup.innerHTML = '';\n    }\n    \n    /**\n     * Export current SVG as string\n     */\n    exportSVG() {\n        if (!this.svg) return null;\n        \n        const serializer = new XMLSerializer();\n        return serializer.serializeToString(this.svg);\n    }\n}\n\nexport default SVGRenderer;","/**\n * 🖱️ Unified Interaction Engine\n * \n * Handles mouse, touch, and keyboard interactions consistently\n * across all visualization environments\n */\n\nexport class InteractionEngine {\n    constructor(config = {}) {\n        this.config = {\n            enableDrag: true,\n            enableZoom: true,\n            enablePan: true,\n            enableMultiTouch: true,\n            dragThreshold: 5,      // pixels before drag starts\n            zoomSensitivity: 0.1,\n            panSensitivity: 1.0,\n            ...config\n        };\n        \n        this.element = null;\n        this.callbacks = new Map();\n        this.state = {\n            isDragging: false,\n            isPanning: false,\n            draggedNode: null,\n            lastMousePos: { x: 0, y: 0 },\n            dragStartPos: { x: 0, y: 0 },\n            zoom: 1,\n            pan: { x: 0, y: 0 }\n        };\n        \n        // Event listeners\n        this.listeners = new Map();\n        \n        console.log('🖱️ InteractionEngine initialized:', this.config);\n    }\n    \n    /**\n     * Attach interaction engine to DOM element\n     */\n    attachToElement(element, callbacks = {}) {\n        this.element = element;\n        this.callbacks = new Map(Object.entries(callbacks));\n        \n        this.setupEventListeners();\n        \n        console.log('🔗 InteractionEngine attached to element');\n    }\n    \n    /**\n     * Setup event listeners\n     */\n    setupEventListeners() {\n        if (!this.element) return;\n        \n        // Mouse events\n        this.addListener('mousedown', this.handleMouseDown.bind(this));\n        this.addListener('mousemove', this.handleMouseMove.bind(this));\n        this.addListener('mouseup', this.handleMouseUp.bind(this));\n        this.addListener('wheel', this.handleWheel.bind(this));\n        \n        // Touch events for mobile\n        if (this.config.enableMultiTouch) {\n            this.addListener('touchstart', this.handleTouchStart.bind(this));\n            this.addListener('touchmove', this.handleTouchMove.bind(this));\n            this.addListener('touchend', this.handleTouchEnd.bind(this));\n        }\n        \n        // Keyboard events\n        this.addListener('keydown', this.handleKeyDown.bind(this));\n        \n        // Prevent context menu on right click\n        this.addListener('contextmenu', (e) => e.preventDefault());\n    }\n    \n    /**\n     * Add event listener and track it\n     */\n    addListener(event, handler) {\n        this.element.addEventListener(event, handler);\n        if (!this.listeners.has(event)) {\n            this.listeners.set(event, []);\n        }\n        this.listeners.get(event).push(handler);\n    }\n    \n    /**\n     * Handle mouse down events\n     */\n    handleMouseDown(event) {\n        event.preventDefault();\n        \n        const rect = this.element.getBoundingClientRect();\n        const mousePos = {\n            x: event.clientX - rect.left,\n            y: event.clientY - rect.top\n        };\n        \n        this.state.lastMousePos = mousePos;\n        this.state.dragStartPos = { ...mousePos };\n        \n        // Check if clicking on a node\n        const target = event.target;\n        const nodeId = target.getAttribute('data-node-id');\n        const edgeId = target.getAttribute('data-edge-id');\n        \n        if (nodeId && this.config.enableDrag) {\n            this.state.draggedNode = nodeId;\n            this.state.isDragging = false; // Will become true after threshold\n            this.emit('node_mousedown', { nodeId, position: mousePos, event });\n        } else if (edgeId) {\n            this.emit('edge_click', { edgeId, position: mousePos, event });\n        } else if (this.config.enablePan) {\n            this.state.isPanning = true;\n        }\n    }\n    \n    /**\n     * Handle mouse move events\n     */\n    handleMouseMove(event) {\n        event.preventDefault();\n        \n        const rect = this.element.getBoundingClientRect();\n        const mousePos = {\n            x: event.clientX - rect.left,\n            y: event.clientY - rect.top\n        };\n        \n        const deltaX = mousePos.x - this.state.lastMousePos.x;\n        const deltaY = mousePos.y - this.state.lastMousePos.y;\n        \n        // Node dragging\n        if (this.state.draggedNode) {\n            const distance = Math.sqrt(\n                Math.pow(mousePos.x - this.state.dragStartPos.x, 2) +\n                Math.pow(mousePos.y - this.state.dragStartPos.y, 2)\n            );\n            \n            if (!this.state.isDragging && distance > this.config.dragThreshold) {\n                this.state.isDragging = true;\n                this.emit('drag_start', { nodeId: this.state.draggedNode, position: mousePos });\n            }\n            \n            if (this.state.isDragging) {\n                this.emit('node_drag', { \n                    nodeId: this.state.draggedNode, \n                    position: mousePos,\n                    delta: { x: deltaX, y: deltaY }\n                });\n            }\n        }\n        // Canvas panning\n        else if (this.state.isPanning && this.config.enablePan) {\n            this.state.pan.x += deltaX * this.config.panSensitivity;\n            this.state.pan.y += deltaY * this.config.panSensitivity;\n            \n            this.emit('pan', { \n                pan: { ...this.state.pan },\n                delta: { x: deltaX, y: deltaY }\n            });\n        }\n        \n        this.state.lastMousePos = mousePos;\n    }\n    \n    /**\n     * Handle mouse up events\n     */\n    handleMouseUp(event) {\n        event.preventDefault();\n        \n        const rect = this.element.getBoundingClientRect();\n        const mousePos = {\n            x: event.clientX - rect.left,\n            y: event.clientY - rect.top\n        };\n        \n        // End node dragging\n        if (this.state.draggedNode) {\n            if (this.state.isDragging) {\n                this.emit('drag_end', { \n                    nodeId: this.state.draggedNode, \n                    position: mousePos \n                });\n            } else {\n                // Was a click, not a drag\n                this.emit('node_click', { \n                    nodeId: this.state.draggedNode, \n                    position: mousePos,\n                    event\n                });\n            }\n            \n            this.state.draggedNode = null;\n            this.state.isDragging = false;\n        }\n        \n        // End panning\n        if (this.state.isPanning) {\n            this.state.isPanning = false;\n            this.emit('pan_end', { pan: { ...this.state.pan } });\n        }\n    }\n    \n    /**\n     * Handle wheel events for zooming\n     */\n    handleWheel(event) {\n        if (!this.config.enableZoom) return;\n        \n        event.preventDefault();\n        \n        const rect = this.element.getBoundingClientRect();\n        const mousePos = {\n            x: event.clientX - rect.left,\n            y: event.clientY - rect.top\n        };\n        \n        const deltaZoom = -event.deltaY * this.config.zoomSensitivity * 0.01;\n        const newZoom = Math.max(0.1, Math.min(5, this.state.zoom + deltaZoom));\n        \n        if (newZoom !== this.state.zoom) {\n            this.state.zoom = newZoom;\n            \n            this.emit('zoom', { \n                zoom: this.state.zoom,\n                center: mousePos,\n                delta: deltaZoom\n            });\n        }\n    }\n    \n    /**\n     * Handle touch start events\n     */\n    handleTouchStart(event) {\n        event.preventDefault();\n        \n        if (event.touches.length === 1) {\n            // Single touch - treat as mouse down\n            const touch = event.touches[0];\n            const mouseEvent = {\n                clientX: touch.clientX,\n                clientY: touch.clientY,\n                target: touch.target,\n                preventDefault: () => {}\n            };\n            this.handleMouseDown(mouseEvent);\n        }\n        // Multi-touch gestures could be handled here\n    }\n    \n    /**\n     * Handle touch move events\n     */\n    handleTouchMove(event) {\n        event.preventDefault();\n        \n        if (event.touches.length === 1) {\n            // Single touch - treat as mouse move\n            const touch = event.touches[0];\n            const mouseEvent = {\n                clientX: touch.clientX,\n                clientY: touch.clientY,\n                preventDefault: () => {}\n            };\n            this.handleMouseMove(mouseEvent);\n        }\n        // Multi-touch gestures could be handled here\n    }\n    \n    /**\n     * Handle touch end events\n     */\n    handleTouchEnd(event) {\n        event.preventDefault();\n        \n        // Use last known position for touch end\n        const mouseEvent = {\n            clientX: this.state.lastMousePos.x,\n            clientY: this.state.lastMousePos.y,\n            preventDefault: () => {}\n        };\n        this.handleMouseUp(mouseEvent);\n    }\n    \n    /**\n     * Handle keyboard events\n     */\n    handleKeyDown(event) {\n        // Space bar to reset view\n        if (event.code === 'Space') {\n            event.preventDefault();\n            this.resetView();\n        }\n        \n        // Arrow keys for panning\n        if (this.config.enablePan) {\n            const panStep = 20;\n            let deltaX = 0, deltaY = 0;\n            \n            switch (event.code) {\n                case 'ArrowLeft':\n                    deltaX = -panStep;\n                    break;\n                case 'ArrowRight':\n                    deltaX = panStep;\n                    break;\n                case 'ArrowUp':\n                    deltaY = -panStep;\n                    break;\n                case 'ArrowDown':\n                    deltaY = panStep;\n                    break;\n            }\n            \n            if (deltaX || deltaY) {\n                event.preventDefault();\n                this.state.pan.x += deltaX;\n                this.state.pan.y += deltaY;\n                \n                this.emit('pan', { \n                    pan: { ...this.state.pan },\n                    delta: { x: deltaX, y: deltaY }\n                });\n            }\n        }\n    }\n    \n    /**\n     * Reset view to default state\n     */\n    resetView() {\n        this.state.zoom = 1;\n        this.state.pan = { x: 0, y: 0 };\n        \n        this.emit('view_reset', {\n            zoom: this.state.zoom,\n            pan: { ...this.state.pan }\n        });\n    }\n    \n    /**\n     * Process frame (called from main update loop)\n     */\n    processFrame() {\n        // Could be used for continuous interactions or animations\n        // Currently not needed but available for future use\n    }\n    \n    /**\n     * Emit event to callbacks\n     */\n    emit(event, data) {\n        const callback = this.callbacks.get(event);\n        if (callback) {\n            try {\n                callback(data);\n            } catch (error) {\n                console.error(`Error in interaction callback for ${event}:`, error);\n            }\n        }\n    }\n    \n    /**\n     * Update configuration\n     */\n    updateConfig(newConfig) {\n        this.config = { ...this.config, ...newConfig };\n        console.log('⚙️ InteractionEngine config updated:', this.config);\n    }\n    \n    /**\n     * Get current interaction state\n     */\n    getState() {\n        return { ...this.state };\n    }\n    \n    /**\n     * Set interaction state\n     */\n    setState(newState) {\n        this.state = { ...this.state, ...newState };\n    }\n    \n    /**\n     * Clean up event listeners\n     */\n    cleanup() {\n        if (!this.element) return;\n        \n        for (const [event, handlers] of this.listeners) {\n            handlers.forEach(handler => {\n                this.element.removeEventListener(event, handler);\n            });\n        }\n        \n        this.listeners.clear();\n        console.log('🧹 InteractionEngine cleaned up');\n    }\n}\n\nexport default InteractionEngine;","/**\n * 🎯 Unified Visualization Core - Single Source of Truth\n * \n * This is the unified core engine that works across all visualization environments:\n * - Jupyter widgets\n * - WebSocket streaming clients  \n * - Static file exports\n * - Local browser displays\n */\n\nimport { PhysicsEngine } from './PhysicsEngine.js';\nimport { SVGRenderer } from './SVGRenderer.js';\nimport { InteractionEngine } from './InteractionEngine.js';\n\nexport class GroggyVizCore {\n    constructor(nodes = [], edges = [], config = {}) {\n        // Store core data\n        this.nodes = nodes;\n        this.edges = edges;\n        this.config = {\n            // Top-level properties for backward compatibility\n            width: 800,\n            height: 600,\n            ...config,\n            // Nested configuration\n            physics: {\n                enabled: true,\n                charge: -300,\n                distance: 50,\n                damping: 0.9,\n                iterations: 100,\n                ...config.physics\n            },\n            rendering: {\n                width: config.width || 800,\n                height: config.height || 600,\n                nodeRadius: 8,\n                edgeWidth: 1,\n                ...config.rendering\n            },\n            interaction: {\n                enableDrag: true,\n                enableZoom: true,\n                enablePan: true,\n                ...config.interaction\n            }\n        };\n        \n        // Initialize subsystems\n        this.physics = new PhysicsEngine(this.config.physics);\n        this.renderer = new SVGRenderer(this.config.rendering);\n        this.interactions = new InteractionEngine(this.config.interaction);\n        \n        // State\n        this.positions = new Map();\n        this.velocities = new Map();\n        this.isRunning = false;\n        this.frameCount = 0;\n        \n        // Additional properties for widget compatibility\n        this.selectedNodes = new Set();\n        this.nodePositions = this.positions; // Alias for compatibility\n        \n        // Event system for bidirectional communication\n        this.eventCallbacks = new Map();\n        \n        console.log('🎨 GroggyVizCore initialized:', {\n            nodes: this.nodes.length,\n            edges: this.edges.length,\n            config: this.config\n        });\n    }\n    \n    /**\n     * 🎯 Single update method used by ALL visualization environments\n     */\n    update(frameData = null) {\n        if (frameData) {\n            // External frame data (from WebSocket, etc.)\n            this.applyFrameData(frameData);\n        } else {\n            // Internal physics simulation\n            this.physics.updatePositions(\n                this.nodes, \n                this.edges, \n                this.positions, \n                this.velocities,\n                1/60 // 60 FPS\n            );\n        }\n        \n        // Render the current state\n        this.renderer.render({\n            nodes: this.nodes,\n            edges: this.edges,\n            positions: this.positions,\n            frameCount: this.frameCount++\n        });\n        \n        // Handle interactions\n        this.interactions.processFrame();\n        \n        // Emit frame event\n        this.emit('frame', {\n            nodes: this.nodes,\n            edges: this.edges,\n            positions: this.positions,\n            frameCount: this.frameCount\n        });\n        \n        return this.getFrameData();\n    }\n    \n    /**\n     * Apply frame data from external source (WebSocket streaming)\n     */\n    applyFrameData(frameData) {\n        if (frameData.positions) {\n            for (const [nodeId, position] of Object.entries(frameData.positions)) {\n                this.positions.set(nodeId, position);\n            }\n        }\n        \n        if (frameData.nodes) {\n            this.nodes = frameData.nodes;\n        }\n        \n        if (frameData.edges) {\n            this.edges = frameData.edges;\n        }\n    }\n    \n    /**\n     * Get current frame data for transmission\n     */\n    getFrameData() {\n        return {\n            nodes: this.nodes,\n            edges: this.edges,\n            positions: Object.fromEntries(this.positions),\n            velocities: Object.fromEntries(this.velocities),\n            frameCount: this.frameCount,\n            timestamp: Date.now()\n        };\n    }\n    \n    /**\n     * Attach to DOM element (for widgets and local display)\n     */\n    attachToDOM(element, callbacks = {}) {\n        this.element = element;\n        this.eventCallbacks = new Map(Object.entries(callbacks));\n        \n        // Initialize renderer with DOM element\n        this.renderer.attachToElement(element);\n        \n        // Setup interactions\n        this.interactions.attachToElement(element, {\n            onNodeDrag: (nodeId, position) => {\n                this.positions.set(nodeId, position);\n                this.emit('node_drag', { nodeId, position });\n            },\n            onNodeClick: (nodeId) => {\n                this.emit('node_click', { nodeId });\n            },\n            onEdgeClick: (edgeId) => {\n                this.emit('edge_click', { edgeId });\n            }\n        });\n        \n        console.log('🔗 GroggyVizCore attached to DOM element:', element);\n    }\n    \n    /**\n     * Start physics simulation\n     */\n    start() {\n        this.isRunning = true;\n        this.physics.start();\n        this.animationLoop();\n        console.log('▶️ GroggyVizCore simulation started');\n    }\n    \n    /**\n     * Stop physics simulation\n     */\n    stop() {\n        this.isRunning = false;\n        this.physics.stop();\n        console.log('⏹️ GroggyVizCore simulation stopped');\n    }\n    \n    /**\n     * Animation loop for local/widget environments\n     */\n    animationLoop() {\n        if (!this.isRunning) return;\n        \n        this.update();\n        requestAnimationFrame(() => this.animationLoop());\n    }\n    \n    /**\n     * Event system\n     */\n    on(event, callback) {\n        if (!this.eventCallbacks.has(event)) {\n            this.eventCallbacks.set(event, []);\n        }\n        this.eventCallbacks.get(event).push(callback);\n    }\n    \n    emit(event, data) {\n        if (this.eventCallbacks.has(event)) {\n            this.eventCallbacks.get(event).forEach(callback => {\n                try {\n                    callback(data);\n                } catch (error) {\n                    console.error(`Error in event callback for ${event}:`, error);\n                }\n            });\n        }\n    }\n    \n    /**\n     * Update graph data\n     */\n    setData(nodes, edges) {\n        this.nodes = nodes;\n        this.edges = edges;\n        \n        // Reset physics state\n        this.positions.clear();\n        this.velocities.clear();\n        this.frameCount = 0;\n        \n        // Initialize positions if not provided\n        this.nodes.forEach((node, index) => {\n            if (!this.positions.has(node.id)) {\n                // Simple circular layout as default\n                const angle = (index * 2 * Math.PI) / this.nodes.length;\n                const radius = Math.min(this.config.rendering.width, this.config.rendering.height) / 4;\n                this.positions.set(node.id, {\n                    x: this.config.rendering.width / 2 + radius * Math.cos(angle),\n                    y: this.config.rendering.height / 2 + radius * Math.sin(angle)\n                });\n            }\n            \n            if (!this.velocities.has(node.id)) {\n                this.velocities.set(node.id, { x: 0, y: 0 });\n            }\n        });\n        \n        this.emit('data_updated', { nodes, edges });\n        console.log('📊 GroggyVizCore data updated:', { nodes: nodes.length, edges: edges.length });\n    }\n    \n    /**\n     * Get current configuration\n     */\n    getConfig() {\n        return { ...this.config };\n    }\n    \n    /**\n     * Update configuration\n     */\n    updateConfig(newConfig) {\n        this.config = {\n            ...this.config,\n            ...newConfig,\n            physics: { ...this.config.physics, ...newConfig.physics },\n            rendering: { ...this.config.rendering, ...newConfig.rendering },\n            interaction: { ...this.config.interaction, ...newConfig.interaction }\n        };\n        \n        // Update subsystems\n        this.physics.updateConfig(this.config.physics);\n        this.renderer.updateConfig(this.config.rendering);\n        this.interactions.updateConfig(this.config.interaction);\n        \n        this.emit('config_updated', this.config);\n        console.log('⚙️ GroggyVizCore config updated:', this.config);\n    }\n    \n    /**\n     * Export current state for saving/serialization\n     */\n    exportState() {\n        return {\n            nodes: this.nodes,\n            edges: this.edges,\n            positions: Object.fromEntries(this.positions),\n            velocities: Object.fromEntries(this.velocities),\n            selectedNodes: Array.from(this.selectedNodes),\n            config: this.config,\n            frameCount: this.frameCount,\n            timestamp: Date.now()\n        };\n    }\n    \n    /**\n     * Clean up and destroy the visualization\n     */\n    destroy() {\n        this.stop();\n        \n        // Cleanup subsystems\n        if (this.interactions && typeof this.interactions.cleanup === 'function') {\n            this.interactions.cleanup();\n        }\n        \n        if (this.renderer && typeof this.renderer.clear === 'function') {\n            this.renderer.clear();\n        }\n        \n        // Clear data\n        this.positions.clear();\n        this.velocities.clear();\n        this.selectedNodes.clear();\n        this.eventCallbacks.clear();\n        \n        // Clear references\n        this.element = null;\n        this.nodes = [];\n        this.edges = [];\n        \n        console.log('🧹 GroggyVizCore destroyed');\n    }\n}\n\nexport default GroggyVizCore;","/**\n * 🧠 Unified Jupyter Widget using GroggyVizCore\n * \n * Refactored to use the unified JavaScript core for consistency\n * across all visualization environments. This replaces the original\n * widget.ts with a version that leverages the unified architecture.\n */\n\nimport { DOMWidgetModel, DOMWidgetView } from '@jupyter-widgets/base';\nimport { GroggyVizCore } from './core/VizCore.js';\n\nexport const MODULE_NAME = 'groggy-widgets';\nexport const MODULE_VERSION = '0.1.0';\n\nexport class GroggyGraphModel extends DOMWidgetModel {\n  static model_name = 'GroggyGraphModel';\n  static model_module = MODULE_NAME;\n  static model_module_version = MODULE_VERSION;\n\n  defaults() {\n    return {\n      ...super.defaults(),\n      _model_name: 'GroggyGraphModel',\n      _model_module: MODULE_NAME,\n      _model_module_version: MODULE_VERSION,\n      _view_name: 'GroggyGraphView',\n      _view_module: MODULE_NAME,\n      _view_module_version: MODULE_VERSION,\n      \n      // Graph data traits\n      nodes: [],\n      edges: [],\n      title: 'Graph Visualization',\n      \n      // Configuration traits\n      width: 800,\n      height: 600,\n      layout_algorithm: 'force-directed',\n      theme: 'light',\n      \n      // Physics configuration\n      physics_enabled: true,\n      force_strength: 30,\n      link_distance: 50,\n      link_strength: 0.1,\n      charge_strength: -300,\n      center_strength: 0.1,\n      \n      // Interaction configuration\n      enable_drag: true,\n      enable_zoom: true,\n      enable_pan: true,\n      enable_selection: true,\n      enable_hover: true,\n      \n      // State traits\n      selected_nodes: [],\n      hovered_node: '',\n      camera_position: { scale: 1, translate: { x: 0, y: 0 } },\n      is_dragging: false,\n      \n      // Styling\n      node_color_scheme: 'default',\n      background_color: '#ffffff',\n      enable_shadows: true,\n      enable_animations: true\n    };\n  }\n}\n\nexport class GroggyGraphView extends DOMWidgetView {\n  static view_name = 'GroggyGraphView';\n  static view_module = MODULE_NAME;\n  static view_module_version = MODULE_VERSION;\n  \n  private vizCore: GroggyVizCore | null = null;\n  private container: HTMLElement | null = null;\n\n  render() {\n    console.log('🧠 Initializing Groggy Jupyter widget with unified core');\n    \n    // Create main container\n    this.el.style.cssText = `\n      border: 2px solid #4CAF50;\n      padding: 10px;\n      margin: 10px;\n      border-radius: 8px;\n      background: #f9f9f9;\n      font-family: Arial, sans-serif;\n      min-height: 400px;\n      position: relative;\n      user-select: none;\n    `;\n    \n    // Create header\n    const header = document.createElement('div');\n    header.style.cssText = `\n      font-weight: bold;\n      margin-bottom: 10px;\n      color: #333;\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n    `;\n    \n    const title = document.createElement('span');\n    title.textContent = this.model.get('title') || 'Graph Visualization';\n    header.appendChild(title);\n    \n    const status = document.createElement('span');\n    status.style.cssText = `\n      font-size: 12px;\n      color: #666;\n      background: rgba(255,255,255,0.8);\n      padding: 2px 6px;\n      border-radius: 3px;\n    `;\n    status.textContent = 'Powered by GroggyVizCore';\n    header.appendChild(status);\n    \n    this.el.appendChild(header);\n    \n    // Create visualization container\n    this.container = document.createElement('div');\n    this.container.style.cssText = `\n      width: 100%;\n      height: ${this.model.get('height') || 600}px;\n      border: 1px solid #ddd;\n      background: ${this.model.get('background_color') || '#ffffff'};\n      position: relative;\n      overflow: hidden;\n      border-radius: 4px;\n    `;\n    this.el.appendChild(this.container);\n    \n    // Initialize unified core\n    this.initializeVizCore();\n    \n    // Set up model change listeners\n    this.setupModelListeners();\n    \n    // Initial data load\n    this.updateData();\n  }\n  \n  /**\n   * 🧠 Initialize the unified visualization core\n   */\n  private initializeVizCore() {\n    const config = {\n      width: this.model.get('width') || 800,\n      height: this.model.get('height') || 600,\n      \n      physics: {\n        enabled: this.model.get('physics_enabled') !== false,\n        forceStrength: this.model.get('force_strength') || 30,\n        linkDistance: this.model.get('link_distance') || 50,\n        linkStrength: this.model.get('link_strength') || 0.1,\n        chargeStrength: this.model.get('charge_strength') || -300,\n        centerStrength: this.model.get('center_strength') || 0.1\n      },\n      \n      rendering: {\n        backgroundColor: this.model.get('background_color') || '#ffffff',\n        nodeColorScheme: this.model.get('node_color_scheme') || 'default',\n        enableShadows: this.model.get('enable_shadows') !== false,\n        enableAnimations: this.model.get('enable_animations') !== false\n      },\n      \n      interaction: {\n        enableDrag: this.model.get('enable_drag') !== false,\n        enableZoom: this.model.get('enable_zoom') !== false,\n        enablePan: this.model.get('enable_pan') !== false,\n        enableSelection: this.model.get('enable_selection') !== false,\n        enableHover: this.model.get('enable_hover') !== false\n      }\n    };\n    \n    // Create unified core\n    this.vizCore = new GroggyVizCore([], [], config);\n    \n    // Set up event handlers\n    this.setupCoreEventHandlers();\n    \n    // Attach to DOM\n    if (this.container) {\n      this.vizCore.attachToDOM(this.container);\n    }\n    \n    console.log('🧠 GroggyVizCore initialized for Jupyter widget');\n  }\n  \n  /**\n   * 🎧 Set up event handlers for core → Jupyter synchronization\n   */\n  private setupCoreEventHandlers() {\n    if (!this.vizCore) return;\n    \n    // Node interactions\n    this.vizCore.on('nodeClick', (data: any) => {\n      this.model.send({\n        type: 'node_click',\n        node_id: data.nodeId,\n        event: {\n          ctrlKey: data.event?.ctrlKey || false,\n          metaKey: data.event?.metaKey || false,\n          shiftKey: data.event?.shiftKey || false\n        }\n      });\n    });\n    \n    this.vizCore.on('nodeHover', (data: any) => {\n      this.model.set('hovered_node', data.nodeId || '');\n      this.model.save_changes();\n    });\n    \n    this.vizCore.on('selectionChanged', (data: any) => {\n      this.model.set('selected_nodes', data.selectedNodes || []);\n      this.model.save_changes();\n    });\n    \n    // Physics and camera events\n    this.vizCore.on('simulationStarted', () => {\n      this.updateStatus('Physics simulation running...');\n    });\n    \n    this.vizCore.on('simulationStopped', () => {\n      this.updateStatus('Physics simulation stopped');\n    });\n    \n    this.vizCore.on('zoom', (data: any) => {\n      const camera = this.model.get('camera_position');\n      camera.scale = data.scale;\n      this.model.set('camera_position', camera);\n      this.model.save_changes();\n    });\n    \n    this.vizCore.on('pan', (data: any) => {\n      const camera = this.model.get('camera_position');\n      camera.translate.x += data.delta.x;\n      camera.translate.y += data.delta.y;\n      this.model.set('camera_position', camera);\n      this.model.save_changes();\n    });\n    \n    // Drag events\n    this.vizCore.on('nodeDrag', (data: any) => {\n      if (data.isDragging) {\n        this.model.set('is_dragging', true);\n        this.model.save_changes();\n      }\n    });\n    \n    this.vizCore.on('nodeDragEnd', () => {\n      this.model.set('is_dragging', false);\n      this.model.save_changes();\n    });\n    \n    // Update events for performance monitoring\n    this.vizCore.on('update', (data: any) => {\n      if (data.metadata.frameCount % 60 === 0) { // Every 60 frames\n        this.updateStatus(`FPS: ${Math.round(data.metadata.fps)} | Nodes: ${data.nodes.length}`);\n      }\n    });\n  }\n  \n  /**\n   * 🔄 Set up model change listeners for Jupyter → core synchronization\n   */\n  private setupModelListeners() {\n    // Data changes\n    this.model.on('change:nodes change:edges', () => {\n      this.updateData();\n    });\n    \n    // Configuration changes\n    this.model.on('change:width change:height', () => {\n      this.updateDimensions();\n    });\n    \n    this.model.on('change:physics_enabled change:force_strength change:link_distance change:link_strength change:charge_strength change:center_strength', () => {\n      this.updatePhysicsConfig();\n    });\n    \n    this.model.on('change:background_color change:node_color_scheme change:enable_shadows change:enable_animations', () => {\n      this.updateRenderingConfig();\n    });\n    \n    this.model.on('change:enable_drag change:enable_zoom change:enable_pan change:enable_selection change:enable_hover', () => {\n      this.updateInteractionConfig();\n    });\n    \n    // Selection changes from Python\n    this.model.on('change:selected_nodes', () => {\n      if (this.vizCore) {\n        const selectedNodes = this.model.get('selected_nodes') || [];\n        // Update visual selection without triggering events\n        this.vizCore.selectedNodes.clear();\n        selectedNodes.forEach((nodeId: string) => {\n          this.vizCore!.selectedNodes.add(nodeId);\n        });\n        this.vizCore.update(); // Force re-render\n      }\n    });\n    \n    // Title changes\n    this.model.on('change:title', () => {\n      const titleElement = this.el.querySelector('span');\n      if (titleElement) {\n        titleElement.textContent = this.model.get('title') || 'Graph Visualization';\n      }\n    });\n  }\n  \n  /**\n   * 📊 Update graph data\n   */\n  private updateData() {\n    if (!this.vizCore) return;\n    \n    const nodes = this.model.get('nodes') || [];\n    const edges = this.model.get('edges') || [];\n    \n    this.vizCore.setData(nodes, edges);\n    \n    console.log(`🧠 Updated data: ${nodes.length} nodes, ${edges.length} edges`);\n  }\n  \n  /**\n   * 📐 Update canvas dimensions\n   */\n  private updateDimensions() {\n    if (!this.vizCore || !this.container) return;\n    \n    const width = this.model.get('width') || 800;\n    const height = this.model.get('height') || 600;\n    \n    this.container.style.height = `${height}px`;\n    \n    this.vizCore.updateConfig({\n      width,\n      height\n    });\n    \n    console.log(`🧠 Updated dimensions: ${width}x${height}`);\n  }\n  \n  /**\n   * ⚛️ Update physics configuration\n   */\n  private updatePhysicsConfig() {\n    if (!this.vizCore) return;\n    \n    const physicsConfig = {\n      enabled: this.model.get('physics_enabled') !== false,\n      forceStrength: this.model.get('force_strength') || 30,\n      linkDistance: this.model.get('link_distance') || 50,\n      linkStrength: this.model.get('link_strength') || 0.1,\n      chargeStrength: this.model.get('charge_strength') || -300,\n      centerStrength: this.model.get('center_strength') || 0.1\n    };\n    \n    this.vizCore.updateConfig({ physics: physicsConfig });\n    \n    console.log('🧠 Updated physics configuration');\n  }\n  \n  /**\n   * 🎨 Update rendering configuration\n   */\n  private updateRenderingConfig() {\n    if (!this.vizCore || !this.container) return;\n    \n    const renderingConfig = {\n      backgroundColor: this.model.get('background_color') || '#ffffff',\n      nodeColorScheme: this.model.get('node_color_scheme') || 'default',\n      enableShadows: this.model.get('enable_shadows') !== false,\n      enableAnimations: this.model.get('enable_animations') !== false\n    };\n    \n    this.vizCore.updateConfig({ rendering: renderingConfig });\n    \n    // Update container background\n    this.container.style.background = renderingConfig.backgroundColor;\n    \n    console.log('🧠 Updated rendering configuration');\n  }\n  \n  /**\n   * 🖱️ Update interaction configuration\n   */\n  private updateInteractionConfig() {\n    if (!this.vizCore) return;\n    \n    const interactionConfig = {\n      enableDrag: this.model.get('enable_drag') !== false,\n      enableZoom: this.model.get('enable_zoom') !== false,\n      enablePan: this.model.get('enable_pan') !== false,\n      enableSelection: this.model.get('enable_selection') !== false,\n      enableHover: this.model.get('enable_hover') !== false\n    };\n    \n    this.vizCore.updateConfig({ interaction: interactionConfig });\n    \n    console.log('🧠 Updated interaction configuration');\n  }\n  \n  /**\n   * 📊 Update status display\n   */\n  private updateStatus(text: string) {\n    const statusElement = this.el.querySelector('span:last-child') as HTMLElement;\n    if (statusElement) {\n      statusElement.textContent = text;\n    }\n  }\n  \n  /**\n   * 📨 Handle custom messages from Python\n   */\n  handleCustomMessage(content: any) {\n    const { type } = content;\n    \n    switch (type) {\n      case 'set_layout':\n        // Layout changes would be handled by physics config updates\n        this.updatePhysicsConfig();\n        break;\n        \n      case 'focus_node':\n        if (this.vizCore && content.node_id) {\n          // Find node position and adjust camera\n          const pos = this.vizCore.nodePositions.get(content.node_id);\n          if (pos) {\n            const zoom = content.zoom || 2.0;\n            const centerX = this.vizCore.config.width / 2;\n            const centerY = this.vizCore.config.height / 2;\n            \n            // Calculate transform to center node\n            const translateX = centerX - pos.x * zoom;\n            const translateY = centerY - pos.y * zoom;\n            \n            this.vizCore.updateConfig({\n              camera: {\n                scale: zoom,\n                translate: { x: translateX, y: translateY }\n              }\n            });\n          }\n        }\n        break;\n        \n      case 'reset_camera':\n        if (this.vizCore) {\n          this.vizCore.updateConfig({\n            camera: {\n              scale: 1,\n              translate: { x: 0, y: 0 }\n            }\n          });\n        }\n        break;\n        \n      case 'export_state':\n        if (this.vizCore) {\n          const state = this.vizCore.exportState();\n          this.model.send({\n            type: 'state_exported',\n            state: state\n          });\n        }\n        break;\n        \n      default:\n        console.warn(`🧠 Unknown message type: ${type}`);\n    }\n  }\n  \n  /**\n   * 🧹 Cleanup when widget is destroyed\n   */\n  remove() {\n    if (this.vizCore) {\n      this.vizCore.destroy();\n      this.vizCore = null;\n    }\n    \n    super.remove();\n    console.log('🧠 Unified Jupyter widget destroyed');\n  }\n}","/**\n * 🎯 Unified Visualization Core - Exports\n * \n * Single entry point for all unified visualization components\n */\n\n// Named exports\nexport { GroggyVizCore } from './VizCore.js';\nexport { PhysicsEngine } from './PhysicsEngine.js';\nexport { SVGRenderer } from './SVGRenderer.js';\nexport { InteractionEngine } from './InteractionEngine.js';\n\n// Default exports (with different names to avoid conflicts)\nexport { default as GroggyVizCoreDefault } from './VizCore.js';\nexport { default as PhysicsEngineDefault } from './PhysicsEngine.js';\nexport { default as SVGRendererDefault } from './SVGRenderer.js';\nexport { default as InteractionEngineDefault } from './InteractionEngine.js';\n\nconsole.log('🎨 Unified Visualization Core loaded');","import { IJupyterWidgetRegistry, DOMWidgetModel, DOMWidgetView } from '@jupyter-widgets/base';\nimport { JupyterFrontEnd, JupyterFrontEndPlugin } from '@jupyterlab/application';\nimport { GroggyGraphModel, GroggyGraphView, MODULE_NAME, MODULE_VERSION } from './widget';\n\nfunction activate(app: JupyterFrontEnd, registry: IJupyterWidgetRegistry) {\n  console.log('[groggy-widgets] export shape fix - checking prototype chain');\n  console.log('types:', typeof GroggyGraphModel, typeof GroggyGraphView); // expect function,function\n  console.log('is Model subclass:', GroggyGraphModel.prototype instanceof DOMWidgetModel);\n  console.log('is View  subclass:', GroggyGraphView.prototype  instanceof DOMWidgetView);\n\n  registry.registerWidget({\n    name: MODULE_NAME,\n    version: MODULE_VERSION,\n    exports: { GroggyGraphModel, GroggyGraphView },\n  });\n  \n  console.log('✅ Export shape fix: registered actual GroggyGraphView');\n}\n\nconst plugin: JupyterFrontEndPlugin<void> = {\n  id: 'groggy-widgets:plugin',\n  requires: [IJupyterWidgetRegistry as any],\n  autoStart: true,\n  activate,\n};\n\nexport default plugin;"],"names":["module","exports","__WEBPACK_EXTERNAL_MODULE__55__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","MODULE_NAME","MODULE_VERSION","GroggyGraphModel","DOMWidgetModel","defaults","super","_model_name","_model_module","_model_module_version","_view_name","_view_module","_view_module_version","nodes","edges","title","model_name","model_module","model_module_version","GroggyGraphView","DOMWidgetView","nodePositions","Map","nodeVelocities","isDragging","draggedNode","dragOffset","x","y","animationId","simulation","alpha","alphaDecay","alphaMin","velocityDecay","forceStrength","linkDistance","linkStrength","chargeStrength","centerStrength","render","this","el","style","cssText","header","document","createElement","textContent","model","appendChild","graphContainer","renderGraph","on","onModelChange","container","innerHTML","length","svg","createElementNS","setAttribute","cursor","centerX","clientWidth","centerY","clientHeight","size","forEach","node","angle","Math","random","PI","radius","cos","sin","set","id","vx","vy","startForceSimulation","edgeElements","edge","sourcePos","source","targetPos","target","line","toString","push","pos","nodeGroup","circle","getNodeColor","group","filter","text","label","addDragBehavior","stats","startX","startY","onMouseDown","e","clientX","clientY","preventDefault","onMouseMove","deltaX","deltaY","currentPos","newX","newY","updateEdges","onMouseUp","addEventListener","touch","touches","nodeId","index","querySelector","velocities","i","forces","j","k","nodeA","nodeB","posA","posB","dx","dy","distance","sqrt","force","fx","fy","forceA","forceB","sourceForce","targetForce","position","velocity","max","min","view_name","view_module","view_module_version","PhysicsEngine","constructor","config","charge","damping","iterations","threshold","timeStep","isRunning","iteration","totalEnergy","console","log","updatePositions","positions","deltaTime","calculateRepulsionForces","calculateAttractionForces","integrateForces","calculateTotalEnergy","pause","energy","values","start","stop","updateConfig","newConfig","getState","reset","SVGRenderer","width","height","nodeRadius","edgeWidth","nodeColor","edgeColor","backgroundColor","enableLOD","lodThreshold","enableLabels","labelThreshold","element","nodesGroup","edgesGroup","labelsGroup","frameCount","lastRenderTime","renderTimes","attachToElement","createSVGStructure","border","renderData","startTime","performance","now","shouldUseLOD","shouldShowLabels","renderLOD","renderFull","renderTime","recordRenderTime","showLabels","renderEdges","renderNodes","renderLabels","renderEdgesLOD","renderNodesLOD","color","time","shift","getPerformanceStats","avg","reduce","a","b","averageRenderTime","toFixed","maxRenderTime","minRenderTime","fps","clear","exportSVG","XMLSerializer","serializeToString","InteractionEngine","enableDrag","enableZoom","enablePan","enableMultiTouch","dragThreshold","zoomSensitivity","panSensitivity","callbacks","state","isPanning","lastMousePos","dragStartPos","zoom","pan","listeners","entries","setupEventListeners","addListener","handleMouseDown","bind","handleMouseMove","handleMouseUp","handleWheel","handleTouchStart","handleTouchMove","handleTouchEnd","handleKeyDown","event","handler","has","rect","getBoundingClientRect","mousePos","left","top","getAttribute","edgeId","emit","pow","delta","deltaZoom","newZoom","center","mouseEvent","code","resetView","panStep","processFrame","data","callback","error","setState","newState","cleanup","handlers","removeEventListener","GroggyVizCore","physics","enabled","rendering","interaction","renderer","interactions","selectedNodes","Set","eventCallbacks","update","frameData","applyFrameData","getFrameData","fromEntries","timestamp","Date","attachToDOM","onNodeDrag","onNodeClick","onEdgeClick","animationLoop","requestAnimationFrame","setData","getConfig","exportState","Array","from","destroy","layout_algorithm","theme","physics_enabled","force_strength","link_distance","link_strength","charge_strength","center_strength","enable_drag","enable_zoom","enable_pan","enable_selection","enable_hover","selected_nodes","hovered_node","camera_position","scale","translate","is_dragging","node_color_scheme","background_color","enable_shadows","enable_animations","vizCore","status","initializeVizCore","setupModelListeners","updateData","nodeColorScheme","enableShadows","enableAnimations","enableSelection","enableHover","setupCoreEventHandlers","send","type","node_id","ctrlKey","metaKey","shiftKey","save_changes","updateStatus","camera","metadata","round","updateDimensions","updatePhysicsConfig","updateRenderingConfig","updateInteractionConfig","add","titleElement","physicsConfig","renderingConfig","background","interactionConfig","statusElement","handleCustomMessage","content","translateX","translateY","warn","remove","requires","IJupyterWidgetRegistry","autoStart","activate","app","registry","registerWidget","name","version"],"sourceRoot":""}