{"version":3,"file":"index.js","mappings":"qEAAAA,EAAOC,QAAUC,C,yECOV,MAAMC,EACT,WAAAC,CAAYC,EAAS,CAAC,GAClBC,KAAKD,OAAS,CACVE,QAAS,IACTC,SAAU,GACVC,QAAS,GACTC,WAAY,IACZC,UAAW,IACXC,SAAU,QACPP,GAGPC,KAAKO,WAAY,EACjBP,KAAKQ,UAAY,EACjBR,KAAKS,YAAc,EAEnBC,QAAQC,IAAI,+BAAgCX,KAAKD,OACrD,CAKA,eAAAa,CAAgBC,EAAOC,EAAOC,EAAWC,EAAYC,EAAY,MAC7D,IAAKjB,KAAKO,WAA8B,IAAjBM,EAAMK,OAAc,OAE3C,MAAMC,EAAS,IAAIC,IAGnBP,EAAMQ,QAAQC,IACVH,EAAOI,IAAID,EAAKE,GAAI,CAAEC,EAAG,EAAGC,EAAG,MAInC1B,KAAK2B,yBAAyBd,EAAOE,EAAWI,GAGhDnB,KAAK4B,0BAA0Bd,EAAOC,EAAWI,GAGjDnB,KAAK6B,gBAAgBhB,EAAOE,EAAWC,EAAYG,EAAQF,GAG3DjB,KAAKQ,YACLR,KAAKS,YAAcT,KAAK8B,qBAAqBd,GAGzChB,KAAKS,YAAcT,KAAKD,OAAOM,WAC/BL,KAAK+B,OAEb,CAMA,wBAAAJ,CAAyBd,EAAOE,EAAWI,GAEvC,IAAK,IAAIa,EAAI,EAAGA,EAAInB,EAAMK,OAAQc,IAC9B,IAAK,IAAIC,EAAID,EAAI,EAAGC,EAAIpB,EAAMK,OAAQe,IAAK,CACvC,MAAMC,EAAQrB,EAAMmB,GACdG,EAAQtB,EAAMoB,GAEdG,EAAOrB,EAAUsB,IAAIH,EAAMV,IAC3Bc,EAAOvB,EAAUsB,IAAIF,EAAMX,IAEjC,IAAKY,IAASE,EAAM,SAEpB,MAAMC,EAAKD,EAAKb,EAAIW,EAAKX,EACnBe,EAAKF,EAAKZ,EAAIU,EAAKV,EACnBxB,EAAWuC,KAAKC,KAAKH,EAAKA,EAAKC,EAAKA,IAAO,EAG3CG,EAAQ3C,KAAKD,OAAOE,QAAUC,EAAWA,GACzC0C,EAAKD,EAAQJ,EAAKrC,EAClB2C,EAAKF,EAAQH,EAAKtC,EAGlB4C,EAAS3B,EAAOkB,IAAIH,EAAMV,IAC1BuB,EAAS5B,EAAOkB,IAAIF,EAAMX,IAEhCsB,EAAOrB,GAAKmB,EACZE,EAAOpB,GAAKmB,EACZE,EAAOtB,GAAKmB,EACZG,EAAOrB,GAAKmB,CAChB,CAER,CAKA,yBAAAjB,CAA0Bd,EAAOC,EAAWI,GACxCL,EAAMO,QAAQ2B,IACV,MAAMC,EAAYlC,EAAUsB,IAAIW,EAAKE,QAC/BC,EAAYpC,EAAUsB,IAAIW,EAAKI,QAC/BC,EAAclC,EAAOkB,IAAIW,EAAKE,QAC9BI,EAAcnC,EAAOkB,IAAIW,EAAKI,QAEpC,KAAKH,GAAcE,GAAcE,GAAgBC,GAAa,OAE9D,MAAMf,EAAKY,EAAU1B,EAAIwB,EAAUxB,EAC7Be,EAAKW,EAAUzB,EAAIuB,EAAUvB,EAC7BxB,EAAWuC,KAAKC,KAAKH,EAAKA,EAAKC,EAAKA,IAAO,EAI3CG,EAAuB,IADRzC,EAAWF,KAAKD,OAAOG,UAGtC0C,EAAKD,EAAQJ,EAAKrC,EAClB2C,EAAKF,EAAQH,EAAKtC,EAGxBmD,EAAY5B,GAAKmB,EACjBS,EAAY3B,GAAKmB,EACjBS,EAAY7B,GAAKmB,EACjBU,EAAY5B,GAAKmB,GAEzB,CAKA,eAAAhB,CAAgBhB,EAAOE,EAAWC,EAAYG,EAAQF,GAClDJ,EAAMQ,QAAQC,IACV,MAAMiC,EAAWxC,EAAUsB,IAAIf,EAAKE,IAC9BgC,EAAWxC,EAAWqB,IAAIf,EAAKE,IAC/BmB,EAAQxB,EAAOkB,IAAIf,EAAKE,IAEzB+B,GAAaC,GAAab,IAG/Ba,EAAS/B,GAAKkB,EAAMlB,EAAIR,EACxBuC,EAAS9B,GAAKiB,EAAMjB,EAAIT,EAGxBuC,EAAS/B,GAAKzB,KAAKD,OAAOI,QAC1BqD,EAAS9B,GAAK1B,KAAKD,OAAOI,QAG1BoD,EAAS9B,GAAK+B,EAAS/B,EAAIR,EAC3BsC,EAAS7B,GAAK8B,EAAS9B,EAAIT,EAI3BsC,EAAS9B,EAAIgB,KAAKgB,IADH,GACehB,KAAKiB,IAAI,IAAcH,EAAS9B,IAC9D8B,EAAS7B,EAAIe,KAAKgB,IAFH,GAEehB,KAAKiB,IAAI,IAAcH,EAAS7B,MAEtE,CAKA,oBAAAI,CAAqBd,GACjB,IAAI2C,EAAS,EACb,IAAK,MAAMH,KAAYxC,EAAW4C,SAC9BD,GAAUH,EAAS/B,EAAI+B,EAAS/B,EAAI+B,EAAS9B,EAAI8B,EAAS9B,EAE9D,OAAOiC,CACX,CAKA,KAAAE,GACI7D,KAAKO,WAAY,EACjBP,KAAKQ,UAAY,EACjBE,QAAQC,IAAI,2BAChB,CAKA,IAAAmD,GACI9D,KAAKO,WAAY,EACjBG,QAAQC,IAAI,2BAChB,CAKA,KAAAoB,GACI/B,KAAKO,WAAY,EACjBG,QAAQC,IAAI,sCAChB,CAKA,YAAAoD,CAAaC,GACThE,KAAKD,OAAS,IAAKC,KAAKD,UAAWiE,GACnCtD,QAAQC,IAAI,mCAAoCX,KAAKD,OACzD,CAKA,QAAAkE,GACI,MAAO,CACH1D,UAAWP,KAAKO,UAChBC,UAAWR,KAAKQ,UAChBC,YAAaT,KAAKS,YAClBV,OAAQC,KAAKD,OAErB,CAKA,KAAAmE,GACIlE,KAAKQ,UAAY,EACjBR,KAAKS,YAAc,EACnBC,QAAQC,IAAI,yBAChB,ECpNG,MAAMwD,EACT,WAAArE,CAAYC,EAAS,CAAC,GAClBC,KAAKD,OAAS,CACVqE,MAAO,IACPC,OAAQ,IACRC,WAAY,EACZC,UAAW,EACXC,UAAW,UACXC,UAAW,OACXC,gBAAiB,UACjBC,WAAW,EACXC,aAAc,IACdC,cAAc,EACdC,eAAgB,OACb/E,GAGPC,KAAK+E,QAAU,KACf/E,KAAKgF,IAAM,KACXhF,KAAKiF,WAAa,KAClBjF,KAAKkF,WAAa,KAClBlF,KAAKmF,YAAc,KAGnBnF,KAAKoF,WAAa,EAClBpF,KAAKqF,eAAiB,EACtBrF,KAAKsF,YAAc,GAEnB5E,QAAQC,IAAI,8BAA+BX,KAAKD,OACpD,CAKA,eAAAwF,CAAgBR,GACZ/E,KAAK+E,QAAUA,EACf/E,KAAKwF,qBACL9E,QAAQC,IAAI,qCAChB,CAKA,kBAAA6E,GACSxF,KAAK+E,UAGV/E,KAAK+E,QAAQU,UAAY,GAGzBzF,KAAKgF,IAAMU,SAASC,gBAAgB,6BAA8B,OAClE3F,KAAKgF,IAAIY,aAAa,QAAS5F,KAAKD,OAAOqE,OAC3CpE,KAAKgF,IAAIY,aAAa,SAAU5F,KAAKD,OAAOsE,QAC5CrE,KAAKgF,IAAIa,MAAMnB,gBAAkB1E,KAAKD,OAAO2E,gBAC7C1E,KAAKgF,IAAIa,MAAMC,OAAS,iBAGxB9F,KAAKkF,WAAaQ,SAASC,gBAAgB,6BAA8B,KACzE3F,KAAKkF,WAAWU,aAAa,QAAS,SAEtC5F,KAAKiF,WAAaS,SAASC,gBAAgB,6BAA8B,KACzE3F,KAAKiF,WAAWW,aAAa,QAAS,SAEtC5F,KAAKmF,YAAcO,SAASC,gBAAgB,6BAA8B,KAC1E3F,KAAKmF,YAAYS,aAAa,QAAS,UAGvC5F,KAAKgF,IAAIe,YAAY/F,KAAKkF,YAC1BlF,KAAKgF,IAAIe,YAAY/F,KAAKiF,YAC1BjF,KAAKgF,IAAIe,YAAY/F,KAAKmF,aAG1BnF,KAAK+E,QAAQgB,YAAY/F,KAAKgF,KAClC,CAKA,MAAAgB,CAAOC,GACH,IAAKjG,KAAKgF,IAAK,OAEf,MAAMkB,EAAYC,YAAYC,OAExB,MAAEvF,EAAK,MAAEC,EAAK,UAAEC,EAAS,WAAEqE,GAAea,EAG1CI,EAAerG,KAAKD,OAAO4E,WAAa9D,EAAMK,OAASlB,KAAKD,OAAO6E,aACnE0B,EAAmBtG,KAAKD,OAAO8E,cAAgBhE,EAAMK,QAAUlB,KAAKD,OAAO+E,eAE7EuB,EACArG,KAAKuG,UAAU1F,EAAOC,EAAOC,GAE7Bf,KAAKwG,WAAW3F,EAAOC,EAAOC,EAAWuF,GAI7C,MAAMG,EAAaN,YAAYC,MAAQF,EACvClG,KAAK0G,iBAAiBD,GACtBzG,KAAKoF,WAAaA,GAAcpF,KAAKoF,WAAa,CACtD,CAKA,UAAAoB,CAAW3F,EAAOC,EAAOC,EAAW4F,GAAa,GAE7C3G,KAAK4G,YAAY9F,EAAOC,GAGxBf,KAAK6G,YAAYhG,EAAOE,GAGpB4F,EACA3G,KAAK8G,aAAajG,EAAOE,GAEzBf,KAAKmF,YAAYM,UAAY,EAErC,CAKA,SAAAc,CAAU1F,EAAOC,EAAOC,GAOpBf,KAAK+G,eAAejG,EAAOC,GAC3Bf,KAAKgH,eAAenG,EAAOE,GAC3Bf,KAAKmF,YAAYM,UAAY,EACjC,CAKA,WAAAmB,CAAY9F,EAAOC,GAEff,KAAKkF,WAAWO,UAAY,GAE5B3E,EAAMO,QAAQ2B,IACV,MAAMC,EAAYlC,EAAUsB,IAAMtB,EAAUsB,IAAIW,EAAKE,QAAUnC,EAAUiC,EAAKE,QACxEC,EAAYpC,EAAUsB,IAAMtB,EAAUsB,IAAIW,EAAKI,QAAUrC,EAAUiC,EAAKI,QAE9E,IAAKH,IAAcE,EAAW,OAE9B,MAAM8D,EAAOvB,SAASC,gBAAgB,6BAA8B,QACpEsB,EAAKrB,aAAa,KAAM3C,EAAUxB,GAClCwF,EAAKrB,aAAa,KAAM3C,EAAUvB,GAClCuF,EAAKrB,aAAa,KAAMzC,EAAU1B,GAClCwF,EAAKrB,aAAa,KAAMzC,EAAUzB,GAClCuF,EAAKrB,aAAa,SAAU5C,EAAKkE,OAASlH,KAAKD,OAAO0E,WACtDwC,EAAKrB,aAAa,eAAgB5C,EAAKoB,OAASpE,KAAKD,OAAOwE,WAC5D0C,EAAKrB,aAAa,UAAW,OAG7BqB,EAAKrB,aAAa,eAAgB5C,EAAKxB,IAEvCxB,KAAKkF,WAAWa,YAAYkB,IAEpC,CAKA,cAAAF,CAAejG,EAAOC,GAClBf,KAAKkF,WAAWO,UAAY,GAE5B3E,EAAMO,QAAQ2B,IACV,MAAMC,EAAYlC,EAAUsB,IAAMtB,EAAUsB,IAAIW,EAAKE,QAAUnC,EAAUiC,EAAKE,QACxEC,EAAYpC,EAAUsB,IAAMtB,EAAUsB,IAAIW,EAAKI,QAAUrC,EAAUiC,EAAKI,QAE9E,IAAKH,IAAcE,EAAW,OAE9B,MAAM8D,EAAOvB,SAASC,gBAAgB,6BAA8B,QACpEsB,EAAKrB,aAAa,KAAM3C,EAAUxB,GAClCwF,EAAKrB,aAAa,KAAM3C,EAAUvB,GAClCuF,EAAKrB,aAAa,KAAMzC,EAAU1B,GAClCwF,EAAKrB,aAAa,KAAMzC,EAAUzB,GAClCuF,EAAKrB,aAAa,SAAU5F,KAAKD,OAAO0E,WACxCwC,EAAKrB,aAAa,eAAgB,OAClCqB,EAAKrB,aAAa,UAAW,OAE7B5F,KAAKkF,WAAWa,YAAYkB,IAEpC,CAKA,WAAAJ,CAAYhG,EAAOE,GAEff,KAAKiF,WAAWQ,UAAY,GAE5B5E,EAAMQ,QAAQC,IACV,MAAMiC,EAAWxC,EAAUsB,IAAMtB,EAAUsB,IAAIf,EAAKE,IAAMT,EAAUO,EAAKE,IACzE,IAAK+B,EAAU,OAEf,MAAM4D,EAASzB,SAASC,gBAAgB,6BAA8B,UACtEwB,EAAOvB,aAAa,KAAMrC,EAAS9B,GACnC0F,EAAOvB,aAAa,KAAMrC,EAAS7B,GACnCyF,EAAOvB,aAAa,IAAKtE,EAAK8F,MAAQpH,KAAKD,OAAOuE,YAClD6C,EAAOvB,aAAa,OAAQtE,EAAK4F,OAASlH,KAAKD,OAAOyE,WACtD2C,EAAOvB,aAAa,SAAU,WAC9BuB,EAAOvB,aAAa,eAAgB,KACpCuB,EAAOvB,aAAa,UAAW,OAG/BuB,EAAOvB,aAAa,eAAgBtE,EAAKE,IAGzC2F,EAAOtB,MAAMwB,OAAS,UAEtBrH,KAAKiF,WAAWc,YAAYoB,IAEpC,CAKA,cAAAH,CAAenG,EAAOE,GAClBf,KAAKiF,WAAWQ,UAAY,GAE5B5E,EAAMQ,QAAQC,IACV,MAAMiC,EAAWxC,EAAUsB,IAAMtB,EAAUsB,IAAIf,EAAKE,IAAMT,EAAUO,EAAKE,IACzE,IAAK+B,EAAU,OAEf,MAAM4D,EAASzB,SAASC,gBAAgB,6BAA8B,UACtEwB,EAAOvB,aAAa,KAAMrC,EAAS9B,GACnC0F,EAAOvB,aAAa,KAAMrC,EAAS7B,GACnCyF,EAAOvB,aAAa,IAAK,KACzBuB,EAAOvB,aAAa,OAAQ5F,KAAKD,OAAOyE,WACxC2C,EAAOvB,aAAa,SAAU,QAC9BuB,EAAOvB,aAAa,UAAW,OAE/B5F,KAAKiF,WAAWc,YAAYoB,IAEpC,CAKA,YAAAL,CAAajG,EAAOE,GAChBf,KAAKmF,YAAYM,UAAY,GAE7B5E,EAAMQ,QAAQC,IACV,IAAKA,EAAKgG,MAAO,OAEjB,MAAM/D,EAAWxC,EAAUsB,IAAMtB,EAAUsB,IAAIf,EAAKE,IAAMT,EAAUO,EAAKE,IACzE,IAAK+B,EAAU,OAEf,MAAMgE,EAAO7B,SAASC,gBAAgB,6BAA8B,QACpE4B,EAAK3B,aAAa,IAAKrC,EAAS9B,GAChC8F,EAAK3B,aAAa,IAAKrC,EAAS7B,GAAKJ,EAAK8F,MAAQpH,KAAKD,OAAOuE,YAAc,GAC5EiD,EAAK3B,aAAa,cAAe,UACjC2B,EAAK3B,aAAa,cAAe,qBACjC2B,EAAK3B,aAAa,YAAa,MAC/B2B,EAAK3B,aAAa,OAAQ,QAC1B2B,EAAKC,YAAclG,EAAKgG,MAExBtH,KAAKmF,YAAYY,YAAYwB,IAErC,CAKA,gBAAAb,CAAiBe,GACbzH,KAAKsF,YAAYoC,KAAKD,GAClBzH,KAAKsF,YAAYpE,OAAS,IAC1BlB,KAAKsF,YAAYqC,QAErB3H,KAAKqF,eAAiBoC,CAC1B,CAKA,mBAAAG,GACI,GAAgC,IAA5B5H,KAAKsF,YAAYpE,OAAc,OAAO,KAE1C,MAAM2G,EAAM7H,KAAKsF,YAAYwC,OAAO,CAACC,EAAGC,IAAMD,EAAIC,EAAG,GAAKhI,KAAKsF,YAAYpE,OACrEuC,EAAMhB,KAAKgB,OAAOzD,KAAKsF,aACvB5B,EAAMjB,KAAKiB,OAAO1D,KAAKsF,aAE7B,MAAO,CACH2C,kBAAmBJ,EAAIK,QAAQ,GAC/BC,cAAe1E,EAAIyE,QAAQ,GAC3BE,cAAe1E,EAAIwE,QAAQ,GAC3B9C,WAAYpF,KAAKoF,WACjBiD,KAAM,IAAOR,GAAKK,QAAQ,GAElC,CAKA,YAAAnE,CAAaC,GACThE,KAAKD,OAAS,IAAKC,KAAKD,UAAWiE,GAG/BhE,KAAKgF,MAAQhB,EAAUI,OAASJ,EAAUK,UAC1CrE,KAAKgF,IAAIY,aAAa,QAAS5F,KAAKD,OAAOqE,OAC3CpE,KAAKgF,IAAIY,aAAa,SAAU5F,KAAKD,OAAOsE,SAGhD3D,QAAQC,IAAI,iCAAkCX,KAAKD,OACvD,CAKA,KAAAuI,GACQtI,KAAKiF,aAAYjF,KAAKiF,WAAWQ,UAAY,IAC7CzF,KAAKkF,aAAYlF,KAAKkF,WAAWO,UAAY,IAC7CzF,KAAKmF,cAAanF,KAAKmF,YAAYM,UAAY,GACvD,CAKA,SAAA8C,GACI,OAAKvI,KAAKgF,KAES,IAAIwD,eACLC,kBAAkBzI,KAAKgF,KAHnB,IAI1B,ECvUG,MAAM0D,EACT,WAAA5I,CAAYC,EAAS,CAAC,GAClBC,KAAKD,OAAS,CACV4I,YAAY,EACZC,YAAY,EACZC,WAAW,EACXC,kBAAkB,EAClBC,cAAe,EACfC,gBAAiB,GACjBC,eAAgB,KACblJ,GAGPC,KAAK+E,QAAU,KACf/E,KAAKkJ,UAAY,IAAI9H,IACrBpB,KAAKmJ,MAAQ,CACTC,YAAY,EACZC,WAAW,EACXC,YAAa,KACbC,aAAc,CAAE9H,EAAG,EAAGC,EAAG,GACzB8H,aAAc,CAAE/H,EAAG,EAAGC,EAAG,GACzB+H,KAAM,EACNC,IAAK,CAAEjI,EAAG,EAAGC,EAAG,IAIpB1B,KAAK2J,UAAY,IAAIvI,IAErBV,QAAQC,IAAI,qCAAsCX,KAAKD,OAC3D,CAKA,eAAAwF,CAAgBR,EAASmE,EAAY,CAAC,GAClClJ,KAAK+E,QAAUA,EACf/E,KAAKkJ,UAAY,IAAI9H,IAAIwI,OAAOC,QAAQX,IAExClJ,KAAK8J,sBAELpJ,QAAQC,IAAI,2CAChB,CAKA,mBAAAmJ,GACS9J,KAAK+E,UAGV/E,KAAK+J,YAAY,YAAa/J,KAAKgK,gBAAgBC,KAAKjK,OACxDA,KAAK+J,YAAY,YAAa/J,KAAKkK,gBAAgBD,KAAKjK,OACxDA,KAAK+J,YAAY,UAAW/J,KAAKmK,cAAcF,KAAKjK,OACpDA,KAAK+J,YAAY,QAAS/J,KAAKoK,YAAYH,KAAKjK,OAG5CA,KAAKD,OAAO+I,mBACZ9I,KAAK+J,YAAY,aAAc/J,KAAKqK,iBAAiBJ,KAAKjK,OAC1DA,KAAK+J,YAAY,YAAa/J,KAAKsK,gBAAgBL,KAAKjK,OACxDA,KAAK+J,YAAY,WAAY/J,KAAKuK,eAAeN,KAAKjK,QAI1DA,KAAK+J,YAAY,UAAW/J,KAAKwK,cAAcP,KAAKjK,OAGpDA,KAAK+J,YAAY,cAAgBU,GAAMA,EAAEC,kBAC7C,CAKA,WAAAX,CAAYY,EAAOC,GACf5K,KAAK+E,QAAQ8F,iBAAiBF,EAAOC,GAChC5K,KAAK2J,UAAUmB,IAAIH,IACpB3K,KAAK2J,UAAUpI,IAAIoJ,EAAO,IAE9B3K,KAAK2J,UAAUtH,IAAIsI,GAAOjD,KAAKkD,EACnC,CAKA,eAAAZ,CAAgBW,GACZA,EAAMD,iBAEN,MAAMK,EAAO/K,KAAK+E,QAAQiG,wBACpBC,EAAW,CACbxJ,EAAGkJ,EAAMO,QAAUH,EAAKI,KACxBzJ,EAAGiJ,EAAMS,QAAUL,EAAKM,KAG5BrL,KAAKmJ,MAAMI,aAAe0B,EAC1BjL,KAAKmJ,MAAMK,aAAe,IAAKyB,GAG/B,MAAM7H,EAASuH,EAAMvH,OACfkI,EAASlI,EAAOmI,aAAa,gBAC7BC,EAASpI,EAAOmI,aAAa,gBAE/BD,GAAUtL,KAAKD,OAAO4I,YACtB3I,KAAKmJ,MAAMG,YAAcgC,EACzBtL,KAAKmJ,MAAMC,YAAa,EACxBpJ,KAAKyL,KAAK,iBAAkB,CAAEH,SAAQ/H,SAAU0H,EAAUN,WACnDa,EACPxL,KAAKyL,KAAK,aAAc,CAAED,SAAQjI,SAAU0H,EAAUN,UAC/C3K,KAAKD,OAAO8I,YACnB7I,KAAKmJ,MAAME,WAAY,EAE/B,CAKA,eAAAa,CAAgBS,GACZA,EAAMD,iBAEN,MAAMK,EAAO/K,KAAK+E,QAAQiG,wBACpBC,EAAW,CACbxJ,EAAGkJ,EAAMO,QAAUH,EAAKI,KACxBzJ,EAAGiJ,EAAMS,QAAUL,EAAKM,KAGtBK,EAAST,EAASxJ,EAAIzB,KAAKmJ,MAAMI,aAAa9H,EAC9CkK,EAASV,EAASvJ,EAAI1B,KAAKmJ,MAAMI,aAAa7H,EAGpD,GAAI1B,KAAKmJ,MAAMG,YAAa,CACxB,MAAMpJ,EAAWuC,KAAKC,KAClBD,KAAKmJ,IAAIX,EAASxJ,EAAIzB,KAAKmJ,MAAMK,aAAa/H,EAAG,GACjDgB,KAAKmJ,IAAIX,EAASvJ,EAAI1B,KAAKmJ,MAAMK,aAAa9H,EAAG,KAGhD1B,KAAKmJ,MAAMC,YAAclJ,EAAWF,KAAKD,OAAOgJ,gBACjD/I,KAAKmJ,MAAMC,YAAa,EACxBpJ,KAAKyL,KAAK,aAAc,CAAEH,OAAQtL,KAAKmJ,MAAMG,YAAa/F,SAAU0H,KAGpEjL,KAAKmJ,MAAMC,YACXpJ,KAAKyL,KAAK,YAAa,CACnBH,OAAQtL,KAAKmJ,MAAMG,YACnB/F,SAAU0H,EACVY,MAAO,CAAEpK,EAAGiK,EAAQhK,EAAGiK,IAGnC,MAES3L,KAAKmJ,MAAME,WAAarJ,KAAKD,OAAO8I,YACzC7I,KAAKmJ,MAAMO,IAAIjI,GAAKiK,EAAS1L,KAAKD,OAAOkJ,eACzCjJ,KAAKmJ,MAAMO,IAAIhI,GAAKiK,EAAS3L,KAAKD,OAAOkJ,eAEzCjJ,KAAKyL,KAAK,MAAO,CACb/B,IAAK,IAAK1J,KAAKmJ,MAAMO,KACrBmC,MAAO,CAAEpK,EAAGiK,EAAQhK,EAAGiK,MAI/B3L,KAAKmJ,MAAMI,aAAe0B,CAC9B,CAKA,aAAAd,CAAcQ,GACVA,EAAMD,iBAEN,MAAMK,EAAO/K,KAAK+E,QAAQiG,wBACpBC,EAAW,CACbxJ,EAAGkJ,EAAMO,QAAUH,EAAKI,KACxBzJ,EAAGiJ,EAAMS,QAAUL,EAAKM,KAIxBrL,KAAKmJ,MAAMG,cACPtJ,KAAKmJ,MAAMC,WACXpJ,KAAKyL,KAAK,WAAY,CAClBH,OAAQtL,KAAKmJ,MAAMG,YACnB/F,SAAU0H,IAIdjL,KAAKyL,KAAK,aAAc,CACpBH,OAAQtL,KAAKmJ,MAAMG,YACnB/F,SAAU0H,EACVN,UAIR3K,KAAKmJ,MAAMG,YAAc,KACzBtJ,KAAKmJ,MAAMC,YAAa,GAIxBpJ,KAAKmJ,MAAME,YACXrJ,KAAKmJ,MAAME,WAAY,EACvBrJ,KAAKyL,KAAK,UAAW,CAAE/B,IAAK,IAAK1J,KAAKmJ,MAAMO,OAEpD,CAKA,WAAAU,CAAYO,GACR,IAAK3K,KAAKD,OAAO6I,WAAY,OAE7B+B,EAAMD,iBAEN,MAAMK,EAAO/K,KAAK+E,QAAQiG,wBACpBC,EAAW,CACbxJ,EAAGkJ,EAAMO,QAAUH,EAAKI,KACxBzJ,EAAGiJ,EAAMS,QAAUL,EAAKM,KAGtBS,GAAanB,EAAMgB,OAAS3L,KAAKD,OAAOiJ,gBAAkB,IAC1D+C,EAAUtJ,KAAKgB,IAAI,GAAKhB,KAAKiB,IAAI,EAAG1D,KAAKmJ,MAAMM,KAAOqC,IAExDC,IAAY/L,KAAKmJ,MAAMM,OACvBzJ,KAAKmJ,MAAMM,KAAOsC,EAElB/L,KAAKyL,KAAK,OAAQ,CACdhC,KAAMzJ,KAAKmJ,MAAMM,KACjBuC,OAAQf,EACRY,MAAOC,IAGnB,CAKA,gBAAAzB,CAAiBM,GAGb,GAFAA,EAAMD,iBAEuB,IAAzBC,EAAMsB,QAAQ/K,OAAc,CAE5B,MAAMgL,EAAQvB,EAAMsB,QAAQ,GACtBE,EAAa,CACfjB,QAASgB,EAAMhB,QACfE,QAASc,EAAMd,QACfhI,OAAQ8I,EAAM9I,OACdsH,eAAgB,QAEpB1K,KAAKgK,gBAAgBmC,EACzB,CAEJ,CAKA,eAAA7B,CAAgBK,GAGZ,GAFAA,EAAMD,iBAEuB,IAAzBC,EAAMsB,QAAQ/K,OAAc,CAE5B,MAAMgL,EAAQvB,EAAMsB,QAAQ,GACtBE,EAAa,CACfjB,QAASgB,EAAMhB,QACfE,QAASc,EAAMd,QACfV,eAAgB,QAEpB1K,KAAKkK,gBAAgBiC,EACzB,CAEJ,CAKA,cAAA5B,CAAeI,GACXA,EAAMD,iBAGN,MAAMyB,EAAa,CACfjB,QAASlL,KAAKmJ,MAAMI,aAAa9H,EACjC2J,QAASpL,KAAKmJ,MAAMI,aAAa7H,EACjCgJ,eAAgB,QAEpB1K,KAAKmK,cAAcgC,EACvB,CAKA,aAAA3B,CAAcG,GAQV,GANmB,UAAfA,EAAMyB,OACNzB,EAAMD,iBACN1K,KAAKqM,aAILrM,KAAKD,OAAO8I,UAAW,CACvB,MAAMyD,EAAU,GAChB,IAAIZ,EAAS,EAAGC,EAAS,EAEzB,OAAQhB,EAAMyB,MACV,IAAK,YACDV,GAAUY,EACV,MACJ,IAAK,aACDZ,EAASY,EACT,MACJ,IAAK,UACDX,GAAUW,EACV,MACJ,IAAK,YACDX,EAASW,GAIbZ,GAAUC,KACVhB,EAAMD,iBACN1K,KAAKmJ,MAAMO,IAAIjI,GAAKiK,EACpB1L,KAAKmJ,MAAMO,IAAIhI,GAAKiK,EAEpB3L,KAAKyL,KAAK,MAAO,CACb/B,IAAK,IAAK1J,KAAKmJ,MAAMO,KACrBmC,MAAO,CAAEpK,EAAGiK,EAAQhK,EAAGiK,KAGnC,CACJ,CAKA,SAAAU,GACIrM,KAAKmJ,MAAMM,KAAO,EAClBzJ,KAAKmJ,MAAMO,IAAM,CAAEjI,EAAG,EAAGC,EAAG,GAE5B1B,KAAKyL,KAAK,aAAc,CACpBhC,KAAMzJ,KAAKmJ,MAAMM,KACjBC,IAAK,IAAK1J,KAAKmJ,MAAMO,MAE7B,CAKA,YAAA6C,GAGA,CAKA,IAAAd,CAAKd,EAAO6B,GACR,MAAMC,EAAWzM,KAAKkJ,UAAU7G,IAAIsI,GACpC,GAAI8B,EACA,IACIA,EAASD,EACb,CAAE,MAAOE,GACLhM,QAAQgM,MAAM,qCAAqC/B,KAAU+B,EACjE,CAER,CAKA,YAAA3I,CAAaC,GACThE,KAAKD,OAAS,IAAKC,KAAKD,UAAWiE,GACnCtD,QAAQC,IAAI,uCAAwCX,KAAKD,OAC7D,CAKA,QAAAkE,GACI,MAAO,IAAKjE,KAAKmJ,MACrB,CAKA,QAAAwD,CAASC,GACL5M,KAAKmJ,MAAQ,IAAKnJ,KAAKmJ,SAAUyD,EACrC,CAKA,OAAAC,GACI,GAAK7M,KAAK+E,QAAV,CAEA,IAAK,MAAO4F,EAAOmC,KAAa9M,KAAK2J,UACjCmD,EAASzL,QAAQuJ,IACb5K,KAAK+E,QAAQgI,oBAAoBpC,EAAOC,KAIhD5K,KAAK2J,UAAUrB,QACf5H,QAAQC,IAAI,kCATa,CAU7B,ECpYG,MAAMqM,EACT,WAAAlN,CAAYe,EAAQ,GAAIC,EAAQ,GAAIf,EAAS,CAAC,GAE1CC,KAAKa,MAAQA,EACbb,KAAKc,MAAQA,EACbd,KAAKD,OAAS,CAEVqE,MAAO,IACPC,OAAQ,OACLtE,EAEHkN,QAAS,CACLC,SAAS,EACTjN,QAAS,IACTC,SAAU,GACVC,QAAS,GACTC,WAAY,OACTL,EAAOkN,SAEdE,UAAW,CACP/I,MAAOrE,EAAOqE,OAAS,IACvBC,OAAQtE,EAAOsE,QAAU,IACzBC,WAAY,EACZC,UAAW,KACRxE,EAAOoN,WAEdC,YAAa,CACTzE,YAAY,EACZC,YAAY,EACZC,WAAW,KACR9I,EAAOqN,cAKlBpN,KAAKiN,QAAU,IAAIpN,EAAcG,KAAKD,OAAOkN,SAC7CjN,KAAKqN,SAAW,IAAIlJ,EAAYnE,KAAKD,OAAOoN,WAC5CnN,KAAKsN,aAAe,IAAI5E,EAAkB1I,KAAKD,OAAOqN,aAGtDpN,KAAKe,UAAY,IAAIK,IACrBpB,KAAKgB,WAAa,IAAII,IACtBpB,KAAKO,WAAY,EACjBP,KAAKoF,WAAa,EAGlBpF,KAAKuN,cAAgB,IAAIC,IACzBxN,KAAKyN,cAAgBzN,KAAKe,UAG1Bf,KAAK0N,eAAiB,IAAItM,IAE1BV,QAAQC,IAAI,gCAAiC,CACzCE,MAAOb,KAAKa,MAAMK,OAClBJ,MAAOd,KAAKc,MAAMI,OAClBnB,OAAQC,KAAKD,QAErB,CAKA,MAAA4N,CAAOC,EAAY,MAkCf,OAjCIA,EAEA5N,KAAK6N,eAAeD,GAGpB5N,KAAKiN,QAAQrM,gBACTZ,KAAKa,MACLb,KAAKc,MACLd,KAAKe,UACLf,KAAKgB,WACL,EAAE,IAKVhB,KAAKqN,SAASrH,OAAO,CACjBnF,MAAOb,KAAKa,MACZC,MAAOd,KAAKc,MACZC,UAAWf,KAAKe,UAChBqE,WAAYpF,KAAKoF,eAIrBpF,KAAKsN,aAAaf,eAGlBvM,KAAKyL,KAAK,QAAS,CACf5K,MAAOb,KAAKa,MACZC,MAAOd,KAAKc,MACZC,UAAWf,KAAKe,UAChBqE,WAAYpF,KAAKoF,aAGdpF,KAAK8N,cAChB,CAKA,cAAAD,CAAeD,GACX,GAAIA,EAAU7M,UACV,IAAK,MAAOuK,EAAQ/H,KAAaqG,OAAOC,QAAQ+D,EAAU7M,WACtDf,KAAKe,UAAUQ,IAAI+J,EAAQ/H,GAI/BqK,EAAU/M,QACVb,KAAKa,MAAQ+M,EAAU/M,OAGvB+M,EAAU9M,QACVd,KAAKc,MAAQ8M,EAAU9M,MAE/B,CAKA,YAAAgN,GACI,MAAO,CACHjN,MAAOb,KAAKa,MACZC,MAAOd,KAAKc,MACZC,UAAW6I,OAAOmE,YAAY/N,KAAKe,WACnCC,WAAY4I,OAAOmE,YAAY/N,KAAKgB,YACpCoE,WAAYpF,KAAKoF,WACjB4I,UAAWC,KAAK7H,MAExB,CAKA,WAAA8H,CAAYnJ,EAASmE,EAAY,CAAC,GAC9BlJ,KAAK+E,QAAUA,EACf/E,KAAK0N,eAAiB,IAAItM,IAAIwI,OAAOC,QAAQX,IAG7ClJ,KAAKqN,SAAS9H,gBAAgBR,GAG9B/E,KAAKsN,aAAa/H,gBAAgBR,EAAS,CACvCoJ,WAAY,CAAC7C,EAAQ/H,KACjBvD,KAAKe,UAAUQ,IAAI+J,EAAQ/H,GAC3BvD,KAAKyL,KAAK,YAAa,CAAEH,SAAQ/H,cAErC6K,YAAc9C,IACVtL,KAAKyL,KAAK,aAAc,CAAEH,YAE9B+C,YAAc7C,IACVxL,KAAKyL,KAAK,aAAc,CAAED,cAIlC9K,QAAQC,IAAI,4CAA6CoE,EAC7D,CAKA,KAAAlB,GACI7D,KAAKO,WAAY,EACjBP,KAAKiN,QAAQpJ,QACb7D,KAAKsO,gBACL5N,QAAQC,IAAI,sCAChB,CAKA,IAAAmD,GACI9D,KAAKO,WAAY,EACjBP,KAAKiN,QAAQnJ,OACbpD,QAAQC,IAAI,sCAChB,CAKA,aAAA2N,GACStO,KAAKO,YAEVP,KAAK2N,SACLY,sBAAsB,IAAMvO,KAAKsO,iBACrC,CAKA,EAAAE,CAAG7D,EAAO8B,GACDzM,KAAK0N,eAAe5C,IAAIH,IACzB3K,KAAK0N,eAAenM,IAAIoJ,EAAO,IAEnC3K,KAAK0N,eAAerL,IAAIsI,GAAOjD,KAAK+E,EACxC,CAEA,IAAAhB,CAAKd,EAAO6B,GACJxM,KAAK0N,eAAe5C,IAAIH,IACxB3K,KAAK0N,eAAerL,IAAIsI,GAAOtJ,QAAQoL,IACnC,IACIA,EAASD,EACb,CAAE,MAAOE,GACLhM,QAAQgM,MAAM,+BAA+B/B,KAAU+B,EAC3D,GAGZ,CAKA,OAAA+B,CAAQ5N,EAAOC,GACXd,KAAKa,MAAQA,EACbb,KAAKc,MAAQA,EAGbd,KAAKe,UAAUuH,QACftI,KAAKgB,WAAWsH,QAChBtI,KAAKoF,WAAa,EAGlBpF,KAAKa,MAAMQ,QAAQ,CAACC,EAAMoN,KACtB,IAAK1O,KAAKe,UAAU+J,IAAIxJ,EAAKE,IAAK,CAE9B,MAAMmN,EAAiB,EAARD,EAAYjM,KAAKmM,GAAM5O,KAAKa,MAAMK,OAC3C2N,EAASpM,KAAKiB,IAAI1D,KAAKD,OAAOoN,UAAU/I,MAAOpE,KAAKD,OAAOoN,UAAU9I,QAAU,EACrFrE,KAAKe,UAAUQ,IAAID,EAAKE,GAAI,CACxBC,EAAGzB,KAAKD,OAAOoN,UAAU/I,MAAQ,EAAIyK,EAASpM,KAAKqM,IAAIH,GACvDjN,EAAG1B,KAAKD,OAAOoN,UAAU9I,OAAS,EAAIwK,EAASpM,KAAKsM,IAAIJ,IAEhE,CAEK3O,KAAKgB,WAAW8J,IAAIxJ,EAAKE,KAC1BxB,KAAKgB,WAAWO,IAAID,EAAKE,GAAI,CAAEC,EAAG,EAAGC,EAAG,MAIhD1B,KAAKyL,KAAK,eAAgB,CAAE5K,QAAOC,UACnCJ,QAAQC,IAAI,iCAAkC,CAAEE,MAAOA,EAAMK,OAAQJ,MAAOA,EAAMI,QACtF,CAKA,SAAA8N,GACI,MAAO,IAAKhP,KAAKD,OACrB,CAKA,YAAAgE,CAAaC,GACThE,KAAKD,OAAS,IACPC,KAAKD,UACLiE,EACHiJ,QAAS,IAAKjN,KAAKD,OAAOkN,WAAYjJ,EAAUiJ,SAChDE,UAAW,IAAKnN,KAAKD,OAAOoN,aAAcnJ,EAAUmJ,WACpDC,YAAa,IAAKpN,KAAKD,OAAOqN,eAAgBpJ,EAAUoJ,cAI5DpN,KAAKiN,QAAQlJ,aAAa/D,KAAKD,OAAOkN,SACtCjN,KAAKqN,SAAStJ,aAAa/D,KAAKD,OAAOoN,WACvCnN,KAAKsN,aAAavJ,aAAa/D,KAAKD,OAAOqN,aAE3CpN,KAAKyL,KAAK,iBAAkBzL,KAAKD,QACjCW,QAAQC,IAAI,mCAAoCX,KAAKD,OACzD,CAKA,WAAAkP,GACI,MAAO,CACHpO,MAAOb,KAAKa,MACZC,MAAOd,KAAKc,MACZC,UAAW6I,OAAOmE,YAAY/N,KAAKe,WACnCC,WAAY4I,OAAOmE,YAAY/N,KAAKgB,YACpCuM,cAAe2B,MAAMC,KAAKnP,KAAKuN,eAC/BxN,OAAQC,KAAKD,OACbqF,WAAYpF,KAAKoF,WACjB4I,UAAWC,KAAK7H,MAExB,CAKA,OAAAgJ,GACIpP,KAAK8D,OAGD9D,KAAKsN,cAAqD,mBAA9BtN,KAAKsN,aAAaT,SAC9C7M,KAAKsN,aAAaT,UAGlB7M,KAAKqN,UAA2C,mBAAxBrN,KAAKqN,SAAS/E,OACtCtI,KAAKqN,SAAS/E,QAIlBtI,KAAKe,UAAUuH,QACftI,KAAKgB,WAAWsH,QAChBtI,KAAKuN,cAAcjF,QACnBtI,KAAK0N,eAAepF,QAGpBtI,KAAK+E,QAAU,KACf/E,KAAKa,MAAQ,GACbb,KAAKc,MAAQ,GAEbJ,QAAQC,IAAI,6BAChB,EAGJ,MChUa0O,EAAc,iBACdC,EAAiB,QAEvB,MAAMC,UAAyB,EAAAC,eAKpC,QAAAC,GACE,OAAO,OAAP,wBACKC,MAAMD,YAAU,CACnBE,YAAa,mBACbC,cAAeP,EACfQ,sBAAuBP,EACvBQ,WAAY,kBACZC,aAAcV,EACdW,qBAAsBV,EAGtBzO,MAAO,GACPC,MAAO,GACPmP,MAAO,sBAGP7L,MAAO,IACPC,OAAQ,IACR6L,iBAAkB,iBAClBC,MAAO,QAGPC,iBAAiB,EACjBC,eAAgB,GAChBC,cAAe,GACfC,cAAe,GACfC,iBAAkB,IAClBC,gBAAiB,GAGjBC,aAAa,EACbC,aAAa,EACbC,YAAY,EACZC,kBAAkB,EAClBC,cAAc,EAGdC,eAAgB,GAChBC,aAAc,GACdC,gBAAiB,CAAEC,MAAO,EAAGC,UAAW,CAAE1P,EAAG,EAAGC,EAAG,IACnD0P,aAAa,EAGbC,kBAAmB,UACnBC,iBAAkB,UAClBC,gBAAgB,EAChBC,mBAAmB,GAEvB,EApDO,EAAAC,WAAa,mBACb,EAAAC,aAAerC,EACf,EAAAsC,qBAAuBrC,EAqDzB,MAAMsC,UAAwB,EAAAC,cAArC,c,oBAKU,KAAAC,QAAgC,KAChC,KAAAC,UAAgC,IA8Z1C,CA5ZE,MAAA/L,GACEtF,QAAQC,IAAI,2DAGZX,KAAKgS,GAAGnM,MAAMoM,QAAU,mQAaxB,MAAMC,EAASxM,SAASyM,cAAc,OACtCD,EAAOrM,MAAMoM,QAAU,4KASvB,MAAMhC,EAAQvK,SAASyM,cAAc,QACrClC,EAAMzI,YAAcxH,KAAKoS,MAAM/P,IAAI,UAAY,sBAC/C6P,EAAOnM,YAAYkK,GAEnB,MAAMoC,EAAS3M,SAASyM,cAAc,QACtCE,EAAOxM,MAAMoM,QAAU,mJAOvBI,EAAO7K,YAAc,2BACrB0K,EAAOnM,YAAYsM,GAEnBrS,KAAKgS,GAAGjM,YAAYmM,GAGpBlS,KAAK+R,UAAYrM,SAASyM,cAAc,OACxCnS,KAAK+R,UAAUlM,MAAMoM,QAAU,uCAEnBjS,KAAKoS,MAAM/P,IAAI,WAAa,4DAExBrC,KAAKoS,MAAM/P,IAAI,qBAAuB,kGAKtDrC,KAAKgS,GAAGjM,YAAY/F,KAAK+R,WAGzB/R,KAAKsS,oBAGLtS,KAAKuS,sBAGLvS,KAAKwS,YACP,CAKQ,iBAAAF,GACN,MAAMvS,EAAS,CACbqE,MAAOpE,KAAKoS,MAAM/P,IAAI,UAAY,IAClCgC,OAAQrE,KAAKoS,MAAM/P,IAAI,WAAa,IAEpC4K,QAAS,CACPC,SAA+C,IAAtClN,KAAKoS,MAAM/P,IAAI,mBACxBoQ,cAAezS,KAAKoS,MAAM/P,IAAI,mBAAqB,GACnDqQ,aAAc1S,KAAKoS,MAAM/P,IAAI,kBAAoB,GACjDsQ,aAAc3S,KAAKoS,MAAM/P,IAAI,kBAAoB,GACjDuQ,eAAgB5S,KAAKoS,MAAM/P,IAAI,qBAAuB,IACtDwQ,eAAgB7S,KAAKoS,MAAM/P,IAAI,oBAAsB,IAGvD8K,UAAW,CACTzI,gBAAiB1E,KAAKoS,MAAM/P,IAAI,qBAAuB,UACvDyQ,gBAAiB9S,KAAKoS,MAAM/P,IAAI,sBAAwB,UACxD0Q,eAAoD,IAArC/S,KAAKoS,MAAM/P,IAAI,kBAC9B2Q,kBAA0D,IAAxChT,KAAKoS,MAAM/P,IAAI,sBAGnC+K,YAAa,CACXzE,YAA8C,IAAlC3I,KAAKoS,MAAM/P,IAAI,eAC3BuG,YAA8C,IAAlC5I,KAAKoS,MAAM/P,IAAI,eAC3BwG,WAA4C,IAAjC7I,KAAKoS,MAAM/P,IAAI,cAC1B4Q,iBAAwD,IAAvCjT,KAAKoS,MAAM/P,IAAI,oBAChC6Q,aAAgD,IAAnClT,KAAKoS,MAAM/P,IAAI,kBAKhCrC,KAAK8R,QAAU,IAAI9E,EAAc,GAAI,GAAIjN,GAGzCC,KAAKmT,yBAGDnT,KAAK+R,WACP/R,KAAK8R,QAAQ5D,YAAYlO,KAAK+R,WAGhCrR,QAAQC,IAAI,kDACd,CAKQ,sBAAAwS,GACDnT,KAAK8R,UAGV9R,KAAK8R,QAAQtD,GAAG,YAAchC,I,UAC5BxM,KAAKoS,MAAMgB,KAAK,CACdC,KAAM,aACNC,QAAS9G,EAAKlB,OACdX,MAAO,CACL4I,SAAmB,QAAV,EAAA/G,EAAK7B,aAAK,eAAE4I,WAAW,EAChCC,SAAmB,QAAV,EAAAhH,EAAK7B,aAAK,eAAE6I,WAAW,EAChCC,UAAoB,QAAV,EAAAjH,EAAK7B,aAAK,eAAE8I,YAAY,OAKxCzT,KAAK8R,QAAQtD,GAAG,YAAchC,IAC5BxM,KAAKoS,MAAM7Q,IAAI,eAAgBiL,EAAKlB,QAAU,IAC9CtL,KAAKoS,MAAMsB,iBAGb1T,KAAK8R,QAAQtD,GAAG,mBAAqBhC,IACnCxM,KAAKoS,MAAM7Q,IAAI,iBAAkBiL,EAAKe,eAAiB,IACvDvN,KAAKoS,MAAMsB,iBAIb1T,KAAK8R,QAAQtD,GAAG,oBAAqB,KACnCxO,KAAK2T,aAAa,mCAGpB3T,KAAK8R,QAAQtD,GAAG,oBAAqB,KACnCxO,KAAK2T,aAAa,gCAGpB3T,KAAK8R,QAAQtD,GAAG,OAAShC,IACvB,MAAMoH,EAAS5T,KAAKoS,MAAM/P,IAAI,mBAC9BuR,EAAO1C,MAAQ1E,EAAK0E,MACpBlR,KAAKoS,MAAM7Q,IAAI,kBAAmBqS,GAClC5T,KAAKoS,MAAMsB,iBAGb1T,KAAK8R,QAAQtD,GAAG,MAAQhC,IACtB,MAAMoH,EAAS5T,KAAKoS,MAAM/P,IAAI,mBAC9BuR,EAAOzC,UAAU1P,GAAK+K,EAAKX,MAAMpK,EACjCmS,EAAOzC,UAAUzP,GAAK8K,EAAKX,MAAMnK,EACjC1B,KAAKoS,MAAM7Q,IAAI,kBAAmBqS,GAClC5T,KAAKoS,MAAMsB,iBAIb1T,KAAK8R,QAAQtD,GAAG,WAAahC,IACvBA,EAAKpD,aACPpJ,KAAKoS,MAAM7Q,IAAI,eAAe,GAC9BvB,KAAKoS,MAAMsB,kBAIf1T,KAAK8R,QAAQtD,GAAG,cAAe,KAC7BxO,KAAKoS,MAAM7Q,IAAI,eAAe,GAC9BvB,KAAKoS,MAAMsB,iBAIb1T,KAAK8R,QAAQtD,GAAG,SAAWhC,IACrBA,EAAKqH,SAASzO,WAAa,IAAO,GACpCpF,KAAK2T,aAAa,QAAQlR,KAAKqR,MAAMtH,EAAKqH,SAASxL,iBAAiBmE,EAAK3L,MAAMK,YAGrF,CAKQ,mBAAAqR,GAENvS,KAAKoS,MAAM5D,GAAG,4BAA6B,KACzCxO,KAAKwS,eAIPxS,KAAKoS,MAAM5D,GAAG,6BAA8B,KAC1CxO,KAAK+T,qBAGP/T,KAAKoS,MAAM5D,GAAG,uIAAwI,KACpJxO,KAAKgU,wBAGPhU,KAAKoS,MAAM5D,GAAG,kGAAmG,KAC/GxO,KAAKiU,0BAGPjU,KAAKoS,MAAM5D,GAAG,sGAAuG,KACnHxO,KAAKkU,4BAIPlU,KAAKoS,MAAM5D,GAAG,wBAAyB,KACrC,GAAIxO,KAAK8R,QAAS,CAChB,MAAMvE,EAAgBvN,KAAKoS,MAAM/P,IAAI,mBAAqB,GAE1DrC,KAAK8R,QAAQvE,cAAcjF,QAC3BiF,EAAclM,QAASiK,IACrBtL,KAAK8R,QAASvE,cAAc4G,IAAI7I,KAElCtL,KAAK8R,QAAQnE,Q,IAKjB3N,KAAKoS,MAAM5D,GAAG,eAAgB,KAC5B,MAAM4F,EAAepU,KAAKgS,GAAGqC,cAAc,QACvCD,IACFA,EAAa5M,YAAcxH,KAAKoS,MAAM/P,IAAI,UAAY,wBAG5D,CAKQ,UAAAmQ,GACN,IAAKxS,KAAK8R,QAAS,OAEnB,MAAMjR,EAAQb,KAAKoS,MAAM/P,IAAI,UAAY,GACnCvB,EAAQd,KAAKoS,MAAM/P,IAAI,UAAY,GAEzCrC,KAAK8R,QAAQrD,QAAQ5N,EAAOC,GAE5BJ,QAAQC,IAAI,oBAAoBE,EAAMK,iBAAiBJ,EAAMI,eAC/D,CAKQ,gBAAA6S,GACN,IAAK/T,KAAK8R,UAAY9R,KAAK+R,UAAW,OAEtC,MAAM3N,EAAQpE,KAAKoS,MAAM/P,IAAI,UAAY,IACnCgC,EAASrE,KAAKoS,MAAM/P,IAAI,WAAa,IAE3CrC,KAAK+R,UAAUlM,MAAMxB,OAAS,GAAGA,MAEjCrE,KAAK8R,QAAQ/N,aAAa,CACxBK,QACAC,WAGF3D,QAAQC,IAAI,0BAA0ByD,KAASC,IACjD,CAKQ,mBAAA2P,GACN,IAAKhU,KAAK8R,QAAS,OAEnB,MAAMwC,EAAgB,CACpBpH,SAA+C,IAAtClN,KAAKoS,MAAM/P,IAAI,mBACxBoQ,cAAezS,KAAKoS,MAAM/P,IAAI,mBAAqB,GACnDqQ,aAAc1S,KAAKoS,MAAM/P,IAAI,kBAAoB,GACjDsQ,aAAc3S,KAAKoS,MAAM/P,IAAI,kBAAoB,GACjDuQ,eAAgB5S,KAAKoS,MAAM/P,IAAI,qBAAuB,IACtDwQ,eAAgB7S,KAAKoS,MAAM/P,IAAI,oBAAsB,IAGvDrC,KAAK8R,QAAQ/N,aAAa,CAAEkJ,QAASqH,IAErC5T,QAAQC,IAAI,mCACd,CAKQ,qBAAAsT,GACN,IAAKjU,KAAK8R,UAAY9R,KAAK+R,UAAW,OAEtC,MAAMwC,EAAkB,CACtB7P,gBAAiB1E,KAAKoS,MAAM/P,IAAI,qBAAuB,UACvDyQ,gBAAiB9S,KAAKoS,MAAM/P,IAAI,sBAAwB,UACxD0Q,eAAoD,IAArC/S,KAAKoS,MAAM/P,IAAI,kBAC9B2Q,kBAA0D,IAAxChT,KAAKoS,MAAM/P,IAAI,sBAGnCrC,KAAK8R,QAAQ/N,aAAa,CAAEoJ,UAAWoH,IAGvCvU,KAAK+R,UAAUlM,MAAM2O,WAAaD,EAAgB7P,gBAElDhE,QAAQC,IAAI,qCACd,CAKQ,uBAAAuT,GACN,IAAKlU,KAAK8R,QAAS,OAEnB,MAAM2C,EAAoB,CACxB9L,YAA8C,IAAlC3I,KAAKoS,MAAM/P,IAAI,eAC3BuG,YAA8C,IAAlC5I,KAAKoS,MAAM/P,IAAI,eAC3BwG,WAA4C,IAAjC7I,KAAKoS,MAAM/P,IAAI,cAC1B4Q,iBAAwD,IAAvCjT,KAAKoS,MAAM/P,IAAI,oBAChC6Q,aAAgD,IAAnClT,KAAKoS,MAAM/P,IAAI,iBAG9BrC,KAAK8R,QAAQ/N,aAAa,CAAEqJ,YAAaqH,IAEzC/T,QAAQC,IAAI,uCACd,CAKQ,YAAAgT,CAAapM,GACnB,MAAMmN,EAAgB1U,KAAKgS,GAAGqC,cAAc,mBACxCK,IACFA,EAAclN,YAAcD,EAEhC,CAKA,mBAAAoN,CAAoBC,GAClB,MAAM,KAAEvB,GAASuB,EAEjB,OAAQvB,GACN,IAAK,aAEHrT,KAAKgU,sBACL,MAEF,IAAK,aACH,GAAIhU,KAAK8R,SAAW8C,EAAQtB,QAAS,CAEnC,MAAMuB,EAAM7U,KAAK8R,QAAQrE,cAAcpL,IAAIuS,EAAQtB,SACnD,GAAIuB,EAAK,CACP,MAAMpL,EAAOmL,EAAQnL,MAAQ,EACvBqL,EAAU9U,KAAK8R,QAAQ/R,OAAOqE,MAAQ,EACtC2Q,EAAU/U,KAAK8R,QAAQ/R,OAAOsE,OAAS,EAGvC2Q,EAAaF,EAAUD,EAAIpT,EAAIgI,EAC/BwL,EAAaF,EAAUF,EAAInT,EAAI+H,EAErCzJ,KAAK8R,QAAQ/N,aAAa,CACxB6P,OAAQ,CACN1C,MAAOzH,EACP0H,UAAW,CAAE1P,EAAGuT,EAAYtT,EAAGuT,K,EAKvC,MAEF,IAAK,eACCjV,KAAK8R,SACP9R,KAAK8R,QAAQ/N,aAAa,CACxB6P,OAAQ,CACN1C,MAAO,EACPC,UAAW,CAAE1P,EAAG,EAAGC,EAAG,MAI5B,MAEF,IAAK,eACH,GAAI1B,KAAK8R,QAAS,CAChB,MAAM3I,EAAQnJ,KAAK8R,QAAQ7C,cAC3BjP,KAAKoS,MAAMgB,KAAK,CACdC,KAAM,iBACNlK,MAAOA,G,CAGX,MAEF,QACEzI,QAAQwU,KAAK,4BAA4B7B,KAE/C,CAKA,MAAA8B,GACMnV,KAAK8R,UACP9R,KAAK8R,QAAQ1C,UACbpP,KAAK8R,QAAU,MAGjBpC,MAAMyF,SACNzU,QAAQC,IAAI,sCACd,ECzdK,SAASyU,IAEI,EAAQ,IAEhBC,eAAe,CACnB5D,WAAY,mBACZC,aAAc,gBACdC,qBAAsB,QACtB2D,UAAW,kBACXC,YAAa,gBACbC,oBAAqB,QACrBpD,MAAO7C,EACPkG,KAAM7D,IAGVlR,QAAQC,IAAI,gEAChB,CAGC,IAAS+U,EAAWC,EDoCZ,EAAAL,UAAY,kBACZ,EAAAC,YAAclG,EACd,EAAAmG,oBAAsBlG,E,WCtCrBoG,EAWQ,oBAATE,KAAuBA,UAAO,EAXlBD,EAWwB,SAASE,GAElD,MAAO,CACHT,yBACA7F,iBAAgB,EAChBqC,gBAAe,EAGvB,EAlB0B,mBAAXkE,QAAyB,OAEhCA,OAAO,CAAC,yBAA0BH,GACGjW,EAAOC,QAE5CD,EAAOC,QAAUgW,EAAQ,EAAQ,KAGjCD,EAAKK,aAAeJ,EAAQD,EAAKG,Q,GC3CrCG,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaxW,QAGrB,IAAID,EAASsW,EAAyBE,GAAY,CACjD1U,GAAI0U,EACJG,QAAQ,EACR1W,QAAS,CAAC,GAUX,OANA2W,EAAoBJ,GAAUxW,EAAQA,EAAOC,QAASsW,GAGtDvW,EAAO2W,QAAS,EAGT3W,EAAOC,OACf,C,OCzBAsW,EAAoBM,KAAO,CAAC,ECC5BN,EAAoBO,EAAI,CAAC7W,EAAS8W,KACjC,IAAI,IAAIC,KAAOD,EACXR,EAAoBU,EAAEF,EAAYC,KAAST,EAAoBU,EAAEhX,EAAS+W,IAC5E9M,OAAOgN,eAAejX,EAAS+W,EAAK,CAAEG,YAAY,EAAMxU,IAAKoU,EAAWC,MCJ3ET,EAAoBa,IAAOpX,KAC1BA,EAASkK,OAAOmN,OAAOrX,IACXsX,WAAUtX,EAAOsX,SAAW,IACxCpN,OAAOgN,eAAelX,EAAQ,UAAW,CACxCmX,YAAY,EACZtV,IAAK,KACJ,MAAM,IAAI0V,MAAM,0FAA4FvX,EAAO8B,OAG9G9B,GCTRuW,EAAoBU,EAAI,CAACO,EAAKC,IAAUvN,OAAOwN,UAAUC,eAAeC,KAAKJ,EAAKC,GCClFlB,EAAoBsB,EAAK5X,IACH,oBAAX6X,QAA0BA,OAAOC,aAC1C7N,OAAOgN,eAAejX,EAAS6X,OAAOC,YAAa,CAAEC,MAAO,WAE7D9N,OAAOgN,eAAejX,EAAS,aAAc,CAAE+X,OAAO,KCF7BzB,EAAoB,I","sources":["webpack://groggy-widgets/external amd \"@jupyter-widgets/base\"","webpack://groggy-widgets/./src/core/PhysicsEngine.js","webpack://groggy-widgets/./src/core/SVGRenderer.js","webpack://groggy-widgets/./src/core/InteractionEngine.js","webpack://groggy-widgets/./src/core/VizCore.js","webpack://groggy-widgets/./src/widget_unified.ts","webpack://groggy-widgets/./src/extension.ts","webpack://groggy-widgets/webpack/bootstrap","webpack://groggy-widgets/webpack/runtime/amd options","webpack://groggy-widgets/webpack/runtime/define property getters","webpack://groggy-widgets/webpack/runtime/harmony module decorator","webpack://groggy-widgets/webpack/runtime/hasOwnProperty shorthand","webpack://groggy-widgets/webpack/runtime/make namespace object","webpack://groggy-widgets/webpack/startup"],"sourcesContent":["module.exports = __WEBPACK_EXTERNAL_MODULE__55__;","/**\n * 🌟 Unified Physics Engine\n * \n * Handles force-directed layout with Barnes-Hut optimization\n * Used consistently across all visualization environments\n */\n\nexport class PhysicsEngine {\n    constructor(config = {}) {\n        this.config = {\n            charge: -300,        // Repulsion force\n            distance: 50,        // Ideal edge length\n            damping: 0.9,        // Velocity damping\n            iterations: 100,     // Max iterations per frame\n            threshold: 0.01,     // Convergence threshold\n            timeStep: 0.016,     // 60 FPS\n            ...config\n        };\n        \n        this.isRunning = false;\n        this.iteration = 0;\n        this.totalEnergy = 0;\n        \n        console.log('⚡ PhysicsEngine initialized:', this.config);\n    }\n    \n    /**\n     * 🎯 Main physics update method - used by all environments\n     */\n    updatePositions(nodes, edges, positions, velocities, deltaTime = 0.016) {\n        if (!this.isRunning || nodes.length === 0) return;\n        \n        const forces = new Map();\n        \n        // Initialize forces\n        nodes.forEach(node => {\n            forces.set(node.id, { x: 0, y: 0 });\n        });\n        \n        // Calculate repulsion forces (Barnes-Hut for O(n log n))\n        this.calculateRepulsionForces(nodes, positions, forces);\n        \n        // Calculate attraction forces from edges\n        this.calculateAttractionForces(edges, positions, forces);\n        \n        // Apply forces using Verlet integration\n        this.integrateForces(nodes, positions, velocities, forces, deltaTime);\n        \n        // Update iteration count and energy\n        this.iteration++;\n        this.totalEnergy = this.calculateTotalEnergy(velocities);\n        \n        // Check for convergence\n        if (this.totalEnergy < this.config.threshold) {\n            this.pause();\n        }\n    }\n    \n    /**\n     * Calculate repulsion forces between all nodes\n     * Using Barnes-Hut approximation for better performance\n     */\n    calculateRepulsionForces(nodes, positions, forces) {\n        // Simplified O(n²) for now - can be optimized to Barnes-Hut later\n        for (let i = 0; i < nodes.length; i++) {\n            for (let j = i + 1; j < nodes.length; j++) {\n                const nodeA = nodes[i];\n                const nodeB = nodes[j];\n                \n                const posA = positions.get(nodeA.id);\n                const posB = positions.get(nodeB.id);\n                \n                if (!posA || !posB) continue;\n                \n                const dx = posB.x - posA.x;\n                const dy = posB.y - posA.y;\n                const distance = Math.sqrt(dx * dx + dy * dy) || 1;\n                \n                // Coulomb's law: F = k * q1 * q2 / r²\n                const force = this.config.charge / (distance * distance);\n                const fx = force * dx / distance;\n                const fy = force * dy / distance;\n                \n                // Apply equal and opposite forces\n                const forceA = forces.get(nodeA.id);\n                const forceB = forces.get(nodeB.id);\n                \n                forceA.x -= fx;\n                forceA.y -= fy;\n                forceB.x += fx;\n                forceB.y += fy;\n            }\n        }\n    }\n    \n    /**\n     * Calculate attraction forces from edges (springs)\n     */\n    calculateAttractionForces(edges, positions, forces) {\n        edges.forEach(edge => {\n            const sourcePos = positions.get(edge.source);\n            const targetPos = positions.get(edge.target);\n            const sourceForce = forces.get(edge.source);\n            const targetForce = forces.get(edge.target);\n            \n            if (!sourcePos || !targetPos || !sourceForce || !targetForce) return;\n            \n            const dx = targetPos.x - sourcePos.x;\n            const dy = targetPos.y - sourcePos.y;\n            const distance = Math.sqrt(dx * dx + dy * dy) || 1;\n            \n            // Hooke's law: F = k * (distance - restLength)\n            const displacement = distance - this.config.distance;\n            const force = displacement * 0.1; // Spring constant\n            \n            const fx = force * dx / distance;\n            const fy = force * dy / distance;\n            \n            // Apply forces\n            sourceForce.x += fx;\n            sourceForce.y += fy;\n            targetForce.x -= fx;\n            targetForce.y -= fy;\n        });\n    }\n    \n    /**\n     * Integrate forces using Verlet integration\n     */\n    integrateForces(nodes, positions, velocities, forces, deltaTime) {\n        nodes.forEach(node => {\n            const position = positions.get(node.id);\n            const velocity = velocities.get(node.id);\n            const force = forces.get(node.id);\n            \n            if (!position || !velocity || !force) return;\n            \n            // Update velocity: v = v + a * dt\n            velocity.x += force.x * deltaTime;\n            velocity.y += force.y * deltaTime;\n            \n            // Apply damping\n            velocity.x *= this.config.damping;\n            velocity.y *= this.config.damping;\n            \n            // Update position: p = p + v * dt\n            position.x += velocity.x * deltaTime;\n            position.y += velocity.y * deltaTime;\n            \n            // Keep nodes within bounds (optional)\n            const margin = 50;\n            position.x = Math.max(margin, Math.min(800 - margin, position.x));\n            position.y = Math.max(margin, Math.min(600 - margin, position.y));\n        });\n    }\n    \n    /**\n     * Calculate total kinetic energy for convergence detection\n     */\n    calculateTotalEnergy(velocities) {\n        let energy = 0;\n        for (const velocity of velocities.values()) {\n            energy += velocity.x * velocity.x + velocity.y * velocity.y;\n        }\n        return energy;\n    }\n    \n    /**\n     * Start physics simulation\n     */\n    start() {\n        this.isRunning = true;\n        this.iteration = 0;\n        console.log('▶️ PhysicsEngine started');\n    }\n    \n    /**\n     * Stop physics simulation\n     */\n    stop() {\n        this.isRunning = false;\n        console.log('⏹️ PhysicsEngine stopped');\n    }\n    \n    /**\n     * Pause physics (can be resumed)\n     */\n    pause() {\n        this.isRunning = false;\n        console.log('⏸️ PhysicsEngine paused (converged)');\n    }\n    \n    /**\n     * Update configuration\n     */\n    updateConfig(newConfig) {\n        this.config = { ...this.config, ...newConfig };\n        console.log('⚙️ PhysicsEngine config updated:', this.config);\n    }\n    \n    /**\n     * Get current state\n     */\n    getState() {\n        return {\n            isRunning: this.isRunning,\n            iteration: this.iteration,\n            totalEnergy: this.totalEnergy,\n            config: this.config\n        };\n    }\n    \n    /**\n     * Reset simulation state\n     */\n    reset() {\n        this.iteration = 0;\n        this.totalEnergy = 0;\n        console.log('🔄 PhysicsEngine reset');\n    }\n}\n\nexport default PhysicsEngine;","/**\n * 🎨 Unified SVG Renderer\n * \n * Efficient SVG rendering with Level-of-Detail (LOD) optimization\n * Consistent rendering pipeline across all visualization environments\n */\n\nexport class SVGRenderer {\n    constructor(config = {}) {\n        this.config = {\n            width: 800,\n            height: 600,\n            nodeRadius: 8,\n            edgeWidth: 1,\n            nodeColor: '#007bff',\n            edgeColor: '#999',\n            backgroundColor: '#ffffff',\n            enableLOD: true,        // Level-of-detail rendering\n            lodThreshold: 1000,     // Switch to LOD when > 1000 nodes\n            enableLabels: true,\n            labelThreshold: 100,    // Hide labels when > 100 nodes\n            ...config\n        };\n        \n        this.element = null;\n        this.svg = null;\n        this.nodesGroup = null;\n        this.edgesGroup = null;\n        this.labelsGroup = null;\n        \n        // Performance tracking\n        this.frameCount = 0;\n        this.lastRenderTime = 0;\n        this.renderTimes = [];\n        \n        console.log('🎨 SVGRenderer initialized:', this.config);\n    }\n    \n    /**\n     * Attach renderer to DOM element\n     */\n    attachToElement(element) {\n        this.element = element;\n        this.createSVGStructure();\n        console.log('🔗 SVGRenderer attached to element');\n    }\n    \n    /**\n     * Create SVG structure\n     */\n    createSVGStructure() {\n        if (!this.element) return;\n        \n        // Clear existing content\n        this.element.innerHTML = '';\n        \n        // Create SVG\n        this.svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n        this.svg.setAttribute('width', this.config.width);\n        this.svg.setAttribute('height', this.config.height);\n        this.svg.style.backgroundColor = this.config.backgroundColor;\n        this.svg.style.border = '1px solid #ddd';\n        \n        // Create groups for layered rendering (edges behind nodes)\n        this.edgesGroup = document.createElementNS('http://www.w3.org/2000/svg', 'g');\n        this.edgesGroup.setAttribute('class', 'edges');\n        \n        this.nodesGroup = document.createElementNS('http://www.w3.org/2000/svg', 'g');\n        this.nodesGroup.setAttribute('class', 'nodes');\n        \n        this.labelsGroup = document.createElementNS('http://www.w3.org/2000/svg', 'g');\n        this.labelsGroup.setAttribute('class', 'labels');\n        \n        // Add groups to SVG in correct order\n        this.svg.appendChild(this.edgesGroup);\n        this.svg.appendChild(this.nodesGroup);\n        this.svg.appendChild(this.labelsGroup);\n        \n        // Add to DOM\n        this.element.appendChild(this.svg);\n    }\n    \n    /**\n     * 🎯 Main render method - used by all environments\n     */\n    render(renderData) {\n        if (!this.svg) return;\n        \n        const startTime = performance.now();\n        \n        const { nodes, edges, positions, frameCount } = renderData;\n        \n        // Choose rendering strategy based on data size\n        const shouldUseLOD = this.config.enableLOD && nodes.length > this.config.lodThreshold;\n        const shouldShowLabels = this.config.enableLabels && nodes.length <= this.config.labelThreshold;\n        \n        if (shouldUseLOD) {\n            this.renderLOD(nodes, edges, positions);\n        } else {\n            this.renderFull(nodes, edges, positions, shouldShowLabels);\n        }\n        \n        // Performance tracking\n        const renderTime = performance.now() - startTime;\n        this.recordRenderTime(renderTime);\n        this.frameCount = frameCount || this.frameCount + 1;\n    }\n    \n    /**\n     * Full quality rendering\n     */\n    renderFull(nodes, edges, positions, showLabels = true) {\n        // Render edges first (behind nodes)\n        this.renderEdges(edges, positions);\n        \n        // Render nodes\n        this.renderNodes(nodes, positions);\n        \n        // Render labels if enabled\n        if (showLabels) {\n            this.renderLabels(nodes, positions);\n        } else {\n            this.labelsGroup.innerHTML = '';\n        }\n    }\n    \n    /**\n     * Level-of-detail rendering for large graphs\n     */\n    renderLOD(nodes, edges, positions) {\n        // Simplified rendering for performance\n        // - Smaller nodes\n        // - No labels\n        // - Thinner edges\n        // - Possible node clustering\n        \n        this.renderEdgesLOD(edges, positions);\n        this.renderNodesLOD(nodes, positions);\n        this.labelsGroup.innerHTML = '';\n    }\n    \n    /**\n     * Render edges\n     */\n    renderEdges(edges, positions) {\n        // Clear existing edges\n        this.edgesGroup.innerHTML = '';\n        \n        edges.forEach(edge => {\n            const sourcePos = positions.get ? positions.get(edge.source) : positions[edge.source];\n            const targetPos = positions.get ? positions.get(edge.target) : positions[edge.target];\n            \n            if (!sourcePos || !targetPos) return;\n            \n            const line = document.createElementNS('http://www.w3.org/2000/svg', 'line');\n            line.setAttribute('x1', sourcePos.x);\n            line.setAttribute('y1', sourcePos.y);\n            line.setAttribute('x2', targetPos.x);\n            line.setAttribute('y2', targetPos.y);\n            line.setAttribute('stroke', edge.color || this.config.edgeColor);\n            line.setAttribute('stroke-width', edge.width || this.config.edgeWidth);\n            line.setAttribute('opacity', '0.8');\n            \n            // Add edge ID for interaction\n            line.setAttribute('data-edge-id', edge.id);\n            \n            this.edgesGroup.appendChild(line);\n        });\n    }\n    \n    /**\n     * Render edges (LOD version)\n     */\n    renderEdgesLOD(edges, positions) {\n        this.edgesGroup.innerHTML = '';\n        \n        edges.forEach(edge => {\n            const sourcePos = positions.get ? positions.get(edge.source) : positions[edge.source];\n            const targetPos = positions.get ? positions.get(edge.target) : positions[edge.target];\n            \n            if (!sourcePos || !targetPos) return;\n            \n            const line = document.createElementNS('http://www.w3.org/2000/svg', 'line');\n            line.setAttribute('x1', sourcePos.x);\n            line.setAttribute('y1', sourcePos.y);\n            line.setAttribute('x2', targetPos.x);\n            line.setAttribute('y2', targetPos.y);\n            line.setAttribute('stroke', this.config.edgeColor);\n            line.setAttribute('stroke-width', '0.5'); // Thinner for LOD\n            line.setAttribute('opacity', '0.6');\n            \n            this.edgesGroup.appendChild(line);\n        });\n    }\n    \n    /**\n     * Render nodes\n     */\n    renderNodes(nodes, positions) {\n        // Clear existing nodes\n        this.nodesGroup.innerHTML = '';\n        \n        nodes.forEach(node => {\n            const position = positions.get ? positions.get(node.id) : positions[node.id];\n            if (!position) return;\n            \n            const circle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\n            circle.setAttribute('cx', position.x);\n            circle.setAttribute('cy', position.y);\n            circle.setAttribute('r', node.size || this.config.nodeRadius);\n            circle.setAttribute('fill', node.color || this.config.nodeColor);\n            circle.setAttribute('stroke', '#ffffff');\n            circle.setAttribute('stroke-width', '2');\n            circle.setAttribute('opacity', '0.9');\n            \n            // Add node ID for interaction\n            circle.setAttribute('data-node-id', node.id);\n            \n            // Make interactive\n            circle.style.cursor = 'pointer';\n            \n            this.nodesGroup.appendChild(circle);\n        });\n    }\n    \n    /**\n     * Render nodes (LOD version)\n     */\n    renderNodesLOD(nodes, positions) {\n        this.nodesGroup.innerHTML = '';\n        \n        nodes.forEach(node => {\n            const position = positions.get ? positions.get(node.id) : positions[node.id];\n            if (!position) return;\n            \n            const circle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\n            circle.setAttribute('cx', position.x);\n            circle.setAttribute('cy', position.y);\n            circle.setAttribute('r', '3'); // Smaller for LOD\n            circle.setAttribute('fill', this.config.nodeColor);\n            circle.setAttribute('stroke', 'none');\n            circle.setAttribute('opacity', '0.8');\n            \n            this.nodesGroup.appendChild(circle);\n        });\n    }\n    \n    /**\n     * Render labels\n     */\n    renderLabels(nodes, positions) {\n        this.labelsGroup.innerHTML = '';\n        \n        nodes.forEach(node => {\n            if (!node.label) return;\n            \n            const position = positions.get ? positions.get(node.id) : positions[node.id];\n            if (!position) return;\n            \n            const text = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n            text.setAttribute('x', position.x);\n            text.setAttribute('y', position.y - (node.size || this.config.nodeRadius) - 5);\n            text.setAttribute('text-anchor', 'middle');\n            text.setAttribute('font-family', 'Arial, sans-serif');\n            text.setAttribute('font-size', '12');\n            text.setAttribute('fill', '#333');\n            text.textContent = node.label;\n            \n            this.labelsGroup.appendChild(text);\n        });\n    }\n    \n    /**\n     * Record render time for performance monitoring\n     */\n    recordRenderTime(time) {\n        this.renderTimes.push(time);\n        if (this.renderTimes.length > 60) { // Keep last 60 frames\n            this.renderTimes.shift();\n        }\n        this.lastRenderTime = time;\n    }\n    \n    /**\n     * Get performance statistics\n     */\n    getPerformanceStats() {\n        if (this.renderTimes.length === 0) return null;\n        \n        const avg = this.renderTimes.reduce((a, b) => a + b, 0) / this.renderTimes.length;\n        const max = Math.max(...this.renderTimes);\n        const min = Math.min(...this.renderTimes);\n        \n        return {\n            averageRenderTime: avg.toFixed(2),\n            maxRenderTime: max.toFixed(2),\n            minRenderTime: min.toFixed(2),\n            frameCount: this.frameCount,\n            fps: (1000 / avg).toFixed(1)\n        };\n    }\n    \n    /**\n     * Update configuration\n     */\n    updateConfig(newConfig) {\n        this.config = { ...this.config, ...newConfig };\n        \n        // Update SVG if size changed\n        if (this.svg && (newConfig.width || newConfig.height)) {\n            this.svg.setAttribute('width', this.config.width);\n            this.svg.setAttribute('height', this.config.height);\n        }\n        \n        console.log('⚙️ SVGRenderer config updated:', this.config);\n    }\n    \n    /**\n     * Clear renderer\n     */\n    clear() {\n        if (this.nodesGroup) this.nodesGroup.innerHTML = '';\n        if (this.edgesGroup) this.edgesGroup.innerHTML = '';\n        if (this.labelsGroup) this.labelsGroup.innerHTML = '';\n    }\n    \n    /**\n     * Export current SVG as string\n     */\n    exportSVG() {\n        if (!this.svg) return null;\n        \n        const serializer = new XMLSerializer();\n        return serializer.serializeToString(this.svg);\n    }\n}\n\nexport default SVGRenderer;","/**\n * 🖱️ Unified Interaction Engine\n * \n * Handles mouse, touch, and keyboard interactions consistently\n * across all visualization environments\n */\n\nexport class InteractionEngine {\n    constructor(config = {}) {\n        this.config = {\n            enableDrag: true,\n            enableZoom: true,\n            enablePan: true,\n            enableMultiTouch: true,\n            dragThreshold: 5,      // pixels before drag starts\n            zoomSensitivity: 0.1,\n            panSensitivity: 1.0,\n            ...config\n        };\n        \n        this.element = null;\n        this.callbacks = new Map();\n        this.state = {\n            isDragging: false,\n            isPanning: false,\n            draggedNode: null,\n            lastMousePos: { x: 0, y: 0 },\n            dragStartPos: { x: 0, y: 0 },\n            zoom: 1,\n            pan: { x: 0, y: 0 }\n        };\n        \n        // Event listeners\n        this.listeners = new Map();\n        \n        console.log('🖱️ InteractionEngine initialized:', this.config);\n    }\n    \n    /**\n     * Attach interaction engine to DOM element\n     */\n    attachToElement(element, callbacks = {}) {\n        this.element = element;\n        this.callbacks = new Map(Object.entries(callbacks));\n        \n        this.setupEventListeners();\n        \n        console.log('🔗 InteractionEngine attached to element');\n    }\n    \n    /**\n     * Setup event listeners\n     */\n    setupEventListeners() {\n        if (!this.element) return;\n        \n        // Mouse events\n        this.addListener('mousedown', this.handleMouseDown.bind(this));\n        this.addListener('mousemove', this.handleMouseMove.bind(this));\n        this.addListener('mouseup', this.handleMouseUp.bind(this));\n        this.addListener('wheel', this.handleWheel.bind(this));\n        \n        // Touch events for mobile\n        if (this.config.enableMultiTouch) {\n            this.addListener('touchstart', this.handleTouchStart.bind(this));\n            this.addListener('touchmove', this.handleTouchMove.bind(this));\n            this.addListener('touchend', this.handleTouchEnd.bind(this));\n        }\n        \n        // Keyboard events\n        this.addListener('keydown', this.handleKeyDown.bind(this));\n        \n        // Prevent context menu on right click\n        this.addListener('contextmenu', (e) => e.preventDefault());\n    }\n    \n    /**\n     * Add event listener and track it\n     */\n    addListener(event, handler) {\n        this.element.addEventListener(event, handler);\n        if (!this.listeners.has(event)) {\n            this.listeners.set(event, []);\n        }\n        this.listeners.get(event).push(handler);\n    }\n    \n    /**\n     * Handle mouse down events\n     */\n    handleMouseDown(event) {\n        event.preventDefault();\n        \n        const rect = this.element.getBoundingClientRect();\n        const mousePos = {\n            x: event.clientX - rect.left,\n            y: event.clientY - rect.top\n        };\n        \n        this.state.lastMousePos = mousePos;\n        this.state.dragStartPos = { ...mousePos };\n        \n        // Check if clicking on a node\n        const target = event.target;\n        const nodeId = target.getAttribute('data-node-id');\n        const edgeId = target.getAttribute('data-edge-id');\n        \n        if (nodeId && this.config.enableDrag) {\n            this.state.draggedNode = nodeId;\n            this.state.isDragging = false; // Will become true after threshold\n            this.emit('node_mousedown', { nodeId, position: mousePos, event });\n        } else if (edgeId) {\n            this.emit('edge_click', { edgeId, position: mousePos, event });\n        } else if (this.config.enablePan) {\n            this.state.isPanning = true;\n        }\n    }\n    \n    /**\n     * Handle mouse move events\n     */\n    handleMouseMove(event) {\n        event.preventDefault();\n        \n        const rect = this.element.getBoundingClientRect();\n        const mousePos = {\n            x: event.clientX - rect.left,\n            y: event.clientY - rect.top\n        };\n        \n        const deltaX = mousePos.x - this.state.lastMousePos.x;\n        const deltaY = mousePos.y - this.state.lastMousePos.y;\n        \n        // Node dragging\n        if (this.state.draggedNode) {\n            const distance = Math.sqrt(\n                Math.pow(mousePos.x - this.state.dragStartPos.x, 2) +\n                Math.pow(mousePos.y - this.state.dragStartPos.y, 2)\n            );\n            \n            if (!this.state.isDragging && distance > this.config.dragThreshold) {\n                this.state.isDragging = true;\n                this.emit('drag_start', { nodeId: this.state.draggedNode, position: mousePos });\n            }\n            \n            if (this.state.isDragging) {\n                this.emit('node_drag', { \n                    nodeId: this.state.draggedNode, \n                    position: mousePos,\n                    delta: { x: deltaX, y: deltaY }\n                });\n            }\n        }\n        // Canvas panning\n        else if (this.state.isPanning && this.config.enablePan) {\n            this.state.pan.x += deltaX * this.config.panSensitivity;\n            this.state.pan.y += deltaY * this.config.panSensitivity;\n            \n            this.emit('pan', { \n                pan: { ...this.state.pan },\n                delta: { x: deltaX, y: deltaY }\n            });\n        }\n        \n        this.state.lastMousePos = mousePos;\n    }\n    \n    /**\n     * Handle mouse up events\n     */\n    handleMouseUp(event) {\n        event.preventDefault();\n        \n        const rect = this.element.getBoundingClientRect();\n        const mousePos = {\n            x: event.clientX - rect.left,\n            y: event.clientY - rect.top\n        };\n        \n        // End node dragging\n        if (this.state.draggedNode) {\n            if (this.state.isDragging) {\n                this.emit('drag_end', { \n                    nodeId: this.state.draggedNode, \n                    position: mousePos \n                });\n            } else {\n                // Was a click, not a drag\n                this.emit('node_click', { \n                    nodeId: this.state.draggedNode, \n                    position: mousePos,\n                    event\n                });\n            }\n            \n            this.state.draggedNode = null;\n            this.state.isDragging = false;\n        }\n        \n        // End panning\n        if (this.state.isPanning) {\n            this.state.isPanning = false;\n            this.emit('pan_end', { pan: { ...this.state.pan } });\n        }\n    }\n    \n    /**\n     * Handle wheel events for zooming\n     */\n    handleWheel(event) {\n        if (!this.config.enableZoom) return;\n        \n        event.preventDefault();\n        \n        const rect = this.element.getBoundingClientRect();\n        const mousePos = {\n            x: event.clientX - rect.left,\n            y: event.clientY - rect.top\n        };\n        \n        const deltaZoom = -event.deltaY * this.config.zoomSensitivity * 0.01;\n        const newZoom = Math.max(0.1, Math.min(5, this.state.zoom + deltaZoom));\n        \n        if (newZoom !== this.state.zoom) {\n            this.state.zoom = newZoom;\n            \n            this.emit('zoom', { \n                zoom: this.state.zoom,\n                center: mousePos,\n                delta: deltaZoom\n            });\n        }\n    }\n    \n    /**\n     * Handle touch start events\n     */\n    handleTouchStart(event) {\n        event.preventDefault();\n        \n        if (event.touches.length === 1) {\n            // Single touch - treat as mouse down\n            const touch = event.touches[0];\n            const mouseEvent = {\n                clientX: touch.clientX,\n                clientY: touch.clientY,\n                target: touch.target,\n                preventDefault: () => {}\n            };\n            this.handleMouseDown(mouseEvent);\n        }\n        // Multi-touch gestures could be handled here\n    }\n    \n    /**\n     * Handle touch move events\n     */\n    handleTouchMove(event) {\n        event.preventDefault();\n        \n        if (event.touches.length === 1) {\n            // Single touch - treat as mouse move\n            const touch = event.touches[0];\n            const mouseEvent = {\n                clientX: touch.clientX,\n                clientY: touch.clientY,\n                preventDefault: () => {}\n            };\n            this.handleMouseMove(mouseEvent);\n        }\n        // Multi-touch gestures could be handled here\n    }\n    \n    /**\n     * Handle touch end events\n     */\n    handleTouchEnd(event) {\n        event.preventDefault();\n        \n        // Use last known position for touch end\n        const mouseEvent = {\n            clientX: this.state.lastMousePos.x,\n            clientY: this.state.lastMousePos.y,\n            preventDefault: () => {}\n        };\n        this.handleMouseUp(mouseEvent);\n    }\n    \n    /**\n     * Handle keyboard events\n     */\n    handleKeyDown(event) {\n        // Space bar to reset view\n        if (event.code === 'Space') {\n            event.preventDefault();\n            this.resetView();\n        }\n        \n        // Arrow keys for panning\n        if (this.config.enablePan) {\n            const panStep = 20;\n            let deltaX = 0, deltaY = 0;\n            \n            switch (event.code) {\n                case 'ArrowLeft':\n                    deltaX = -panStep;\n                    break;\n                case 'ArrowRight':\n                    deltaX = panStep;\n                    break;\n                case 'ArrowUp':\n                    deltaY = -panStep;\n                    break;\n                case 'ArrowDown':\n                    deltaY = panStep;\n                    break;\n            }\n            \n            if (deltaX || deltaY) {\n                event.preventDefault();\n                this.state.pan.x += deltaX;\n                this.state.pan.y += deltaY;\n                \n                this.emit('pan', { \n                    pan: { ...this.state.pan },\n                    delta: { x: deltaX, y: deltaY }\n                });\n            }\n        }\n    }\n    \n    /**\n     * Reset view to default state\n     */\n    resetView() {\n        this.state.zoom = 1;\n        this.state.pan = { x: 0, y: 0 };\n        \n        this.emit('view_reset', {\n            zoom: this.state.zoom,\n            pan: { ...this.state.pan }\n        });\n    }\n    \n    /**\n     * Process frame (called from main update loop)\n     */\n    processFrame() {\n        // Could be used for continuous interactions or animations\n        // Currently not needed but available for future use\n    }\n    \n    /**\n     * Emit event to callbacks\n     */\n    emit(event, data) {\n        const callback = this.callbacks.get(event);\n        if (callback) {\n            try {\n                callback(data);\n            } catch (error) {\n                console.error(`Error in interaction callback for ${event}:`, error);\n            }\n        }\n    }\n    \n    /**\n     * Update configuration\n     */\n    updateConfig(newConfig) {\n        this.config = { ...this.config, ...newConfig };\n        console.log('⚙️ InteractionEngine config updated:', this.config);\n    }\n    \n    /**\n     * Get current interaction state\n     */\n    getState() {\n        return { ...this.state };\n    }\n    \n    /**\n     * Set interaction state\n     */\n    setState(newState) {\n        this.state = { ...this.state, ...newState };\n    }\n    \n    /**\n     * Clean up event listeners\n     */\n    cleanup() {\n        if (!this.element) return;\n        \n        for (const [event, handlers] of this.listeners) {\n            handlers.forEach(handler => {\n                this.element.removeEventListener(event, handler);\n            });\n        }\n        \n        this.listeners.clear();\n        console.log('🧹 InteractionEngine cleaned up');\n    }\n}\n\nexport default InteractionEngine;","/**\n * 🎯 Unified Visualization Core - Single Source of Truth\n * \n * This is the unified core engine that works across all visualization environments:\n * - Jupyter widgets\n * - WebSocket streaming clients  \n * - Static file exports\n * - Local browser displays\n */\n\nimport { PhysicsEngine } from './PhysicsEngine.js';\nimport { SVGRenderer } from './SVGRenderer.js';\nimport { InteractionEngine } from './InteractionEngine.js';\n\nexport class GroggyVizCore {\n    constructor(nodes = [], edges = [], config = {}) {\n        // Store core data\n        this.nodes = nodes;\n        this.edges = edges;\n        this.config = {\n            // Top-level properties for backward compatibility\n            width: 800,\n            height: 600,\n            ...config,\n            // Nested configuration\n            physics: {\n                enabled: true,\n                charge: -300,\n                distance: 50,\n                damping: 0.9,\n                iterations: 100,\n                ...config.physics\n            },\n            rendering: {\n                width: config.width || 800,\n                height: config.height || 600,\n                nodeRadius: 8,\n                edgeWidth: 1,\n                ...config.rendering\n            },\n            interaction: {\n                enableDrag: true,\n                enableZoom: true,\n                enablePan: true,\n                ...config.interaction\n            }\n        };\n        \n        // Initialize subsystems\n        this.physics = new PhysicsEngine(this.config.physics);\n        this.renderer = new SVGRenderer(this.config.rendering);\n        this.interactions = new InteractionEngine(this.config.interaction);\n        \n        // State\n        this.positions = new Map();\n        this.velocities = new Map();\n        this.isRunning = false;\n        this.frameCount = 0;\n        \n        // Additional properties for widget compatibility\n        this.selectedNodes = new Set();\n        this.nodePositions = this.positions; // Alias for compatibility\n        \n        // Event system for bidirectional communication\n        this.eventCallbacks = new Map();\n        \n        console.log('🎨 GroggyVizCore initialized:', {\n            nodes: this.nodes.length,\n            edges: this.edges.length,\n            config: this.config\n        });\n    }\n    \n    /**\n     * 🎯 Single update method used by ALL visualization environments\n     */\n    update(frameData = null) {\n        if (frameData) {\n            // External frame data (from WebSocket, etc.)\n            this.applyFrameData(frameData);\n        } else {\n            // Internal physics simulation\n            this.physics.updatePositions(\n                this.nodes, \n                this.edges, \n                this.positions, \n                this.velocities,\n                1/60 // 60 FPS\n            );\n        }\n        \n        // Render the current state\n        this.renderer.render({\n            nodes: this.nodes,\n            edges: this.edges,\n            positions: this.positions,\n            frameCount: this.frameCount++\n        });\n        \n        // Handle interactions\n        this.interactions.processFrame();\n        \n        // Emit frame event\n        this.emit('frame', {\n            nodes: this.nodes,\n            edges: this.edges,\n            positions: this.positions,\n            frameCount: this.frameCount\n        });\n        \n        return this.getFrameData();\n    }\n    \n    /**\n     * Apply frame data from external source (WebSocket streaming)\n     */\n    applyFrameData(frameData) {\n        if (frameData.positions) {\n            for (const [nodeId, position] of Object.entries(frameData.positions)) {\n                this.positions.set(nodeId, position);\n            }\n        }\n        \n        if (frameData.nodes) {\n            this.nodes = frameData.nodes;\n        }\n        \n        if (frameData.edges) {\n            this.edges = frameData.edges;\n        }\n    }\n    \n    /**\n     * Get current frame data for transmission\n     */\n    getFrameData() {\n        return {\n            nodes: this.nodes,\n            edges: this.edges,\n            positions: Object.fromEntries(this.positions),\n            velocities: Object.fromEntries(this.velocities),\n            frameCount: this.frameCount,\n            timestamp: Date.now()\n        };\n    }\n    \n    /**\n     * Attach to DOM element (for widgets and local display)\n     */\n    attachToDOM(element, callbacks = {}) {\n        this.element = element;\n        this.eventCallbacks = new Map(Object.entries(callbacks));\n        \n        // Initialize renderer with DOM element\n        this.renderer.attachToElement(element);\n        \n        // Setup interactions\n        this.interactions.attachToElement(element, {\n            onNodeDrag: (nodeId, position) => {\n                this.positions.set(nodeId, position);\n                this.emit('node_drag', { nodeId, position });\n            },\n            onNodeClick: (nodeId) => {\n                this.emit('node_click', { nodeId });\n            },\n            onEdgeClick: (edgeId) => {\n                this.emit('edge_click', { edgeId });\n            }\n        });\n        \n        console.log('🔗 GroggyVizCore attached to DOM element:', element);\n    }\n    \n    /**\n     * Start physics simulation\n     */\n    start() {\n        this.isRunning = true;\n        this.physics.start();\n        this.animationLoop();\n        console.log('▶️ GroggyVizCore simulation started');\n    }\n    \n    /**\n     * Stop physics simulation\n     */\n    stop() {\n        this.isRunning = false;\n        this.physics.stop();\n        console.log('⏹️ GroggyVizCore simulation stopped');\n    }\n    \n    /**\n     * Animation loop for local/widget environments\n     */\n    animationLoop() {\n        if (!this.isRunning) return;\n        \n        this.update();\n        requestAnimationFrame(() => this.animationLoop());\n    }\n    \n    /**\n     * Event system\n     */\n    on(event, callback) {\n        if (!this.eventCallbacks.has(event)) {\n            this.eventCallbacks.set(event, []);\n        }\n        this.eventCallbacks.get(event).push(callback);\n    }\n    \n    emit(event, data) {\n        if (this.eventCallbacks.has(event)) {\n            this.eventCallbacks.get(event).forEach(callback => {\n                try {\n                    callback(data);\n                } catch (error) {\n                    console.error(`Error in event callback for ${event}:`, error);\n                }\n            });\n        }\n    }\n    \n    /**\n     * Update graph data\n     */\n    setData(nodes, edges) {\n        this.nodes = nodes;\n        this.edges = edges;\n        \n        // Reset physics state\n        this.positions.clear();\n        this.velocities.clear();\n        this.frameCount = 0;\n        \n        // Initialize positions if not provided\n        this.nodes.forEach((node, index) => {\n            if (!this.positions.has(node.id)) {\n                // Simple circular layout as default\n                const angle = (index * 2 * Math.PI) / this.nodes.length;\n                const radius = Math.min(this.config.rendering.width, this.config.rendering.height) / 4;\n                this.positions.set(node.id, {\n                    x: this.config.rendering.width / 2 + radius * Math.cos(angle),\n                    y: this.config.rendering.height / 2 + radius * Math.sin(angle)\n                });\n            }\n            \n            if (!this.velocities.has(node.id)) {\n                this.velocities.set(node.id, { x: 0, y: 0 });\n            }\n        });\n        \n        this.emit('data_updated', { nodes, edges });\n        console.log('📊 GroggyVizCore data updated:', { nodes: nodes.length, edges: edges.length });\n    }\n    \n    /**\n     * Get current configuration\n     */\n    getConfig() {\n        return { ...this.config };\n    }\n    \n    /**\n     * Update configuration\n     */\n    updateConfig(newConfig) {\n        this.config = {\n            ...this.config,\n            ...newConfig,\n            physics: { ...this.config.physics, ...newConfig.physics },\n            rendering: { ...this.config.rendering, ...newConfig.rendering },\n            interaction: { ...this.config.interaction, ...newConfig.interaction }\n        };\n        \n        // Update subsystems\n        this.physics.updateConfig(this.config.physics);\n        this.renderer.updateConfig(this.config.rendering);\n        this.interactions.updateConfig(this.config.interaction);\n        \n        this.emit('config_updated', this.config);\n        console.log('⚙️ GroggyVizCore config updated:', this.config);\n    }\n    \n    /**\n     * Export current state for saving/serialization\n     */\n    exportState() {\n        return {\n            nodes: this.nodes,\n            edges: this.edges,\n            positions: Object.fromEntries(this.positions),\n            velocities: Object.fromEntries(this.velocities),\n            selectedNodes: Array.from(this.selectedNodes),\n            config: this.config,\n            frameCount: this.frameCount,\n            timestamp: Date.now()\n        };\n    }\n    \n    /**\n     * Clean up and destroy the visualization\n     */\n    destroy() {\n        this.stop();\n        \n        // Cleanup subsystems\n        if (this.interactions && typeof this.interactions.cleanup === 'function') {\n            this.interactions.cleanup();\n        }\n        \n        if (this.renderer && typeof this.renderer.clear === 'function') {\n            this.renderer.clear();\n        }\n        \n        // Clear data\n        this.positions.clear();\n        this.velocities.clear();\n        this.selectedNodes.clear();\n        this.eventCallbacks.clear();\n        \n        // Clear references\n        this.element = null;\n        this.nodes = [];\n        this.edges = [];\n        \n        console.log('🧹 GroggyVizCore destroyed');\n    }\n}\n\nexport default GroggyVizCore;","/**\n * 🧠 Unified Jupyter Widget using GroggyVizCore\n * \n * Refactored to use the unified JavaScript core for consistency\n * across all visualization environments. This replaces the original\n * widget.ts with a version that leverages the unified architecture.\n */\n\nimport { DOMWidgetModel, DOMWidgetView } from '@jupyter-widgets/base';\nimport { GroggyVizCore } from './core/VizCore.js';\n\nexport const MODULE_NAME = 'groggy-widgets';\nexport const MODULE_VERSION = '0.1.0';\n\nexport class GroggyGraphModel extends DOMWidgetModel {\n  static model_name = 'GroggyGraphModel';\n  static model_module = MODULE_NAME;\n  static model_module_version = MODULE_VERSION;\n\n  defaults() {\n    return {\n      ...super.defaults(),\n      _model_name: 'GroggyGraphModel',\n      _model_module: MODULE_NAME,\n      _model_module_version: MODULE_VERSION,\n      _view_name: 'GroggyGraphView',\n      _view_module: MODULE_NAME,\n      _view_module_version: MODULE_VERSION,\n      \n      // Graph data traits\n      nodes: [],\n      edges: [],\n      title: 'Graph Visualization',\n      \n      // Configuration traits\n      width: 800,\n      height: 600,\n      layout_algorithm: 'force-directed',\n      theme: 'light',\n      \n      // Physics configuration\n      physics_enabled: true,\n      force_strength: 30,\n      link_distance: 50,\n      link_strength: 0.1,\n      charge_strength: -300,\n      center_strength: 0.1,\n      \n      // Interaction configuration\n      enable_drag: true,\n      enable_zoom: true,\n      enable_pan: true,\n      enable_selection: true,\n      enable_hover: true,\n      \n      // State traits\n      selected_nodes: [],\n      hovered_node: '',\n      camera_position: { scale: 1, translate: { x: 0, y: 0 } },\n      is_dragging: false,\n      \n      // Styling\n      node_color_scheme: 'default',\n      background_color: '#ffffff',\n      enable_shadows: true,\n      enable_animations: true\n    };\n  }\n}\n\nexport class GroggyGraphView extends DOMWidgetView {\n  static view_name = 'GroggyGraphView';\n  static view_module = MODULE_NAME;\n  static view_module_version = MODULE_VERSION;\n  \n  private vizCore: GroggyVizCore | null = null;\n  private container: HTMLElement | null = null;\n\n  render() {\n    console.log('🧠 Initializing Groggy Jupyter widget with unified core');\n    \n    // Create main container\n    this.el.style.cssText = `\n      border: 2px solid #4CAF50;\n      padding: 10px;\n      margin: 10px;\n      border-radius: 8px;\n      background: #f9f9f9;\n      font-family: Arial, sans-serif;\n      min-height: 400px;\n      position: relative;\n      user-select: none;\n    `;\n    \n    // Create header\n    const header = document.createElement('div');\n    header.style.cssText = `\n      font-weight: bold;\n      margin-bottom: 10px;\n      color: #333;\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n    `;\n    \n    const title = document.createElement('span');\n    title.textContent = this.model.get('title') || 'Graph Visualization';\n    header.appendChild(title);\n    \n    const status = document.createElement('span');\n    status.style.cssText = `\n      font-size: 12px;\n      color: #666;\n      background: rgba(255,255,255,0.8);\n      padding: 2px 6px;\n      border-radius: 3px;\n    `;\n    status.textContent = 'Powered by GroggyVizCore';\n    header.appendChild(status);\n    \n    this.el.appendChild(header);\n    \n    // Create visualization container\n    this.container = document.createElement('div');\n    this.container.style.cssText = `\n      width: 100%;\n      height: ${this.model.get('height') || 600}px;\n      border: 1px solid #ddd;\n      background: ${this.model.get('background_color') || '#ffffff'};\n      position: relative;\n      overflow: hidden;\n      border-radius: 4px;\n    `;\n    this.el.appendChild(this.container);\n    \n    // Initialize unified core\n    this.initializeVizCore();\n    \n    // Set up model change listeners\n    this.setupModelListeners();\n    \n    // Initial data load\n    this.updateData();\n  }\n  \n  /**\n   * 🧠 Initialize the unified visualization core\n   */\n  private initializeVizCore() {\n    const config = {\n      width: this.model.get('width') || 800,\n      height: this.model.get('height') || 600,\n      \n      physics: {\n        enabled: this.model.get('physics_enabled') !== false,\n        forceStrength: this.model.get('force_strength') || 30,\n        linkDistance: this.model.get('link_distance') || 50,\n        linkStrength: this.model.get('link_strength') || 0.1,\n        chargeStrength: this.model.get('charge_strength') || -300,\n        centerStrength: this.model.get('center_strength') || 0.1\n      },\n      \n      rendering: {\n        backgroundColor: this.model.get('background_color') || '#ffffff',\n        nodeColorScheme: this.model.get('node_color_scheme') || 'default',\n        enableShadows: this.model.get('enable_shadows') !== false,\n        enableAnimations: this.model.get('enable_animations') !== false\n      },\n      \n      interaction: {\n        enableDrag: this.model.get('enable_drag') !== false,\n        enableZoom: this.model.get('enable_zoom') !== false,\n        enablePan: this.model.get('enable_pan') !== false,\n        enableSelection: this.model.get('enable_selection') !== false,\n        enableHover: this.model.get('enable_hover') !== false\n      }\n    };\n    \n    // Create unified core\n    this.vizCore = new GroggyVizCore([], [], config);\n    \n    // Set up event handlers\n    this.setupCoreEventHandlers();\n    \n    // Attach to DOM\n    if (this.container) {\n      this.vizCore.attachToDOM(this.container);\n    }\n    \n    console.log('🧠 GroggyVizCore initialized for Jupyter widget');\n  }\n  \n  /**\n   * 🎧 Set up event handlers for core → Jupyter synchronization\n   */\n  private setupCoreEventHandlers() {\n    if (!this.vizCore) return;\n    \n    // Node interactions\n    this.vizCore.on('nodeClick', (data: any) => {\n      this.model.send({\n        type: 'node_click',\n        node_id: data.nodeId,\n        event: {\n          ctrlKey: data.event?.ctrlKey || false,\n          metaKey: data.event?.metaKey || false,\n          shiftKey: data.event?.shiftKey || false\n        }\n      });\n    });\n    \n    this.vizCore.on('nodeHover', (data: any) => {\n      this.model.set('hovered_node', data.nodeId || '');\n      this.model.save_changes();\n    });\n    \n    this.vizCore.on('selectionChanged', (data: any) => {\n      this.model.set('selected_nodes', data.selectedNodes || []);\n      this.model.save_changes();\n    });\n    \n    // Physics and camera events\n    this.vizCore.on('simulationStarted', () => {\n      this.updateStatus('Physics simulation running...');\n    });\n    \n    this.vizCore.on('simulationStopped', () => {\n      this.updateStatus('Physics simulation stopped');\n    });\n    \n    this.vizCore.on('zoom', (data: any) => {\n      const camera = this.model.get('camera_position');\n      camera.scale = data.scale;\n      this.model.set('camera_position', camera);\n      this.model.save_changes();\n    });\n    \n    this.vizCore.on('pan', (data: any) => {\n      const camera = this.model.get('camera_position');\n      camera.translate.x += data.delta.x;\n      camera.translate.y += data.delta.y;\n      this.model.set('camera_position', camera);\n      this.model.save_changes();\n    });\n    \n    // Drag events\n    this.vizCore.on('nodeDrag', (data: any) => {\n      if (data.isDragging) {\n        this.model.set('is_dragging', true);\n        this.model.save_changes();\n      }\n    });\n    \n    this.vizCore.on('nodeDragEnd', () => {\n      this.model.set('is_dragging', false);\n      this.model.save_changes();\n    });\n    \n    // Update events for performance monitoring\n    this.vizCore.on('update', (data: any) => {\n      if (data.metadata.frameCount % 60 === 0) { // Every 60 frames\n        this.updateStatus(`FPS: ${Math.round(data.metadata.fps)} | Nodes: ${data.nodes.length}`);\n      }\n    });\n  }\n  \n  /**\n   * 🔄 Set up model change listeners for Jupyter → core synchronization\n   */\n  private setupModelListeners() {\n    // Data changes\n    this.model.on('change:nodes change:edges', () => {\n      this.updateData();\n    });\n    \n    // Configuration changes\n    this.model.on('change:width change:height', () => {\n      this.updateDimensions();\n    });\n    \n    this.model.on('change:physics_enabled change:force_strength change:link_distance change:link_strength change:charge_strength change:center_strength', () => {\n      this.updatePhysicsConfig();\n    });\n    \n    this.model.on('change:background_color change:node_color_scheme change:enable_shadows change:enable_animations', () => {\n      this.updateRenderingConfig();\n    });\n    \n    this.model.on('change:enable_drag change:enable_zoom change:enable_pan change:enable_selection change:enable_hover', () => {\n      this.updateInteractionConfig();\n    });\n    \n    // Selection changes from Python\n    this.model.on('change:selected_nodes', () => {\n      if (this.vizCore) {\n        const selectedNodes = this.model.get('selected_nodes') || [];\n        // Update visual selection without triggering events\n        this.vizCore.selectedNodes.clear();\n        selectedNodes.forEach((nodeId: string) => {\n          this.vizCore!.selectedNodes.add(nodeId);\n        });\n        this.vizCore.update(); // Force re-render\n      }\n    });\n    \n    // Title changes\n    this.model.on('change:title', () => {\n      const titleElement = this.el.querySelector('span');\n      if (titleElement) {\n        titleElement.textContent = this.model.get('title') || 'Graph Visualization';\n      }\n    });\n  }\n  \n  /**\n   * 📊 Update graph data\n   */\n  private updateData() {\n    if (!this.vizCore) return;\n    \n    const nodes = this.model.get('nodes') || [];\n    const edges = this.model.get('edges') || [];\n    \n    this.vizCore.setData(nodes, edges);\n    \n    console.log(`🧠 Updated data: ${nodes.length} nodes, ${edges.length} edges`);\n  }\n  \n  /**\n   * 📐 Update canvas dimensions\n   */\n  private updateDimensions() {\n    if (!this.vizCore || !this.container) return;\n    \n    const width = this.model.get('width') || 800;\n    const height = this.model.get('height') || 600;\n    \n    this.container.style.height = `${height}px`;\n    \n    this.vizCore.updateConfig({\n      width,\n      height\n    });\n    \n    console.log(`🧠 Updated dimensions: ${width}x${height}`);\n  }\n  \n  /**\n   * ⚛️ Update physics configuration\n   */\n  private updatePhysicsConfig() {\n    if (!this.vizCore) return;\n    \n    const physicsConfig = {\n      enabled: this.model.get('physics_enabled') !== false,\n      forceStrength: this.model.get('force_strength') || 30,\n      linkDistance: this.model.get('link_distance') || 50,\n      linkStrength: this.model.get('link_strength') || 0.1,\n      chargeStrength: this.model.get('charge_strength') || -300,\n      centerStrength: this.model.get('center_strength') || 0.1\n    };\n    \n    this.vizCore.updateConfig({ physics: physicsConfig });\n    \n    console.log('🧠 Updated physics configuration');\n  }\n  \n  /**\n   * 🎨 Update rendering configuration\n   */\n  private updateRenderingConfig() {\n    if (!this.vizCore || !this.container) return;\n    \n    const renderingConfig = {\n      backgroundColor: this.model.get('background_color') || '#ffffff',\n      nodeColorScheme: this.model.get('node_color_scheme') || 'default',\n      enableShadows: this.model.get('enable_shadows') !== false,\n      enableAnimations: this.model.get('enable_animations') !== false\n    };\n    \n    this.vizCore.updateConfig({ rendering: renderingConfig });\n    \n    // Update container background\n    this.container.style.background = renderingConfig.backgroundColor;\n    \n    console.log('🧠 Updated rendering configuration');\n  }\n  \n  /**\n   * 🖱️ Update interaction configuration\n   */\n  private updateInteractionConfig() {\n    if (!this.vizCore) return;\n    \n    const interactionConfig = {\n      enableDrag: this.model.get('enable_drag') !== false,\n      enableZoom: this.model.get('enable_zoom') !== false,\n      enablePan: this.model.get('enable_pan') !== false,\n      enableSelection: this.model.get('enable_selection') !== false,\n      enableHover: this.model.get('enable_hover') !== false\n    };\n    \n    this.vizCore.updateConfig({ interaction: interactionConfig });\n    \n    console.log('🧠 Updated interaction configuration');\n  }\n  \n  /**\n   * 📊 Update status display\n   */\n  private updateStatus(text: string) {\n    const statusElement = this.el.querySelector('span:last-child') as HTMLElement;\n    if (statusElement) {\n      statusElement.textContent = text;\n    }\n  }\n  \n  /**\n   * 📨 Handle custom messages from Python\n   */\n  handleCustomMessage(content: any) {\n    const { type } = content;\n    \n    switch (type) {\n      case 'set_layout':\n        // Layout changes would be handled by physics config updates\n        this.updatePhysicsConfig();\n        break;\n        \n      case 'focus_node':\n        if (this.vizCore && content.node_id) {\n          // Find node position and adjust camera\n          const pos = this.vizCore.nodePositions.get(content.node_id);\n          if (pos) {\n            const zoom = content.zoom || 2.0;\n            const centerX = this.vizCore.config.width / 2;\n            const centerY = this.vizCore.config.height / 2;\n            \n            // Calculate transform to center node\n            const translateX = centerX - pos.x * zoom;\n            const translateY = centerY - pos.y * zoom;\n            \n            this.vizCore.updateConfig({\n              camera: {\n                scale: zoom,\n                translate: { x: translateX, y: translateY }\n              }\n            });\n          }\n        }\n        break;\n        \n      case 'reset_camera':\n        if (this.vizCore) {\n          this.vizCore.updateConfig({\n            camera: {\n              scale: 1,\n              translate: { x: 0, y: 0 }\n            }\n          });\n        }\n        break;\n        \n      case 'export_state':\n        if (this.vizCore) {\n          const state = this.vizCore.exportState();\n          this.model.send({\n            type: 'state_exported',\n            state: state\n          });\n        }\n        break;\n        \n      default:\n        console.warn(`🧠 Unknown message type: ${type}`);\n    }\n  }\n  \n  /**\n   * 🧹 Cleanup when widget is destroyed\n   */\n  remove() {\n    if (this.vizCore) {\n      this.vizCore.destroy();\n      this.vizCore = null;\n    }\n    \n    super.remove();\n    console.log('🧠 Unified Jupyter widget destroyed');\n  }\n}","/**\n * Elegant Jupyter Notebook Extension Entry Point\n * \n * Minimal, beautiful registration of our widget for classic Jupyter notebooks.\n */\n\nimport { GroggyGraphModel, GroggyGraphView } from './widget_unified';\n\n// AMD module type declarations\ndeclare const define: any;\ndeclare const require: any;\ndeclare const module: any;\n\n/**\n * Elegant extension loading for Jupyter Notebook\n */\nexport function load_ipython_extension(): void {\n    // Register our elegant widgets\n    const widgets = require('@jupyter-widgets/base');\n    \n    widgets.registerWidget({\n        model_name: 'GroggyGraphModel',\n        model_module: 'groggy-widget',\n        model_module_version: '0.1.0',\n        view_name: 'GroggyGraphView', \n        view_module: 'groggy-widget',\n        view_module_version: '0.1.0',\n        model: GroggyGraphModel,\n        view: GroggyGraphView\n    });\n    \n    console.log('✨ Elegant Groggy widget extension loaded for Jupyter Notebook');\n}\n\n// Elegant AMD module definition\n(function(root: any, factory: any) {\n    if (typeof define === 'function' && define.amd) {\n        // AMD\n        define(['@jupyter-widgets/base'], factory);\n    } else if (typeof module === 'object' && module.exports) {\n        // CommonJS\n        module.exports = factory(require('@jupyter-widgets/base'));\n    } else {\n        // Browser globals\n        root.groggyWidget = factory(root.widgets);\n    }\n}(typeof self !== 'undefined' ? self : this, function(widgets: any) {\n    \n    return {\n        load_ipython_extension,\n        GroggyGraphModel,\n        GroggyGraphView\n    };\n    \n}));","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.amdO = {};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.hmd = (module) => {\n\tmodule = Object.create(module);\n\tif (!module.children) module.children = [];\n\tObject.defineProperty(module, 'exports', {\n\t\tenumerable: true,\n\t\tset: () => {\n\t\t\tthrow new Error('ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: ' + module.id);\n\t\t}\n\t});\n\treturn module;\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(384);\n"],"names":["module","exports","__WEBPACK_EXTERNAL_MODULE__55__","PhysicsEngine","constructor","config","this","charge","distance","damping","iterations","threshold","timeStep","isRunning","iteration","totalEnergy","console","log","updatePositions","nodes","edges","positions","velocities","deltaTime","length","forces","Map","forEach","node","set","id","x","y","calculateRepulsionForces","calculateAttractionForces","integrateForces","calculateTotalEnergy","pause","i","j","nodeA","nodeB","posA","get","posB","dx","dy","Math","sqrt","force","fx","fy","forceA","forceB","edge","sourcePos","source","targetPos","target","sourceForce","targetForce","position","velocity","max","min","energy","values","start","stop","updateConfig","newConfig","getState","reset","SVGRenderer","width","height","nodeRadius","edgeWidth","nodeColor","edgeColor","backgroundColor","enableLOD","lodThreshold","enableLabels","labelThreshold","element","svg","nodesGroup","edgesGroup","labelsGroup","frameCount","lastRenderTime","renderTimes","attachToElement","createSVGStructure","innerHTML","document","createElementNS","setAttribute","style","border","appendChild","render","renderData","startTime","performance","now","shouldUseLOD","shouldShowLabels","renderLOD","renderFull","renderTime","recordRenderTime","showLabels","renderEdges","renderNodes","renderLabels","renderEdgesLOD","renderNodesLOD","line","color","circle","size","cursor","label","text","textContent","time","push","shift","getPerformanceStats","avg","reduce","a","b","averageRenderTime","toFixed","maxRenderTime","minRenderTime","fps","clear","exportSVG","XMLSerializer","serializeToString","InteractionEngine","enableDrag","enableZoom","enablePan","enableMultiTouch","dragThreshold","zoomSensitivity","panSensitivity","callbacks","state","isDragging","isPanning","draggedNode","lastMousePos","dragStartPos","zoom","pan","listeners","Object","entries","setupEventListeners","addListener","handleMouseDown","bind","handleMouseMove","handleMouseUp","handleWheel","handleTouchStart","handleTouchMove","handleTouchEnd","handleKeyDown","e","preventDefault","event","handler","addEventListener","has","rect","getBoundingClientRect","mousePos","clientX","left","clientY","top","nodeId","getAttribute","edgeId","emit","deltaX","deltaY","pow","delta","deltaZoom","newZoom","center","touches","touch","mouseEvent","code","resetView","panStep","processFrame","data","callback","error","setState","newState","cleanup","handlers","removeEventListener","GroggyVizCore","physics","enabled","rendering","interaction","renderer","interactions","selectedNodes","Set","nodePositions","eventCallbacks","update","frameData","applyFrameData","getFrameData","fromEntries","timestamp","Date","attachToDOM","onNodeDrag","onNodeClick","onEdgeClick","animationLoop","requestAnimationFrame","on","setData","index","angle","PI","radius","cos","sin","getConfig","exportState","Array","from","destroy","MODULE_NAME","MODULE_VERSION","GroggyGraphModel","DOMWidgetModel","defaults","super","_model_name","_model_module","_model_module_version","_view_name","_view_module","_view_module_version","title","layout_algorithm","theme","physics_enabled","force_strength","link_distance","link_strength","charge_strength","center_strength","enable_drag","enable_zoom","enable_pan","enable_selection","enable_hover","selected_nodes","hovered_node","camera_position","scale","translate","is_dragging","node_color_scheme","background_color","enable_shadows","enable_animations","model_name","model_module","model_module_version","GroggyGraphView","DOMWidgetView","vizCore","container","el","cssText","header","createElement","model","status","initializeVizCore","setupModelListeners","updateData","forceStrength","linkDistance","linkStrength","chargeStrength","centerStrength","nodeColorScheme","enableShadows","enableAnimations","enableSelection","enableHover","setupCoreEventHandlers","send","type","node_id","ctrlKey","metaKey","shiftKey","save_changes","updateStatus","camera","metadata","round","updateDimensions","updatePhysicsConfig","updateRenderingConfig","updateInteractionConfig","add","titleElement","querySelector","physicsConfig","renderingConfig","background","interactionConfig","statusElement","handleCustomMessage","content","pos","centerX","centerY","translateX","translateY","warn","remove","load_ipython_extension","registerWidget","view_name","view_module","view_module_version","view","root","factory","self","widgets","define","groggyWidget","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","loaded","__webpack_modules__","amdO","d","definition","key","o","defineProperty","enumerable","hmd","create","children","Error","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value"],"sourceRoot":""}