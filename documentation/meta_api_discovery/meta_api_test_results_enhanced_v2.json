{
  "test_metadata": {
    "total_tests": 348,
    "successful_tests": 176,
    "failed_tests": 12,
    "skipped_tests": 160,
    "success_rate": 50.57471264367817
  },
  "test_results": [
    {
      "object": "BaseTable",
      "method": "agg",
      "signature": "(agg_specs)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['agg_specs']",
      "return_type": null
    },
    {
      "object": "BaseTable",
      "method": "aggregate",
      "signature": "(agg_specs)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['agg_specs']",
      "return_type": null
    },
    {
      "object": "BaseTable",
      "method": "assign",
      "signature": "(updates)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['updates']",
      "return_type": null
    },
    {
      "object": "BaseTable",
      "method": "column",
      "signature": "(column_name)",
      "requires_params": true,
      "status": "success_with_params",
      "result": "BaseArray[3] [1, 2, 3] (dtype: Int)\n\ud83d\udca1 Use .interactive() for rich table view or .interactive_embed() for Jupyter",
      "error": null,
      "return_type": "BaseArray",
      "test_params": "node_id"
    },
    {
      "object": "BaseTable",
      "method": "column_info",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "{'node_id': {'length': 3, 'non_null_count': 3, 'type_counts': {'int64': 3}, 'is_numeric': True, 'numeric_type': 'Int64', 'recommended_array_type': 'IntArray'}, 'type': {'length': 3, 'non_null_count': ",
      "error": null,
      "return_type": "dict"
    },
    {
      "object": "BaseTable",
      "method": "drop_columns",
      "signature": "(columns)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['columns']",
      "return_type": null
    },
    {
      "object": "BaseTable",
      "method": "filter",
      "signature": "(predicate)",
      "requires_params": true,
      "status": "success_with_params",
      "result": "BaseTable[3 x 3]",
      "error": null,
      "return_type": "BaseTable",
      "test_params": "<function APITestGenerator.try_method_with_common_params.<locals>.<lambda> at 0x1025da0d0>"
    },
    {
      "object": "BaseTable",
      "method": "from_csv",
      "signature": "(path)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['path']",
      "return_type": null
    },
    {
      "object": "BaseTable",
      "method": "from_dict",
      "signature": "(data)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['data']",
      "return_type": null
    },
    {
      "object": "BaseTable",
      "method": "from_json",
      "signature": "(path)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['path']",
      "return_type": null
    },
    {
      "object": "BaseTable",
      "method": "from_parquet",
      "signature": "(path)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['path']",
      "return_type": null
    },
    {
      "object": "BaseTable",
      "method": "get_column_numeric",
      "signature": "(column_name)",
      "requires_params": true,
      "status": "success_with_params",
      "result": "NumArray(dtype: int32)\n[  0] 1\n[  1] 2\n[  2] 3",
      "error": null,
      "return_type": "NumArray",
      "test_params": "node_id"
    },
    {
      "object": "BaseTable",
      "method": "get_column_raw",
      "signature": "(column_name)",
      "requires_params": true,
      "status": "success_with_params",
      "result": "BaseArray[3] [1, 2, 3] (dtype: Int)\n\ud83d\udca1 Use .interactive() for rich table view or .interactive_embed() for Jupyter",
      "error": null,
      "return_type": "BaseArray",
      "test_params": "node_id"
    },
    {
      "object": "BaseTable",
      "method": "group_by",
      "signature": "(columns)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['columns']",
      "return_type": null
    },
    {
      "object": "BaseTable",
      "method": "has_column",
      "signature": "(name)",
      "requires_params": true,
      "status": "success_with_params",
      "result": "True",
      "error": null,
      "return_type": "bool",
      "test_params": "node_id"
    },
    {
      "object": "BaseTable",
      "method": "head",
      "signature": "(n=5)",
      "requires_params": false,
      "status": "success",
      "result": "BaseTable[3 x 3]",
      "error": null,
      "return_type": "BaseTable"
    },
    {
      "object": "BaseTable",
      "method": "intersect",
      "signature": "(other)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['other']",
      "return_type": null
    },
    {
      "object": "BaseTable",
      "method": "iter",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "<groggy.BaseTableIterator object at 0x11d61d8f0>",
      "error": null,
      "return_type": "BaseTableIterator"
    },
    {
      "object": "BaseTable",
      "method": "join",
      "signature": "(other, on, how)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['other', 'on', 'how']",
      "return_type": null
    },
    {
      "object": "BaseTable",
      "method": "rich_display",
      "signature": "(config=None)",
      "requires_params": false,
      "status": "success",
      "result": "\u2296\u2296 gr.table\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 \u001b[1m                     #\u001b[0m \u2502 \u001b[1mnode_id                     ",
      "error": null,
      "return_type": "str"
    },
    {
      "object": "BaseTable",
      "method": "select",
      "signature": "(columns)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['columns']",
      "return_type": null
    },
    {
      "object": "BaseTable",
      "method": "set_column",
      "signature": "(column_name, values)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['column_name', 'values']",
      "return_type": null
    },
    {
      "object": "BaseTable",
      "method": "set_value",
      "signature": "(row, column_name, value)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['row', 'column_name', 'value']",
      "return_type": null
    },
    {
      "object": "BaseTable",
      "method": "set_values_by_mask",
      "signature": "(mask, column_name, value)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['mask', 'column_name', 'value']",
      "return_type": null
    },
    {
      "object": "BaseTable",
      "method": "set_values_by_range",
      "signature": "(start, end, column_name, value, step=1)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['start', 'end', 'column_name', 'value']",
      "return_type": null
    },
    {
      "object": "BaseTable",
      "method": "slice",
      "signature": "(start, end)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['start', 'end']",
      "return_type": null
    },
    {
      "object": "BaseTable",
      "method": "sort_by",
      "signature": "(column, ascending=True)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['column']",
      "return_type": null
    },
    {
      "object": "BaseTable",
      "method": "tail",
      "signature": "(n=5)",
      "requires_params": false,
      "status": "success",
      "result": "BaseTable[3 x 3]",
      "error": null,
      "return_type": "BaseTable"
    },
    {
      "object": "BaseTable",
      "method": "to_csv",
      "signature": "(path)",
      "requires_params": true,
      "status": "success_with_params",
      "result": "None",
      "error": null,
      "return_type": "NoneType",
      "test_params": "test_output.csv"
    },
    {
      "object": "BaseTable",
      "method": "to_json",
      "signature": "(path)",
      "requires_params": true,
      "status": "success_with_params",
      "result": "None",
      "error": null,
      "return_type": "NoneType",
      "test_params": "test_output.json"
    },
    {
      "object": "BaseTable",
      "method": "to_pandas",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "    type        name  node_id\n0   core       Graph        1\n1  table   BaseTable        2\n2  table  NodesTable        3",
      "error": null,
      "return_type": "DataFrame"
    },
    {
      "object": "BaseTable",
      "method": "to_parquet",
      "signature": "(path)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['path']",
      "return_type": null
    },
    {
      "object": "BaseTable",
      "method": "union",
      "signature": "(other)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['other']",
      "return_type": null
    },
    {
      "object": "NodesTable",
      "method": "base_table",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "BaseTable[3 x 3]",
      "error": null,
      "return_type": "BaseTable"
    },
    {
      "object": "NodesTable",
      "method": "drop_columns",
      "signature": "(columns)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['columns']",
      "return_type": null
    },
    {
      "object": "NodesTable",
      "method": "filter",
      "signature": "(predicate)",
      "requires_params": true,
      "status": "success_with_params",
      "result": "NodesTable[3 x 3]\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 node_id \u2502 type  \u2502 name       \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502       1 \u2502 core  \u2502 Graph      \u2502\n\u2502       2 \u2502 table \u2502 BaseTable  \u2502\n\u2502       3 \u2502 table",
      "error": null,
      "return_type": "NodesTable",
      "test_params": "<function APITestGenerator.try_method_with_common_params.<locals>.<lambda> at 0x106ed50d0>"
    },
    {
      "object": "NodesTable",
      "method": "filter_by_attr",
      "signature": "(attr_name, value)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['attr_name', 'value']",
      "return_type": null
    },
    {
      "object": "NodesTable",
      "method": "from_csv",
      "signature": "(path)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['path']",
      "return_type": null
    },
    {
      "object": "NodesTable",
      "method": "from_dict",
      "signature": "(data)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['data']",
      "return_type": null
    },
    {
      "object": "NodesTable",
      "method": "from_json",
      "signature": "(path)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['path']",
      "return_type": null
    },
    {
      "object": "NodesTable",
      "method": "from_parquet",
      "signature": "(path)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['path']",
      "return_type": null
    },
    {
      "object": "NodesTable",
      "method": "group_by",
      "signature": "(columns)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['columns']",
      "return_type": null
    },
    {
      "object": "NodesTable",
      "method": "head",
      "signature": "(n=5)",
      "requires_params": false,
      "status": "success",
      "result": "NodesTable[3 x 3]\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 node_id \u2502 type  \u2502 name       \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502       1 \u2502 core  \u2502 Graph      \u2502\n\u2502       2 \u2502 table \u2502 BaseTable  \u2502\n\u2502       3 \u2502 table",
      "error": null,
      "return_type": "NodesTable"
    },
    {
      "object": "NodesTable",
      "method": "interactive",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "http://127.0.0.1:62597",
      "error": null,
      "return_type": "str"
    },
    {
      "object": "NodesTable",
      "method": "interactive_embed",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "\n            <iframe \n                src=\"http://127.0.0.1:62598\" \n                width=\"100%\" \n                height=\"600px\" \n                frameborder=\"0\" \n                style=\"border: 1px so",
      "error": null,
      "return_type": "str"
    },
    {
      "object": "NodesTable",
      "method": "into_base_table",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "BaseTable[3 x 3]",
      "error": null,
      "return_type": "BaseTable"
    },
    {
      "object": "NodesTable",
      "method": "iter",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "<groggy.NodesTableIterator object at 0x11d6edbd0>",
      "error": null,
      "return_type": "NodesTableIterator"
    },
    {
      "object": "NodesTable",
      "method": "ncols",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "3",
      "error": null,
      "return_type": "int"
    },
    {
      "object": "NodesTable",
      "method": "node_ids",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "NumArray(dtype: int64)\n[  0] 1\n[  1] 2\n[  2] 3",
      "error": null,
      "return_type": "NumArray"
    },
    {
      "object": "NodesTable",
      "method": "nrows",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "3",
      "error": null,
      "return_type": "int"
    },
    {
      "object": "NodesTable",
      "method": "rich_display",
      "signature": "(config=None)",
      "requires_params": false,
      "status": "success",
      "result": "\u2296\u2296 gr.table\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 \u001b[1m                     #\u001b[0m \u2502 \u001b[1mnode_id                     ",
      "error": null,
      "return_type": "str"
    },
    {
      "object": "NodesTable",
      "method": "select",
      "signature": "(columns)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['columns']",
      "return_type": null
    },
    {
      "object": "NodesTable",
      "method": "shape",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "(3, 3)",
      "error": null,
      "return_type": "tuple"
    },
    {
      "object": "NodesTable",
      "method": "slice",
      "signature": "(start, end)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['start', 'end']",
      "return_type": null
    },
    {
      "object": "NodesTable",
      "method": "sort_by",
      "signature": "(column, ascending=True)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['column']",
      "return_type": null
    },
    {
      "object": "NodesTable",
      "method": "tail",
      "signature": "(n=5)",
      "requires_params": false,
      "status": "success",
      "result": "NodesTable[3 x 3]\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 node_id \u2502 type  \u2502 name       \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502       1 \u2502 core  \u2502 Graph      \u2502\n\u2502       2 \u2502 table \u2502 BaseTable  \u2502\n\u2502       3 \u2502 table",
      "error": null,
      "return_type": "NodesTable"
    },
    {
      "object": "NodesTable",
      "method": "to_csv",
      "signature": "(path)",
      "requires_params": true,
      "status": "success_with_params",
      "result": "None",
      "error": null,
      "return_type": "NoneType",
      "test_params": "test_output.csv"
    },
    {
      "object": "NodesTable",
      "method": "to_json",
      "signature": "(path)",
      "requires_params": true,
      "status": "success_with_params",
      "result": "None",
      "error": null,
      "return_type": "NoneType",
      "test_params": "test_output.json"
    },
    {
      "object": "NodesTable",
      "method": "to_pandas",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "   node_id   type        name\n0        1   core       Graph\n1        2  table   BaseTable\n2        3  table  NodesTable",
      "error": null,
      "return_type": "DataFrame"
    },
    {
      "object": "NodesTable",
      "method": "to_parquet",
      "signature": "(path)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['path']",
      "return_type": null
    },
    {
      "object": "NodesTable",
      "method": "unique_attr_values",
      "signature": "(attr_name)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['attr_name']",
      "return_type": null
    },
    {
      "object": "NodesTable",
      "method": "with_attributes",
      "signature": "(attr_name, attributes)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['attr_name', 'attributes']",
      "return_type": null
    },
    {
      "object": "EdgesTable",
      "method": "as_tuples",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "[(1, 1, 2), (2, 2, 3)]",
      "error": null,
      "return_type": "list"
    },
    {
      "object": "EdgesTable",
      "method": "auto_assign_edge_ids",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "EdgesTable[2 x 4]\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 source \u2502 edge_id \u2502 method \u2502 target \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502      1 \u2502       1 \u2502 table  \u2502      2 \u2502\n\u2502      2 \u2502       2 \u2502 head ",
      "error": null,
      "return_type": "EdgesTable"
    },
    {
      "object": "EdgesTable",
      "method": "base_table",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "BaseTable[2 x 4]",
      "error": null,
      "return_type": "BaseTable"
    },
    {
      "object": "EdgesTable",
      "method": "drop_columns",
      "signature": "(columns)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['columns']",
      "return_type": null
    },
    {
      "object": "EdgesTable",
      "method": "edge_ids",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "NumArray(dtype: float64)\n[  0] 1.000000\n[  1] 2.000000",
      "error": null,
      "return_type": "NumArray"
    },
    {
      "object": "EdgesTable",
      "method": "filter",
      "signature": "(predicate)",
      "requires_params": true,
      "status": "success_with_params",
      "result": "EdgesTable[2 x 4]\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 source \u2502 edge_id \u2502 method \u2502 target \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502      1 \u2502       1 \u2502 table  \u2502      2 \u2502\n\u2502      2 \u2502       2 \u2502 head ",
      "error": null,
      "return_type": "EdgesTable",
      "test_params": "<function APITestGenerator.try_method_with_common_params.<locals>.<lambda> at 0x106ed50d0>"
    },
    {
      "object": "EdgesTable",
      "method": "filter_by_attr",
      "signature": "(attr_name, value)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['attr_name', 'value']",
      "return_type": null
    },
    {
      "object": "EdgesTable",
      "method": "filter_by_sources",
      "signature": "(source_nodes)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['source_nodes']",
      "return_type": null
    },
    {
      "object": "EdgesTable",
      "method": "filter_by_targets",
      "signature": "(target_nodes)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['target_nodes']",
      "return_type": null
    },
    {
      "object": "EdgesTable",
      "method": "from_csv",
      "signature": "(path)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['path']",
      "return_type": null
    },
    {
      "object": "EdgesTable",
      "method": "from_dict",
      "signature": "(data)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['data']",
      "return_type": null
    },
    {
      "object": "EdgesTable",
      "method": "from_json",
      "signature": "(path)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['path']",
      "return_type": null
    },
    {
      "object": "EdgesTable",
      "method": "from_parquet",
      "signature": "(path)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['path']",
      "return_type": null
    },
    {
      "object": "EdgesTable",
      "method": "group_by",
      "signature": "(columns)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['columns']",
      "return_type": null
    },
    {
      "object": "EdgesTable",
      "method": "head",
      "signature": "(n=5)",
      "requires_params": false,
      "status": "success",
      "result": "EdgesTable[2 x 4]\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 source \u2502 edge_id \u2502 method \u2502 target \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502      1 \u2502       1 \u2502 table  \u2502      2 \u2502\n\u2502      2 \u2502       2 \u2502 head ",
      "error": null,
      "return_type": "EdgesTable"
    },
    {
      "object": "EdgesTable",
      "method": "interactive",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "http://127.0.0.1:62599",
      "error": null,
      "return_type": "str"
    },
    {
      "object": "EdgesTable",
      "method": "interactive_embed",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "\n            <iframe \n                src=\"http://127.0.0.1:62600\" \n                width=\"100%\" \n                height=\"600px\" \n                frameborder=\"0\" \n                style=\"border: 1px so",
      "error": null,
      "return_type": "str"
    },
    {
      "object": "EdgesTable",
      "method": "into_base_table",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "BaseTable[2 x 4]",
      "error": null,
      "return_type": "BaseTable"
    },
    {
      "object": "EdgesTable",
      "method": "iter",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "<groggy.EdgesTableIterator object at 0x13d6a1cc0>",
      "error": null,
      "return_type": "EdgesTableIterator"
    },
    {
      "object": "EdgesTable",
      "method": "ncols",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "4",
      "error": null,
      "return_type": "int"
    },
    {
      "object": "EdgesTable",
      "method": "nrows",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "2",
      "error": null,
      "return_type": "int"
    },
    {
      "object": "EdgesTable",
      "method": "rich_display",
      "signature": "(config=None)",
      "requires_params": false,
      "status": "success",
      "result": "\u2296\u2296 gr.table\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 \u001b[1m                #\u001b[0m \u2502 \u001b[1msource                \u001b[0m \u2502 \u001b[1m",
      "error": null,
      "return_type": "str"
    },
    {
      "object": "EdgesTable",
      "method": "select",
      "signature": "(columns)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['columns']",
      "return_type": null
    },
    {
      "object": "EdgesTable",
      "method": "shape",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "(2, 4)",
      "error": null,
      "return_type": "tuple"
    },
    {
      "object": "EdgesTable",
      "method": "slice",
      "signature": "(start, end)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['start', 'end']",
      "return_type": null
    },
    {
      "object": "EdgesTable",
      "method": "sort_by",
      "signature": "(column, ascending=True)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['column']",
      "return_type": null
    },
    {
      "object": "EdgesTable",
      "method": "sources",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "NumArray(dtype: float64)\n[  0] 1.000000\n[  1] 2.000000",
      "error": null,
      "return_type": "NumArray"
    },
    {
      "object": "EdgesTable",
      "method": "tail",
      "signature": "(n=5)",
      "requires_params": false,
      "status": "success",
      "result": "EdgesTable[2 x 4]\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 source \u2502 edge_id \u2502 method \u2502 target \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502      1 \u2502       1 \u2502 table  \u2502      2 \u2502\n\u2502      2 \u2502       2 \u2502 head ",
      "error": null,
      "return_type": "EdgesTable"
    },
    {
      "object": "EdgesTable",
      "method": "targets",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "NumArray(dtype: float64)\n[  0] 2.000000\n[  1] 3.000000",
      "error": null,
      "return_type": "NumArray"
    },
    {
      "object": "EdgesTable",
      "method": "to_csv",
      "signature": "(path)",
      "requires_params": true,
      "status": "success_with_params",
      "result": "None",
      "error": null,
      "return_type": "NoneType",
      "test_params": "test_output.csv"
    },
    {
      "object": "EdgesTable",
      "method": "to_json",
      "signature": "(path)",
      "requires_params": true,
      "status": "success_with_params",
      "result": "None",
      "error": null,
      "return_type": "NoneType",
      "test_params": "test_output.json"
    },
    {
      "object": "EdgesTable",
      "method": "to_pandas",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "   source  edge_id method  target\n0       1        1  table       2\n1       2        2   head       3",
      "error": null,
      "return_type": "DataFrame"
    },
    {
      "object": "EdgesTable",
      "method": "to_parquet",
      "signature": "(path)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['path']",
      "return_type": null
    },
    {
      "object": "EdgesTable",
      "method": "unique_attr_values",
      "signature": "(attr_name)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['attr_name']",
      "return_type": null
    },
    {
      "object": "GraphTable",
      "method": "auto_assign_edge_ids",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "GraphTable[3 nodes, 2 edges]\nValidation Policy: Standard\nNodes:\nNodesTable[3 x 3]\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 node_id \u2502 type  \u2502 name       \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502       1 \u2502 core  \u2502",
      "error": null,
      "return_type": "GraphTable"
    },
    {
      "object": "GraphTable",
      "method": "from_federated_bundles",
      "signature": "(bundle_paths, domain_names=None)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['bundle_paths']",
      "return_type": null
    },
    {
      "object": "GraphTable",
      "method": "get_bundle_info",
      "signature": "(bundle_path)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['bundle_path']",
      "return_type": null
    },
    {
      "object": "GraphTable",
      "method": "head",
      "signature": "(n=5)",
      "requires_params": false,
      "status": "success",
      "result": "GraphTable[3 nodes, 2 edges]\nValidation Policy: Standard\nNodes:\nNodesTable[3 x 3]\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 node_id \u2502 type  \u2502 name       \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502       1 \u2502 core  \u2502",
      "error": null,
      "return_type": "GraphTable"
    },
    {
      "object": "GraphTable",
      "method": "load_bundle",
      "signature": "(bundle_path)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['bundle_path']",
      "return_type": null
    },
    {
      "object": "GraphTable",
      "method": "merge",
      "signature": "(tables)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['tables']",
      "return_type": null
    },
    {
      "object": "GraphTable",
      "method": "merge_with",
      "signature": "(other, strategy)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['other', 'strategy']",
      "return_type": null
    },
    {
      "object": "GraphTable",
      "method": "merge_with_strategy",
      "signature": "(tables, strategy)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['tables', 'strategy']",
      "return_type": null
    },
    {
      "object": "GraphTable",
      "method": "ncols",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "7",
      "error": null,
      "return_type": "int"
    },
    {
      "object": "GraphTable",
      "method": "nrows",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "5",
      "error": null,
      "return_type": "int"
    },
    {
      "object": "GraphTable",
      "method": "save_bundle",
      "signature": "(bundle_path)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['bundle_path']",
      "return_type": null
    },
    {
      "object": "GraphTable",
      "method": "shape",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "(3, 3)",
      "error": null,
      "return_type": "tuple"
    },
    {
      "object": "GraphTable",
      "method": "stats",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "{'self_loops': 0, 'total_edges': 2, 'edge_columns': 4, 'unique_targets': 2, 'unique_sources': 2, 'total_columns': 4, 'total_nodes': 3, 'node_columns': 3}",
      "error": null,
      "return_type": "dict"
    },
    {
      "object": "GraphTable",
      "method": "tail",
      "signature": "(n=5)",
      "requires_params": false,
      "status": "success",
      "result": "GraphTable[3 nodes, 2 edges]\nValidation Policy: Standard\nNodes:\nNodesTable[3 x 3]\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 node_id \u2502 type  \u2502 name       \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502       1 \u2502 core  \u2502",
      "error": null,
      "return_type": "GraphTable"
    },
    {
      "object": "GraphTable",
      "method": "to_edges",
      "signature": "()",
      "requires_params": false,
      "status": "error",
      "result": null,
      "error": "GraphTable to EdgesAccessor conversion not yet implemented. Use .edges() property instead.",
      "return_type": null
    },
    {
      "object": "GraphTable",
      "method": "to_graph",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "Graph(nodes=3, edges=2)",
      "error": null,
      "return_type": "Graph"
    },
    {
      "object": "GraphTable",
      "method": "to_nodes",
      "signature": "()",
      "requires_params": false,
      "status": "error",
      "result": null,
      "error": "GraphTable to NodesAccessor conversion not yet implemented. Use .nodes() property instead.",
      "return_type": null
    },
    {
      "object": "GraphTable",
      "method": "to_subgraphs",
      "signature": "()",
      "requires_params": false,
      "status": "error",
      "result": null,
      "error": "GraphTable to SubgraphArray conversion not yet implemented.",
      "return_type": null
    },
    {
      "object": "GraphTable",
      "method": "validate",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "ValidationReport { errors: [], warnings: [], info: [\"Node UIDs validation passed\", \"Edge validation passed\", \"Edge node reference validation passed\"], stats: {\"total_nodes\": 3, \"total_edges\": 2} }",
      "error": null,
      "return_type": "str"
    },
    {
      "object": "GraphTable",
      "method": "verify_bundle",
      "signature": "(bundle_path)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['bundle_path']",
      "return_type": null
    },
    {
      "object": "BaseArray",
      "method": "apply_to_each",
      "signature": "(method_name, args)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['method_name', 'args']",
      "return_type": null
    },
    {
      "object": "BaseArray",
      "method": "astype",
      "signature": "(dtype)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['dtype']",
      "return_type": null
    },
    {
      "object": "BaseArray",
      "method": "describe",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "{'count': 5, 'non_null': 5, 'null': 0, 'unique': 5, 'dtype': 'Int'}",
      "error": null,
      "return_type": "dict"
    },
    {
      "object": "BaseArray",
      "method": "dtype",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "Int",
      "error": null,
      "return_type": "str"
    },
    {
      "object": "BaseArray",
      "method": "head",
      "signature": "(n)",
      "requires_params": true,
      "status": "success_with_params",
      "result": "BaseArray[5] [1, 2, 3, ...] (dtype: Int)\n\ud83d\udca1 Use .interactive() for rich table view or .interactive_embed() for Jupyter",
      "error": null,
      "return_type": "BaseArray",
      "test_params": "5"
    },
    {
      "object": "BaseArray",
      "method": "infer_numeric_type",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "Int64",
      "error": null,
      "return_type": "str"
    },
    {
      "object": "BaseArray",
      "method": "interactive",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "http://127.0.0.1:62601",
      "error": null,
      "return_type": "str"
    },
    {
      "object": "BaseArray",
      "method": "interactive_embed",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "<iframe src=\"http://127.0.0.1:62602\" width=\"100%\" height=\"420\" style=\"border:0;border-radius:12px;\"></iframe>",
      "error": null,
      "return_type": "str"
    },
    {
      "object": "BaseArray",
      "method": "is_numeric",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "True",
      "error": null,
      "return_type": "bool"
    },
    {
      "object": "BaseArray",
      "method": "iter",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "<builtins.BaseArrayIterator object at 0x106f050b0>",
      "error": null,
      "return_type": "BaseArrayIterator"
    },
    {
      "object": "BaseArray",
      "method": "numeric_compatibility_info",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "{'is_numeric': True, 'total_count': 5, 'numeric_count': 5, 'null_count': 0, 'numeric_percentage': 100.0, 'type_counts': {'int64': 5}, 'inferred_numeric_type': 'Int64', 'recommended_conversion': 'to_nu",
      "error": null,
      "return_type": "dict"
    },
    {
      "object": "BaseArray",
      "method": "tail",
      "signature": "(n)",
      "requires_params": true,
      "status": "success_with_params",
      "result": "BaseArray[5] [1, 2, 3, ...] (dtype: Int)\n\ud83d\udca1 Use .interactive() for rich table view or .interactive_embed() for Jupyter",
      "error": null,
      "return_type": "BaseArray",
      "test_params": "5"
    },
    {
      "object": "BaseArray",
      "method": "to_num_array",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "NumArray(dtype: int64)\n[  0] 1\n[  1] 2\n[  2] 3\n[  3] 4\n[  4] 5",
      "error": null,
      "return_type": "NumArray"
    },
    {
      "object": "BaseArray",
      "method": "to_table",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "BaseTable[5 x 2]",
      "error": null,
      "return_type": "BaseTable"
    },
    {
      "object": "BaseArray",
      "method": "unique",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "BaseArray[5] [1, 2, 3, ...] (dtype: Int)\n\ud83d\udca1 Use .interactive() for rich table view or .interactive_embed() for Jupyter",
      "error": null,
      "return_type": "BaseArray"
    },
    {
      "object": "Graph",
      "method": "add_edge",
      "signature": "(source, target, uid_key=None, **kwargs)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['source', 'target', 'kwargs']",
      "return_type": null
    },
    {
      "object": "Graph",
      "method": "add_edges",
      "signature": "(edges, node_mapping=None, _uid_key=None, warm_cache=None)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['edges']",
      "return_type": null
    },
    {
      "object": "Graph",
      "method": "add_graph",
      "signature": "(other)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['other']",
      "return_type": null
    },
    {
      "object": "Graph",
      "method": "add_node",
      "signature": "(node_id=None, **kwargs)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['kwargs']",
      "return_type": null
    },
    {
      "object": "Graph",
      "method": "add_nodes",
      "signature": "(data, uid_key=None)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['data']",
      "return_type": null
    },
    {
      "object": "Graph",
      "method": "aggregate",
      "signature": "(attribute, operation, target=None, _node_ids=None)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['attribute', 'operation']",
      "return_type": null
    },
    {
      "object": "Graph",
      "method": "all_edge_attribute_names",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "['method']",
      "error": null,
      "return_type": "list"
    },
    {
      "object": "Graph",
      "method": "all_node_attribute_names",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "['type', 'name']",
      "error": null,
      "return_type": "list"
    },
    {
      "object": "Graph",
      "method": "bfs",
      "signature": "(start, max_depth=None, inplace=None, attr_name=None)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['start']",
      "return_type": null
    },
    {
      "object": "Graph",
      "method": "branches",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "[BranchInfo(name='main', head=0, current=true)]",
      "error": null,
      "return_type": "list"
    },
    {
      "object": "Graph",
      "method": "checkout_branch",
      "signature": "(branch_name)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['branch_name']",
      "return_type": null
    },
    {
      "object": "Graph",
      "method": "commit",
      "signature": "(message, author)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['message', 'author']",
      "return_type": null
    },
    {
      "object": "Graph",
      "method": "commit_history",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "[]",
      "error": null,
      "return_type": "list"
    },
    {
      "object": "Graph",
      "method": "contains_edge",
      "signature": "(edge)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['edge']",
      "return_type": null
    },
    {
      "object": "Graph",
      "method": "contains_node",
      "signature": "(node)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['node']",
      "return_type": null
    },
    {
      "object": "Graph",
      "method": "create_branch",
      "signature": "(branch_name)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['branch_name']",
      "return_type": null
    },
    {
      "object": "Graph",
      "method": "density",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "0.6666666666666666",
      "error": null,
      "return_type": "float"
    },
    {
      "object": "Graph",
      "method": "dfs",
      "signature": "(start, max_depth=None, inplace=None, attr_name=None)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['start']",
      "return_type": null
    },
    {
      "object": "Graph",
      "method": "edge_attribute_keys",
      "signature": "(edge_id)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['edge_id']",
      "return_type": null
    },
    {
      "object": "Graph",
      "method": "edge_count",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "2",
      "error": null,
      "return_type": "int"
    },
    {
      "object": "Graph",
      "method": "edge_endpoints",
      "signature": "(edge)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['edge']",
      "return_type": null
    },
    {
      "object": "Graph",
      "method": "filter_edges",
      "signature": "(filter)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['filter']",
      "return_type": null
    },
    {
      "object": "Graph",
      "method": "filter_nodes",
      "signature": "(filter)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['filter']",
      "return_type": null
    },
    {
      "object": "Graph",
      "method": "get_edge_attr",
      "signature": "(edge, attr, default=None)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['edge', 'attr']",
      "return_type": null
    },
    {
      "object": "Graph",
      "method": "get_edge_attrs",
      "signature": "(edges, attrs)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['edges', 'attrs']",
      "return_type": null
    },
    {
      "object": "Graph",
      "method": "get_node_attr",
      "signature": "(node, attr, default=None)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['node', 'attr']",
      "return_type": null
    },
    {
      "object": "Graph",
      "method": "get_node_attrs",
      "signature": "(nodes, attrs)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['nodes', 'attrs']",
      "return_type": null
    },
    {
      "object": "Graph",
      "method": "get_node_mapping",
      "signature": "(uid_key, return_inverse=False)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['uid_key']",
      "return_type": null
    },
    {
      "object": "Graph",
      "method": "group_by",
      "signature": "(attribute, aggregation_attr, operation)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['attribute', 'aggregation_attr', 'operation']",
      "return_type": null
    },
    {
      "object": "Graph",
      "method": "group_nodes_by_attribute",
      "signature": "(attribute, aggregation_attr, operation)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['attribute', 'aggregation_attr', 'operation']",
      "return_type": null
    },
    {
      "object": "Graph",
      "method": "has_edge",
      "signature": "(edge_id)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['edge_id']",
      "return_type": null
    },
    {
      "object": "Graph",
      "method": "has_edge_attribute",
      "signature": "(edge_id, attr_name)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['edge_id', 'attr_name']",
      "return_type": null
    },
    {
      "object": "Graph",
      "method": "has_node",
      "signature": "(node_id)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['node_id']",
      "return_type": null
    },
    {
      "object": "Graph",
      "method": "has_node_attribute",
      "signature": "(node_id, attr_name)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['node_id', 'attr_name']",
      "return_type": null
    },
    {
      "object": "Graph",
      "method": "has_uncommitted_changes",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "True",
      "error": null,
      "return_type": "bool"
    },
    {
      "object": "Graph",
      "method": "historical_view",
      "signature": "(commit_id)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['commit_id']",
      "return_type": null
    },
    {
      "object": "Graph",
      "method": "is_connected",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "True",
      "error": null,
      "return_type": "bool"
    },
    {
      "object": "Graph",
      "method": "laplacian_matrix",
      "signature": "(normalized=None)",
      "requires_params": false,
      "status": "success",
      "result": "GraphMatrix(shape=(3, 3), dtype=f64)\n[[   1.000     0.000    -1.000]\n [   0.000     1.000    -1.000]\n [  -1.000    -1.000     2.000]]",
      "error": null,
      "return_type": "GraphMatrix"
    },
    {
      "object": "Graph",
      "method": "neighborhood",
      "signature": "(center_nodes, radius=None, max_nodes=None)",
      "requires_params": true,
      "status": "success_with_params",
      "result": "NeighborhoodResult(1 neighborhoods, largest_size=3, time=0.00ms)",
      "error": null,
      "return_type": "NeighborhoodResult",
      "test_params": "1"
    },
    {
      "object": "Graph",
      "method": "neighborhood_statistics",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "NeighborhoodStats(neighborhoods=1, nodes=3, time=0.01ms, avg=3.0 nodes/nbh)",
      "error": null,
      "return_type": "NeighborhoodStats"
    },
    {
      "object": "Graph",
      "method": "neighbors",
      "signature": "(nodes=None)",
      "requires_params": false,
      "status": "error",
      "result": null,
      "error": "nodes parameter is required",
      "return_type": null
    },
    {
      "object": "Graph",
      "method": "node_attribute_keys",
      "signature": "(node_id)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['node_id']",
      "return_type": null
    },
    {
      "object": "Graph",
      "method": "node_count",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "3",
      "error": null,
      "return_type": "int"
    },
    {
      "object": "Graph",
      "method": "remove_edge",
      "signature": "(edge)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['edge']",
      "return_type": null
    },
    {
      "object": "Graph",
      "method": "remove_edges",
      "signature": "(edges)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['edges']",
      "return_type": null
    },
    {
      "object": "Graph",
      "method": "remove_node",
      "signature": "(node)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['node']",
      "return_type": null
    },
    {
      "object": "Graph",
      "method": "remove_nodes",
      "signature": "(nodes)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['nodes']",
      "return_type": null
    },
    {
      "object": "Graph",
      "method": "resolve_string_id_to_node",
      "signature": "(string_id, uid_key)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['string_id', 'uid_key']",
      "return_type": null
    },
    {
      "object": "Graph",
      "method": "set_edge_attr",
      "signature": "(edge, attr, value)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['edge', 'attr', 'value']",
      "return_type": null
    },
    {
      "object": "Graph",
      "method": "set_edge_attrs",
      "signature": "(attrs_dict)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['attrs_dict']",
      "return_type": null
    },
    {
      "object": "Graph",
      "method": "set_node_attr",
      "signature": "(node, attr, value)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['node', 'attr', 'value']",
      "return_type": null
    },
    {
      "object": "Graph",
      "method": "set_node_attrs",
      "signature": "(attrs_dict)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['attrs_dict']",
      "return_type": null
    },
    {
      "object": "Graph",
      "method": "shortest_path",
      "signature": "(source, target, weight_attribute=None, inplace=None, attr_name=None)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['source', 'target']",
      "return_type": null
    },
    {
      "object": "Graph",
      "method": "table",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "GraphTable[3 nodes, 2 edges]\nValidation Policy: Standard\nNodes:\nNodesTable[3 x 3]\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 node_id \u2502 type  \u2502 name       \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502       0 \u2502 core  \u2502",
      "error": null,
      "return_type": "GraphTable"
    },
    {
      "object": "Graph",
      "method": "to_matrix",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "GraphMatrix(shape=(1, 1), dtype=f64)\n[[   0.000]]",
      "error": null,
      "return_type": "GraphMatrix"
    },
    {
      "object": "Graph",
      "method": "to_networkx",
      "signature": "(directed: bool = False, include_attributes: bool = True)",
      "requires_params": false,
      "status": "success",
      "result": "Graph with 3 nodes and 2 edges",
      "error": null,
      "return_type": "Graph"
    },
    {
      "object": "Graph",
      "method": "transition_matrix",
      "signature": "()",
      "requires_params": false,
      "status": "error",
      "result": null,
      "error": "transition_matrix needs to be implemented in core first",
      "return_type": null
    },
    {
      "object": "Graph",
      "method": "view",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "Subgraph with 3 nodes and 2 edges\n\nEdges:\n  ID    Source \u2192 Target\n  ----  ---------------\n     1       1 \u2192 2\n     0       0 \u2192 1",
      "error": null,
      "return_type": "Subgraph"
    },
    {
      "object": "Nodes",
      "method": "all",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "Subgraph with 3 nodes and 2 edges\n\nEdges:\n  ID    Source \u2192 Target\n  ----  ---------------\n     1       1 \u2192 2\n     0       0 \u2192 1",
      "error": null,
      "return_type": "Subgraph"
    },
    {
      "object": "Nodes",
      "method": "array",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "NodesArray[1 accessors, 3 total nodes]",
      "error": null,
      "return_type": "NodesArray"
    },
    {
      "object": "Nodes",
      "method": "get_meta_node",
      "signature": "(node_id)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['node_id']",
      "return_type": null
    },
    {
      "object": "Nodes",
      "method": "ids",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "NumArray(dtype: int64)\n[  0] 0\n[  1] 2\n[  2] 1",
      "error": null,
      "return_type": "NumArray"
    },
    {
      "object": "Nodes",
      "method": "matrix",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "GraphMatrix(shape=(1, 1), dtype=f64)\n[[   0.000]]",
      "error": null,
      "return_type": "GraphMatrix"
    },
    {
      "object": "Nodes",
      "method": "set_attrs",
      "signature": "(attrs_dict)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['attrs_dict']",
      "return_type": null
    },
    {
      "object": "Nodes",
      "method": "table",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "NodesTable[3 x 3]\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 node_id \u2502 name       \u2502 type  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502       0 \u2502 Graph      \u2502 core  \u2502\n\u2502       2 \u2502 NodesTable \u2502 table \u2502\n\u2502       1 \u2502 BaseT",
      "error": null,
      "return_type": "NodesTable"
    },
    {
      "object": "Edges",
      "method": "all",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "Subgraph with 3 nodes and 2 edges\n\nEdges:\n  ID    Source \u2192 Target\n  ----  ---------------\n     0       0 \u2192 1\n     1       1 \u2192 2",
      "error": null,
      "return_type": "Subgraph"
    },
    {
      "object": "Edges",
      "method": "ids",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "NumArray(dtype: float64)\n[  0] 1.000000\n[  1] 0.000000",
      "error": null,
      "return_type": "NumArray"
    },
    {
      "object": "Edges",
      "method": "matrix",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "GraphMatrix(shape=(3, 3), dtype=f64)\n[[   0.000     0.000     1.000]\n [   0.000     0.000     1.000]\n [   1.000     1.000     0.000]]",
      "error": null,
      "return_type": "GraphMatrix"
    },
    {
      "object": "Edges",
      "method": "set_attrs",
      "signature": "(attrs_dict)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['attrs_dict']",
      "return_type": null
    },
    {
      "object": "Edges",
      "method": "table",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "EdgesTable[2 x 4]\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 edge_id \u2502 source \u2502 target \u2502 method \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502       1 \u2502      1 \u2502      2 \u2502 head   \u2502\n\u2502       0 \u2502      0 \u2502      ",
      "error": null,
      "return_type": "EdgesTable"
    },
    {
      "object": "Edges",
      "method": "weight_matrix",
      "signature": "(attr_name=None)",
      "requires_params": false,
      "status": "success",
      "result": "GraphMatrix(shape=(3, 3), dtype=f64)\n[[   0.000     0.000     1.000]\n [   0.000     0.000     1.000]\n [   1.000     1.000     0.000]]",
      "error": null,
      "return_type": "GraphMatrix"
    },
    {
      "object": "ComponentsArray",
      "method": "filter",
      "signature": "(predicate)",
      "requires_params": true,
      "status": "success_with_params",
      "result": "ComponentsArray(1 components)",
      "error": null,
      "return_type": "ComponentsArray",
      "test_params": "<function APITestGenerator.try_method_with_common_params.<locals>.<lambda> at 0x106ed5160>"
    },
    {
      "object": "ComponentsArray",
      "method": "largest_component",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "Subgraph with 3 nodes and 2 edges\n\nEdges:\n  ID    Source \u2192 Target\n  ----  ---------------\n     1       1 \u2192 2\n     0       0 \u2192 1",
      "error": null,
      "return_type": "Subgraph"
    },
    {
      "object": "ComponentsArray",
      "method": "neighborhood",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "SubgraphArray(1 subgraphs)",
      "error": null,
      "return_type": "SubgraphArray"
    },
    {
      "object": "ComponentsArray",
      "method": "sample",
      "signature": "(k)",
      "requires_params": true,
      "status": "success_with_params",
      "result": "SubgraphArray(1 subgraphs)",
      "error": null,
      "return_type": "SubgraphArray",
      "test_params": "3"
    },
    {
      "object": "ComponentsArray",
      "method": "sizes",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "[(3, 2)]",
      "error": null,
      "return_type": "list"
    },
    {
      "object": "ComponentsArray",
      "method": "table",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "TableArray(1 tables)",
      "error": null,
      "return_type": "TableArray"
    },
    {
      "object": "ComponentsArray",
      "method": "to_list",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "[Subgraph(nodes=3, edges=2)]",
      "error": null,
      "return_type": "list"
    },
    {
      "object": "Subgraph",
      "method": "adj",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "GraphMatrix(shape=(3, 3), dtype=f64)\n[[   0.000     1.000     0.000]\n [   1.000     0.000     1.000]\n [   0.000     1.000     0.000]]",
      "error": null,
      "return_type": "GraphMatrix"
    },
    {
      "object": "Subgraph",
      "method": "adjacency_list",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "{2: [1], 1: [2, 0], 0: [1]}",
      "error": null,
      "return_type": "dict"
    },
    {
      "object": "Subgraph",
      "method": "adjacency_matrix",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "GraphMatrix(shape=(3, 3), dtype=f64)\n[[   0.000     1.000     0.000]\n [   1.000     0.000     1.000]\n [   0.000     1.000     0.000]]",
      "error": null,
      "return_type": "GraphMatrix"
    },
    {
      "object": "Subgraph",
      "method": "bfs",
      "signature": "(start, max_depth=None)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['start']",
      "return_type": null
    },
    {
      "object": "Subgraph",
      "method": "calculate_similarity",
      "signature": "(other, metric='jaccard')",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['other']",
      "return_type": null
    },
    {
      "object": "Subgraph",
      "method": "child_meta_nodes",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "[]",
      "error": null,
      "return_type": "list"
    },
    {
      "object": "Subgraph",
      "method": "clustering_coefficient",
      "signature": "(_node_id=None)",
      "requires_params": false,
      "status": "error",
      "result": null,
      "error": "Clustering coefficient not yet implemented in core - coming in future version",
      "return_type": null
    },
    {
      "object": "Subgraph",
      "method": "collapse",
      "signature": "(node_aggs=None, edge_aggs=None, edge_strategy='aggregate', node_strategy='extract', preset=None, include_edge_count=True, mark_entity_type=True, entity_type='meta', allow_missing_attributes=True)",
      "requires_params": false,
      "status": "success",
      "result": "MetaNode(id=3, degree=0, subgraph_id=Some(7283313709374817673)) ",
      "error": null,
      "return_type": "MetaNode"
    },
    {
      "object": "Subgraph",
      "method": "collapse_to_node",
      "signature": "(agg_functions)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['agg_functions']",
      "return_type": null
    },
    {
      "object": "Subgraph",
      "method": "collapse_to_node_with_defaults",
      "signature": "(agg_functions, defaults=None)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['agg_functions']",
      "return_type": null
    },
    {
      "object": "Subgraph",
      "method": "connected_components",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "ComponentsArray(1 components)",
      "error": null,
      "return_type": "ComponentsArray"
    },
    {
      "object": "Subgraph",
      "method": "contains_edge",
      "signature": "(edge_id)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['edge_id']",
      "return_type": null
    },
    {
      "object": "Subgraph",
      "method": "contains_node",
      "signature": "(node_id)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['node_id']",
      "return_type": null
    },
    {
      "object": "Subgraph",
      "method": "degree",
      "signature": "(nodes=None, *, full_graph=False)",
      "requires_params": false,
      "status": "success",
      "result": "NumArray(dtype: int32)\n[  0] 1\n[  1] 2\n[  2] 1",
      "error": null,
      "return_type": "NumArray"
    },
    {
      "object": "Subgraph",
      "method": "density",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "0.6666666666666666",
      "error": null,
      "return_type": "float"
    },
    {
      "object": "Subgraph",
      "method": "dfs",
      "signature": "(start, max_depth=None)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['start']",
      "return_type": null
    },
    {
      "object": "Subgraph",
      "method": "edge_count",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "2",
      "error": null,
      "return_type": "int"
    },
    {
      "object": "Subgraph",
      "method": "edge_endpoints",
      "signature": "(edge_id)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['edge_id']",
      "return_type": null
    },
    {
      "object": "Subgraph",
      "method": "edges_table",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "EdgesTable[2 x 4]\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 edge_id \u2502 source \u2502 method \u2502 target \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502       1 \u2502      1 \u2502 head   \u2502      2 \u2502\n\u2502       0 \u2502      0 \u2502 table",
      "error": null,
      "return_type": "EdgesTable"
    },
    {
      "object": "Subgraph",
      "method": "entity_type",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "Subgraph",
      "error": null,
      "return_type": "str"
    },
    {
      "object": "Subgraph",
      "method": "filter_edges",
      "signature": "(filter)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['filter']",
      "return_type": null
    },
    {
      "object": "Subgraph",
      "method": "filter_nodes",
      "signature": "(filter)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['filter']",
      "return_type": null
    },
    {
      "object": "Subgraph",
      "method": "get_edge_attribute",
      "signature": "(edge_id, attr_name)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['edge_id', 'attr_name']",
      "return_type": null
    },
    {
      "object": "Subgraph",
      "method": "get_node_attribute",
      "signature": "(node_id, attr_name)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['node_id', 'attr_name']",
      "return_type": null
    },
    {
      "object": "Subgraph",
      "method": "has_edge",
      "signature": "(edge_id)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['edge_id']",
      "return_type": null
    },
    {
      "object": "Subgraph",
      "method": "has_edge_between",
      "signature": "(source, target)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['source', 'target']",
      "return_type": null
    },
    {
      "object": "Subgraph",
      "method": "has_meta_nodes",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "False",
      "error": null,
      "return_type": "bool"
    },
    {
      "object": "Subgraph",
      "method": "has_node",
      "signature": "(node_id)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['node_id']",
      "return_type": null
    },
    {
      "object": "Subgraph",
      "method": "has_path",
      "signature": "(node1_id, node2_id)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['node1_id', 'node2_id']",
      "return_type": null
    },
    {
      "object": "Subgraph",
      "method": "in_degree",
      "signature": "(nodes=None, full_graph=False)",
      "requires_params": false,
      "status": "success",
      "result": "NumArray(dtype: int32)\n[  0] 1\n[  1] 1\n[  2] 0",
      "error": null,
      "return_type": "NumArray"
    },
    {
      "object": "Subgraph",
      "method": "induced_subgraph",
      "signature": "(nodes)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['nodes']",
      "return_type": null
    },
    {
      "object": "Subgraph",
      "method": "intersect_with",
      "signature": "(_other)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['_other']",
      "return_type": null
    },
    {
      "object": "Subgraph",
      "method": "is_connected",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "True",
      "error": null,
      "return_type": "bool"
    },
    {
      "object": "Subgraph",
      "method": "is_empty",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "False",
      "error": null,
      "return_type": "bool"
    },
    {
      "object": "Subgraph",
      "method": "merge_with",
      "signature": "(_other)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['_other']",
      "return_type": null
    },
    {
      "object": "Subgraph",
      "method": "meta_nodes",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "[]",
      "error": null,
      "return_type": "list"
    },
    {
      "object": "Subgraph",
      "method": "neighborhood",
      "signature": "(central_nodes, hops)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['central_nodes', 'hops']",
      "return_type": null
    },
    {
      "object": "Subgraph",
      "method": "neighbors",
      "signature": "(node_id)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['node_id']",
      "return_type": null
    },
    {
      "object": "Subgraph",
      "method": "node_count",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "3",
      "error": null,
      "return_type": "int"
    },
    {
      "object": "Subgraph",
      "method": "out_degree",
      "signature": "(nodes=None, full_graph=False)",
      "requires_params": false,
      "status": "success",
      "result": "NumArray(dtype: int32)\n[  0] 0\n[  1] 1\n[  2] 1",
      "error": null,
      "return_type": "NumArray"
    },
    {
      "object": "Subgraph",
      "method": "parent_meta_node",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "None",
      "error": null,
      "return_type": "NoneType"
    },
    {
      "object": "Subgraph",
      "method": "sample",
      "signature": "(k)",
      "requires_params": true,
      "status": "success_with_params",
      "result": "Subgraph with 3 nodes and 2 edges\n\nEdges:\n  ID    Source \u2192 Target\n  ----  ---------------\n     1       1 \u2192 2\n     0       0 \u2192 1",
      "error": null,
      "return_type": "Subgraph",
      "test_params": "3"
    },
    {
      "object": "Subgraph",
      "method": "set_edge_attrs",
      "signature": "(attrs_dict)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['attrs_dict']",
      "return_type": null
    },
    {
      "object": "Subgraph",
      "method": "set_node_attrs",
      "signature": "(attrs_dict)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['attrs_dict']",
      "return_type": null
    },
    {
      "object": "Subgraph",
      "method": "shortest_path_subgraph",
      "signature": "(source, target)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['source', 'target']",
      "return_type": null
    },
    {
      "object": "Subgraph",
      "method": "subgraph_from_edges",
      "signature": "(edges)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['edges']",
      "return_type": null
    },
    {
      "object": "Subgraph",
      "method": "subtract_from",
      "signature": "(_other)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['_other']",
      "return_type": null
    },
    {
      "object": "Subgraph",
      "method": "summary",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "Subgraph: 3 nodes, 2 edges, density: 0.667",
      "error": null,
      "return_type": "str"
    },
    {
      "object": "Subgraph",
      "method": "table",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "NodesTable[3 x 4]\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 type  \u2502 node_id \u2502 entity_type \u2502 name       \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 table \u2502       2 \u2502 base        \u2502 NodesTa",
      "error": null,
      "return_type": "NodesTable"
    },
    {
      "object": "Subgraph",
      "method": "to_edges",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "EdgesAccessor(2 edges)",
      "error": null,
      "return_type": "EdgesAccessor"
    },
    {
      "object": "Subgraph",
      "method": "to_graph",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "Graph(nodes=0, edges=0)",
      "error": null,
      "return_type": "Graph"
    },
    {
      "object": "Subgraph",
      "method": "to_matrix",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "GraphMatrix(shape=(3, 3), dtype=f64)\n[[   0.000     1.000     0.000]\n [   1.000     0.000     1.000]\n [   0.000     1.000     0.000]]",
      "error": null,
      "return_type": "GraphMatrix"
    },
    {
      "object": "Subgraph",
      "method": "to_networkx",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "Graph with 3 nodes and 2 edges",
      "error": null,
      "return_type": "Graph"
    },
    {
      "object": "Subgraph",
      "method": "to_nodes",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "NodesAccessor(4 nodes)",
      "error": null,
      "return_type": "NodesAccessor"
    },
    {
      "object": "Subgraph",
      "method": "transitivity",
      "signature": "()",
      "requires_params": false,
      "status": "error",
      "result": null,
      "error": "Transitivity not yet implemented in core - coming in future version",
      "return_type": null
    },
    {
      "object": "Matrix",
      "method": "abs",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "GraphMatrix(shape=(3, 3), dtype=f64)\n[[   0.000     1.000     0.000]\n [   1.000     0.000     1.000]\n [   0.000     1.000     0.000]]",
      "error": null,
      "return_type": "GraphMatrix"
    },
    {
      "object": "Matrix",
      "method": "apply",
      "signature": "(func)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['func']",
      "return_type": null
    },
    {
      "object": "Matrix",
      "method": "backward",
      "signature": "()",
      "requires_params": false,
      "status": "error",
      "result": null,
      "error": "Backward pass failed: InvalidInput(\"No computation graph available for gradient computation\")",
      "return_type": null
    },
    {
      "object": "Matrix",
      "method": "cholesky_decomposition",
      "signature": "()",
      "requires_params": false,
      "status": "error",
      "result": null,
      "error": "Cholesky decomposition failed: InvalidInput(\"Matrix is not positive definite\")",
      "return_type": null
    },
    {
      "object": "Matrix",
      "method": "concatenate",
      "signature": "(other, axis)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['other', 'axis']",
      "return_type": null
    },
    {
      "object": "Matrix",
      "method": "dense",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "GraphMatrix(shape=(3, 3), dtype=f64)\n[[   0.000     1.000     0.000]\n [   1.000     0.000     1.000]\n [   0.000     1.000     0.000]]",
      "error": null,
      "return_type": "GraphMatrix"
    },
    {
      "object": "Matrix",
      "method": "dense_html_repr",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "<div class=\"groggy-matrix-container\"><table class=\"groggy-matrix-table\"><tbody><tr><td class=\"matrix-cell\">0.0</td><td class=\"matrix-cell\">1.0</td><td class=\"matrix-cell\">0.0</td></tr><tr><td class=\"m",
      "error": null,
      "return_type": "str"
    },
    {
      "object": "Matrix",
      "method": "determinant",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "0.0",
      "error": null,
      "return_type": "float"
    },
    {
      "object": "Matrix",
      "method": "dropout",
      "signature": "(p, training=None)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['p']",
      "return_type": null
    },
    {
      "object": "Matrix",
      "method": "eigenvalue_decomposition",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "([1.3333333333333335, 0.0, 0.0], GraphMatrix(shape=(3, 3), dtype=f64)\n[[   0.577     0.000     0.000]\n [   0.577     1.000     0.000]\n [   0.577     0.000     1.000]])",
      "error": null,
      "return_type": "tuple"
    },
    {
      "object": "Matrix",
      "method": "elementwise_multiply",
      "signature": "(other)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['other']",
      "return_type": null
    },
    {
      "object": "Matrix",
      "method": "elu",
      "signature": "(alpha=None)",
      "requires_params": false,
      "status": "success",
      "result": "GraphMatrix(shape=(3, 3), dtype=f64)\n[[   0.000     1.000     0.000]\n [   1.000     0.000     1.000]\n [   0.000     1.000     0.000]]",
      "error": null,
      "return_type": "GraphMatrix"
    },
    {
      "object": "Matrix",
      "method": "exp",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "GraphMatrix(shape=(3, 3), dtype=f64)\n[[   1.000     2.718     1.000]\n [   2.718     1.000     2.718]\n [   1.000     2.718     1.000]]",
      "error": null,
      "return_type": "GraphMatrix"
    },
    {
      "object": "Matrix",
      "method": "filter",
      "signature": "(condition)",
      "requires_params": true,
      "status": "success_with_params",
      "result": "GraphMatrix(shape=(3, 3), dtype=f64)\n[[   0.000     1.000     0.000]\n [   1.000     0.000     1.000]\n [   0.000     1.000     0.000]]",
      "error": null,
      "return_type": "GraphMatrix",
      "test_params": "<function APITestGenerator.try_method_with_common_params.<locals>.<lambda> at 0x106ed5160>"
    },
    {
      "object": "Matrix",
      "method": "flatten",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "NumArray(dtype: float64)\n[  0] 0.000000\n[  1] 1.000000\n[  2] 0.000000\n[  3] 1.000000\n[  4] 0.000000\n[  5] 1.000000\n[  6] 0.000000\n[  7] 1.000000\n[  8] 0.000000",
      "error": null,
      "return_type": "NumArray"
    },
    {
      "object": "Matrix",
      "method": "from_base_array",
      "signature": "(base_array, rows, cols)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['base_array', 'rows', 'cols']",
      "return_type": null
    },
    {
      "object": "Matrix",
      "method": "from_data",
      "signature": "(data)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['data']",
      "return_type": null
    },
    {
      "object": "Matrix",
      "method": "from_flattened",
      "signature": "(num_array, rows, cols)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['num_array', 'rows', 'cols']",
      "return_type": null
    },
    {
      "object": "Matrix",
      "method": "from_graph_attributes",
      "signature": "(_graph, _attrs, _entities)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['_graph', '_attrs', '_entities']",
      "return_type": null
    },
    {
      "object": "Matrix",
      "method": "gelu",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "GraphMatrix(shape=(3, 3), dtype=f64)\n[[   0.000     0.841     0.000]\n [   0.841     0.000     0.841]\n [   0.000     0.841     0.000]]",
      "error": null,
      "return_type": "GraphMatrix"
    },
    {
      "object": "Matrix",
      "method": "get",
      "signature": "(row, col)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['row', 'col']",
      "return_type": null
    },
    {
      "object": "Matrix",
      "method": "get_cell",
      "signature": "(row, col)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['row', 'col']",
      "return_type": null
    },
    {
      "object": "Matrix",
      "method": "get_column",
      "signature": "(col)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['col']",
      "return_type": null
    },
    {
      "object": "Matrix",
      "method": "get_column_by_name",
      "signature": "(name)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['name']",
      "return_type": null
    },
    {
      "object": "Matrix",
      "method": "get_row",
      "signature": "(row)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['row']",
      "return_type": null
    },
    {
      "object": "Matrix",
      "method": "identity",
      "signature": "(size)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['size']",
      "return_type": null
    },
    {
      "object": "Matrix",
      "method": "interactive",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "http://127.0.0.1:62603",
      "error": null,
      "return_type": "str"
    },
    {
      "object": "Matrix",
      "method": "interactive_embed",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "<iframe src=\"http://127.0.0.1:62604\" width=\"100%\" height=\"420\" style=\"border:0;border-radius:12px;\"></iframe>",
      "error": null,
      "return_type": "str"
    },
    {
      "object": "Matrix",
      "method": "inverse",
      "signature": "()",
      "requires_params": false,
      "status": "error",
      "result": null,
      "error": "Matrix inverse calculation failed: InvalidInput(\"Matrix is singular (determinant near zero), cannot compute inverse\")",
      "return_type": null
    },
    {
      "object": "Matrix",
      "method": "iter_columns",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "[NumArray(dtype: float64)\n[  0] 0.000000\n[  1] 1.000000\n[  2] 0.000000, NumArray(dtype: float64)\n[  0] 1.000000\n[  1] 0.000000\n[  2] 1.000000, NumArray(dtype: float64)\n[  0] 0.000000\n[  1] 1.000000\n[ ",
      "error": null,
      "return_type": "list"
    },
    {
      "object": "Matrix",
      "method": "iter_rows",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "[NumArray(dtype: float64)\n[  0] 0.000000\n[  1] 1.000000\n[  2] 0.000000, NumArray(dtype: float64)\n[  0] 1.000000\n[  1] 0.000000\n[  2] 1.000000, NumArray(dtype: float64)\n[  0] 0.000000\n[  1] 1.000000\n[ ",
      "error": null,
      "return_type": "list"
    },
    {
      "object": "Matrix",
      "method": "leaky_relu",
      "signature": "(alpha=None)",
      "requires_params": false,
      "status": "success",
      "result": "GraphMatrix(shape=(3, 3), dtype=f64)\n[[   0.000     1.000     0.000]\n [   1.000     0.000     1.000]\n [   0.000     1.000     0.000]]",
      "error": null,
      "return_type": "GraphMatrix"
    },
    {
      "object": "Matrix",
      "method": "log",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "GraphMatrix(shape=(3, 3), dtype=f64)\n[[     NaN     0.000       NaN]\n [   0.000       NaN     0.000]\n [     NaN     0.000       NaN]]",
      "error": null,
      "return_type": "GraphMatrix"
    },
    {
      "object": "Matrix",
      "method": "lu_decomposition",
      "signature": "()",
      "requires_params": false,
      "status": "error",
      "result": null,
      "error": "LU decomposition failed: InvalidInput(\"Matrix is singular, LU decomposition failed\")",
      "return_type": null
    },
    {
      "object": "Matrix",
      "method": "map",
      "signature": "(func)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['func']",
      "return_type": null
    },
    {
      "object": "Matrix",
      "method": "max",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "1.0",
      "error": null,
      "return_type": "float"
    },
    {
      "object": "Matrix",
      "method": "max_axis",
      "signature": "(axis)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['axis']",
      "return_type": null
    },
    {
      "object": "Matrix",
      "method": "mean",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "0.4444444444444444",
      "error": null,
      "return_type": "float"
    },
    {
      "object": "Matrix",
      "method": "mean_axis",
      "signature": "(axis)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['axis']",
      "return_type": null
    },
    {
      "object": "Matrix",
      "method": "min",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "0.0",
      "error": null,
      "return_type": "float"
    },
    {
      "object": "Matrix",
      "method": "min_axis",
      "signature": "(axis)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['axis']",
      "return_type": null
    },
    {
      "object": "Matrix",
      "method": "multiply",
      "signature": "(other)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['other']",
      "return_type": null
    },
    {
      "object": "Matrix",
      "method": "norm",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "2.0",
      "error": null,
      "return_type": "float"
    },
    {
      "object": "Matrix",
      "method": "norm_inf",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "1.0",
      "error": null,
      "return_type": "float"
    },
    {
      "object": "Matrix",
      "method": "norm_l1",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "4.0",
      "error": null,
      "return_type": "float"
    },
    {
      "object": "Matrix",
      "method": "ones",
      "signature": "(rows, cols, dtype=None)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['rows', 'cols']",
      "return_type": null
    },
    {
      "object": "Matrix",
      "method": "power",
      "signature": "(n)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['n']",
      "return_type": null
    },
    {
      "object": "Matrix",
      "method": "preview",
      "signature": "(row_limit=None, col_limit=None)",
      "requires_params": false,
      "status": "success",
      "result": "[[0.0, 1.0, 0.0], [1.0, 0.0, 1.0], [0.0, 1.0, 0.0]]",
      "error": null,
      "return_type": "list"
    },
    {
      "object": "Matrix",
      "method": "qr_decomposition",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "(GraphMatrix(shape=(3, 3), dtype=f64)\n[[   0.000     0.707     0.000]\n [   1.000     0.000     0.000]\n [   0.000     0.707     0.000]], GraphMatrix(shape=(3, 3), dtype=f64)\n[[   1.000     0.000     1.",
      "error": null,
      "return_type": "tuple"
    },
    {
      "object": "Matrix",
      "method": "rank",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "2",
      "error": null,
      "return_type": "int"
    },
    {
      "object": "Matrix",
      "method": "relu",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "GraphMatrix(shape=(3, 3), dtype=f64)\n[[   0.000     1.000     0.000]\n [   1.000     0.000     1.000]\n [   0.000     1.000     0.000]]",
      "error": null,
      "return_type": "GraphMatrix"
    },
    {
      "object": "Matrix",
      "method": "repeat",
      "signature": "(repeats, axis)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['repeats', 'axis']",
      "return_type": null
    },
    {
      "object": "Matrix",
      "method": "requires_grad_",
      "signature": "(requires_grad)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['requires_grad']",
      "return_type": null
    },
    {
      "object": "Matrix",
      "method": "reshape",
      "signature": "(new_rows, new_cols)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['new_rows', 'new_cols']",
      "return_type": null
    },
    {
      "object": "Matrix",
      "method": "rich_display",
      "signature": "(config=None)",
      "requires_params": false,
      "status": "success",
      "result": "\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 col_0 \u2502 col_1 \u2502 col_2 \u2502\n\u2502 obj   \u2502 obj   \u2502 obj   \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 0     \u2502 1     \u2502 0     \u2502\n\u2502 1     \u2502 0     \u2502 1     \u2502\n\u2502 0     \u2502 1     \u2502 0     \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500",
      "error": null,
      "return_type": "str"
    },
    {
      "object": "Matrix",
      "method": "scalar_multiply",
      "signature": "(scalar)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['scalar']",
      "return_type": null
    },
    {
      "object": "Matrix",
      "method": "set",
      "signature": "(row, col, value)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['row', 'col', 'value']",
      "return_type": null
    },
    {
      "object": "Matrix",
      "method": "sigmoid",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "GraphMatrix(shape=(3, 3), dtype=f64)\n[[   0.500     0.731     0.500]\n [   0.731     0.500     0.731]\n [   0.500     0.731     0.500]]",
      "error": null,
      "return_type": "GraphMatrix"
    },
    {
      "object": "Matrix",
      "method": "softmax",
      "signature": "(dim=1)",
      "requires_params": false,
      "status": "success",
      "result": "GraphMatrix(shape=(3, 3), dtype=f64)\n[[   0.212     0.576     0.212]\n [   0.422     0.155     0.422]\n [   0.212     0.576     0.212]]",
      "error": null,
      "return_type": "GraphMatrix"
    },
    {
      "object": "Matrix",
      "method": "solve",
      "signature": "(b)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['b']",
      "return_type": null
    },
    {
      "object": "Matrix",
      "method": "split",
      "signature": "(split_points, axis)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['split_points', 'axis']",
      "return_type": null
    },
    {
      "object": "Matrix",
      "method": "sqrt",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "GraphMatrix(shape=(3, 3), dtype=f64)\n[[   0.000     1.000     0.000]\n [   1.000     0.000     1.000]\n [   0.000     1.000     0.000]]",
      "error": null,
      "return_type": "GraphMatrix"
    },
    {
      "object": "Matrix",
      "method": "stack",
      "signature": "(other, axis)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['other', 'axis']",
      "return_type": null
    },
    {
      "object": "Matrix",
      "method": "std_axis",
      "signature": "(axis)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['axis']",
      "return_type": null
    },
    {
      "object": "Matrix",
      "method": "sum",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "4.0",
      "error": null,
      "return_type": "float"
    },
    {
      "object": "Matrix",
      "method": "sum_axis",
      "signature": "(axis)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['axis']",
      "return_type": null
    },
    {
      "object": "Matrix",
      "method": "summary",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "GraphMatrix<f64>: 3x3 matrix",
      "error": null,
      "return_type": "str"
    },
    {
      "object": "Matrix",
      "method": "svd",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "(GraphMatrix(shape=(3, 3), dtype=f64)\n[[   0.408     0.000     0.000]\n [   0.816     0.000     0.000]\n [   0.408     0.000     0.000]], [1.4142135623730951, 0.0, 0.0], GraphMatrix(shape=(3, 3), dtype=",
      "error": null,
      "return_type": "tuple"
    },
    {
      "object": "Matrix",
      "method": "tanh",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "GraphMatrix(shape=(3, 3), dtype=f64)\n[[   0.000     0.762     0.000]\n [   0.762     0.000     0.762]\n [   0.000     0.762     0.000]]",
      "error": null,
      "return_type": "GraphMatrix"
    },
    {
      "object": "Matrix",
      "method": "tile",
      "signature": "(reps)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['reps']",
      "return_type": null
    },
    {
      "object": "Matrix",
      "method": "to_base_array",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "BaseArray[9] [0.00, 1.00, 0.00, ...] (dtype: Float)\n\ud83d\udca1 Use .interactive() for rich table view or .interactive_embed() for Jupyter",
      "error": null,
      "return_type": "BaseArray"
    },
    {
      "object": "Matrix",
      "method": "to_degree_matrix",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "GraphMatrix(shape=(3, 3), dtype=f64)\n[[   1.000     0.000     0.000]\n [   0.000     2.000     0.000]\n [   0.000     0.000     1.000]]",
      "error": null,
      "return_type": "GraphMatrix"
    },
    {
      "object": "Matrix",
      "method": "to_dict",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "{'data': [[0.0, 1.0, 0.0], [1.0, 0.0, 1.0], [0.0, 1.0, 0.0]], 'shape': (3, 3), 'dtype': 'float64'}",
      "error": null,
      "return_type": "dict"
    },
    {
      "object": "Matrix",
      "method": "to_laplacian",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "GraphMatrix(shape=(3, 3), dtype=f64)\n[[   1.000    -1.000     0.000]\n [  -1.000     2.000    -1.000]\n [   0.000    -1.000     1.000]]",
      "error": null,
      "return_type": "GraphMatrix"
    },
    {
      "object": "Matrix",
      "method": "to_list",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "[[0.0, 1.0, 0.0], [1.0, 0.0, 1.0], [0.0, 1.0, 0.0]]",
      "error": null,
      "return_type": "list"
    },
    {
      "object": "Matrix",
      "method": "to_normalized_laplacian",
      "signature": "(eps=None, k=None)",
      "requires_params": false,
      "status": "success",
      "result": "GraphMatrix(shape=(3, 3), dtype=f64)\n[[   0.000     1.414     0.000]\n [   1.414     0.000     1.414]\n [   0.000     1.414     0.000]]",
      "error": null,
      "return_type": "GraphMatrix"
    },
    {
      "object": "Matrix",
      "method": "to_numpy",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "[[0. 1. 0.]\n [1. 0. 1.]\n [0. 1. 0.]]",
      "error": null,
      "return_type": "ndarray"
    },
    {
      "object": "Matrix",
      "method": "to_pandas",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "   node_2  node_1  node_0\n0     0.0     1.0     0.0\n1     1.0     0.0     1.0\n2     0.0     1.0     0.0",
      "error": null,
      "return_type": "DataFrame"
    },
    {
      "object": "Matrix",
      "method": "to_table_for_streaming",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "BaseTable[9 x 3]",
      "error": null,
      "return_type": "BaseTable"
    },
    {
      "object": "Matrix",
      "method": "trace",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "0.0",
      "error": null,
      "return_type": "float"
    },
    {
      "object": "Matrix",
      "method": "transpose",
      "signature": "()",
      "requires_params": false,
      "status": "success",
      "result": "GraphMatrix(shape=(3, 3), dtype=f64)\n[[   0.000     1.000     0.000]\n [   1.000     0.000     1.000]\n [   0.000     1.000     0.000]]",
      "error": null,
      "return_type": "GraphMatrix"
    },
    {
      "object": "Matrix",
      "method": "var_axis",
      "signature": "(axis)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['axis']",
      "return_type": null
    },
    {
      "object": "Matrix",
      "method": "zero_grad",
      "signature": "()",
      "requires_params": false,
      "status": "error",
      "result": null,
      "error": "Gradient clearing failed: InvalidInput(\"No computation graph available for gradient clearing\")",
      "return_type": null
    },
    {
      "object": "Matrix",
      "method": "zeros",
      "signature": "(rows, cols, dtype=None)",
      "requires_params": true,
      "status": "skipped",
      "result": null,
      "error": "Requires parameters: ['rows', 'cols']",
      "return_type": null
    }
  ],
  "coverage_analysis": {
    "BaseTable": {
      "total": 33,
      "successful": 13,
      "failed": 0,
      "skipped": 20
    },
    "NodesTable": {
      "total": 29,
      "successful": 16,
      "failed": 0,
      "skipped": 13
    },
    "EdgesTable": {
      "total": 34,
      "successful": 20,
      "failed": 0,
      "skipped": 14
    },
    "GraphTable": {
      "total": 20,
      "successful": 9,
      "failed": 3,
      "skipped": 8
    },
    "BaseArray": {
      "total": 15,
      "successful": 13,
      "failed": 0,
      "skipped": 2
    },
    "Graph": {
      "total": 58,
      "successful": 16,
      "failed": 2,
      "skipped": 40
    },
    "Nodes": {
      "total": 7,
      "successful": 5,
      "failed": 0,
      "skipped": 2
    },
    "Edges": {
      "total": 6,
      "successful": 5,
      "failed": 0,
      "skipped": 1
    },
    "ComponentsArray": {
      "total": 7,
      "successful": 7,
      "failed": 0,
      "skipped": 0
    },
    "Subgraph": {
      "total": 55,
      "successful": 27,
      "failed": 2,
      "skipped": 26
    },
    "Matrix": {
      "total": 84,
      "successful": 45,
      "failed": 5,
      "skipped": 34
    }
  },
  "method_success_patterns": {
    "agg": {
      "total": 1,
      "successful": 0
    },
    "aggregate": {
      "total": 2,
      "successful": 0
    },
    "assign": {
      "total": 1,
      "successful": 0
    },
    "column": {
      "total": 1,
      "successful": 1
    },
    "column_info": {
      "total": 1,
      "successful": 1
    },
    "drop_columns": {
      "total": 3,
      "successful": 0
    },
    "filter": {
      "total": 5,
      "successful": 5
    },
    "from_csv": {
      "total": 3,
      "successful": 0
    },
    "from_dict": {
      "total": 3,
      "successful": 0
    },
    "from_json": {
      "total": 3,
      "successful": 0
    },
    "from_parquet": {
      "total": 3,
      "successful": 0
    },
    "get_column_numeric": {
      "total": 1,
      "successful": 1
    },
    "get_column_raw": {
      "total": 1,
      "successful": 1
    },
    "group_by": {
      "total": 4,
      "successful": 0
    },
    "has_column": {
      "total": 1,
      "successful": 1
    },
    "head": {
      "total": 5,
      "successful": 5
    },
    "intersect": {
      "total": 1,
      "successful": 0
    },
    "iter": {
      "total": 4,
      "successful": 4
    },
    "join": {
      "total": 1,
      "successful": 0
    },
    "rich_display": {
      "total": 4,
      "successful": 4
    },
    "select": {
      "total": 3,
      "successful": 0
    },
    "set_column": {
      "total": 1,
      "successful": 0
    },
    "set_value": {
      "total": 1,
      "successful": 0
    },
    "set_values_by_mask": {
      "total": 1,
      "successful": 0
    },
    "set_values_by_range": {
      "total": 1,
      "successful": 0
    },
    "slice": {
      "total": 3,
      "successful": 0
    },
    "sort_by": {
      "total": 3,
      "successful": 0
    },
    "tail": {
      "total": 5,
      "successful": 5
    },
    "to_csv": {
      "total": 3,
      "successful": 3
    },
    "to_json": {
      "total": 3,
      "successful": 3
    },
    "to_pandas": {
      "total": 4,
      "successful": 4
    },
    "to_parquet": {
      "total": 3,
      "successful": 0
    },
    "union": {
      "total": 1,
      "successful": 0
    },
    "base_table": {
      "total": 2,
      "successful": 2
    },
    "filter_by_attr": {
      "total": 2,
      "successful": 0
    },
    "interactive": {
      "total": 4,
      "successful": 4
    },
    "interactive_embed": {
      "total": 4,
      "successful": 4
    },
    "into_base_table": {
      "total": 2,
      "successful": 2
    },
    "ncols": {
      "total": 3,
      "successful": 3
    },
    "node_ids": {
      "total": 1,
      "successful": 1
    },
    "nrows": {
      "total": 3,
      "successful": 3
    },
    "shape": {
      "total": 3,
      "successful": 3
    },
    "unique_attr_values": {
      "total": 2,
      "successful": 0
    },
    "with_attributes": {
      "total": 1,
      "successful": 0
    },
    "as_tuples": {
      "total": 1,
      "successful": 1
    },
    "auto_assign_edge_ids": {
      "total": 2,
      "successful": 2
    },
    "edge_ids": {
      "total": 1,
      "successful": 1
    },
    "filter_by_sources": {
      "total": 1,
      "successful": 0
    },
    "filter_by_targets": {
      "total": 1,
      "successful": 0
    },
    "sources": {
      "total": 1,
      "successful": 1
    },
    "targets": {
      "total": 1,
      "successful": 1
    },
    "from_federated_bundles": {
      "total": 1,
      "successful": 0
    },
    "get_bundle_info": {
      "total": 1,
      "successful": 0
    },
    "load_bundle": {
      "total": 1,
      "successful": 0
    },
    "merge": {
      "total": 1,
      "successful": 0
    },
    "merge_with": {
      "total": 2,
      "successful": 0
    },
    "merge_with_strategy": {
      "total": 1,
      "successful": 0
    },
    "save_bundle": {
      "total": 1,
      "successful": 0
    },
    "stats": {
      "total": 1,
      "successful": 1
    },
    "to_edges": {
      "total": 2,
      "successful": 1
    },
    "to_graph": {
      "total": 2,
      "successful": 2
    },
    "to_nodes": {
      "total": 2,
      "successful": 1
    },
    "to_subgraphs": {
      "total": 1,
      "successful": 0
    },
    "validate": {
      "total": 1,
      "successful": 1
    },
    "verify_bundle": {
      "total": 1,
      "successful": 0
    },
    "apply_to_each": {
      "total": 1,
      "successful": 0
    },
    "astype": {
      "total": 1,
      "successful": 0
    },
    "describe": {
      "total": 1,
      "successful": 1
    },
    "dtype": {
      "total": 1,
      "successful": 1
    },
    "infer_numeric_type": {
      "total": 1,
      "successful": 1
    },
    "is_numeric": {
      "total": 1,
      "successful": 1
    },
    "numeric_compatibility_info": {
      "total": 1,
      "successful": 1
    },
    "to_num_array": {
      "total": 1,
      "successful": 1
    },
    "to_table": {
      "total": 1,
      "successful": 1
    },
    "unique": {
      "total": 1,
      "successful": 1
    },
    "add_edge": {
      "total": 1,
      "successful": 0
    },
    "add_edges": {
      "total": 1,
      "successful": 0
    },
    "add_graph": {
      "total": 1,
      "successful": 0
    },
    "add_node": {
      "total": 1,
      "successful": 0
    },
    "add_nodes": {
      "total": 1,
      "successful": 0
    },
    "all_edge_attribute_names": {
      "total": 1,
      "successful": 1
    },
    "all_node_attribute_names": {
      "total": 1,
      "successful": 1
    },
    "bfs": {
      "total": 2,
      "successful": 0
    },
    "branches": {
      "total": 1,
      "successful": 1
    },
    "checkout_branch": {
      "total": 1,
      "successful": 0
    },
    "commit": {
      "total": 1,
      "successful": 0
    },
    "commit_history": {
      "total": 1,
      "successful": 1
    },
    "contains_edge": {
      "total": 2,
      "successful": 0
    },
    "contains_node": {
      "total": 2,
      "successful": 0
    },
    "create_branch": {
      "total": 1,
      "successful": 0
    },
    "density": {
      "total": 2,
      "successful": 2
    },
    "dfs": {
      "total": 2,
      "successful": 0
    },
    "edge_attribute_keys": {
      "total": 1,
      "successful": 0
    },
    "edge_count": {
      "total": 2,
      "successful": 2
    },
    "edge_endpoints": {
      "total": 2,
      "successful": 0
    },
    "filter_edges": {
      "total": 2,
      "successful": 0
    },
    "filter_nodes": {
      "total": 2,
      "successful": 0
    },
    "get_edge_attr": {
      "total": 1,
      "successful": 0
    },
    "get_edge_attrs": {
      "total": 1,
      "successful": 0
    },
    "get_node_attr": {
      "total": 1,
      "successful": 0
    },
    "get_node_attrs": {
      "total": 1,
      "successful": 0
    },
    "get_node_mapping": {
      "total": 1,
      "successful": 0
    },
    "group_nodes_by_attribute": {
      "total": 1,
      "successful": 0
    },
    "has_edge": {
      "total": 2,
      "successful": 0
    },
    "has_edge_attribute": {
      "total": 1,
      "successful": 0
    },
    "has_node": {
      "total": 2,
      "successful": 0
    },
    "has_node_attribute": {
      "total": 1,
      "successful": 0
    },
    "has_uncommitted_changes": {
      "total": 1,
      "successful": 1
    },
    "historical_view": {
      "total": 1,
      "successful": 0
    },
    "is_connected": {
      "total": 2,
      "successful": 2
    },
    "laplacian_matrix": {
      "total": 1,
      "successful": 1
    },
    "neighborhood": {
      "total": 3,
      "successful": 2
    },
    "neighborhood_statistics": {
      "total": 1,
      "successful": 1
    },
    "neighbors": {
      "total": 2,
      "successful": 0
    },
    "node_attribute_keys": {
      "total": 1,
      "successful": 0
    },
    "node_count": {
      "total": 2,
      "successful": 2
    },
    "remove_edge": {
      "total": 1,
      "successful": 0
    },
    "remove_edges": {
      "total": 1,
      "successful": 0
    },
    "remove_node": {
      "total": 1,
      "successful": 0
    },
    "remove_nodes": {
      "total": 1,
      "successful": 0
    },
    "resolve_string_id_to_node": {
      "total": 1,
      "successful": 0
    },
    "set_edge_attr": {
      "total": 1,
      "successful": 0
    },
    "set_edge_attrs": {
      "total": 2,
      "successful": 0
    },
    "set_node_attr": {
      "total": 1,
      "successful": 0
    },
    "set_node_attrs": {
      "total": 2,
      "successful": 0
    },
    "shortest_path": {
      "total": 1,
      "successful": 0
    },
    "table": {
      "total": 5,
      "successful": 5
    },
    "to_matrix": {
      "total": 2,
      "successful": 2
    },
    "to_networkx": {
      "total": 2,
      "successful": 2
    },
    "transition_matrix": {
      "total": 1,
      "successful": 0
    },
    "view": {
      "total": 1,
      "successful": 1
    },
    "all": {
      "total": 2,
      "successful": 2
    },
    "array": {
      "total": 1,
      "successful": 1
    },
    "get_meta_node": {
      "total": 1,
      "successful": 0
    },
    "ids": {
      "total": 2,
      "successful": 2
    },
    "matrix": {
      "total": 2,
      "successful": 2
    },
    "set_attrs": {
      "total": 2,
      "successful": 0
    },
    "weight_matrix": {
      "total": 1,
      "successful": 1
    },
    "largest_component": {
      "total": 1,
      "successful": 1
    },
    "sample": {
      "total": 2,
      "successful": 2
    },
    "sizes": {
      "total": 1,
      "successful": 1
    },
    "to_list": {
      "total": 2,
      "successful": 2
    },
    "adj": {
      "total": 1,
      "successful": 1
    },
    "adjacency_list": {
      "total": 1,
      "successful": 1
    },
    "adjacency_matrix": {
      "total": 1,
      "successful": 1
    },
    "calculate_similarity": {
      "total": 1,
      "successful": 0
    },
    "child_meta_nodes": {
      "total": 1,
      "successful": 1
    },
    "clustering_coefficient": {
      "total": 1,
      "successful": 0
    },
    "collapse": {
      "total": 1,
      "successful": 1
    },
    "collapse_to_node": {
      "total": 1,
      "successful": 0
    },
    "collapse_to_node_with_defaults": {
      "total": 1,
      "successful": 0
    },
    "connected_components": {
      "total": 1,
      "successful": 1
    },
    "degree": {
      "total": 1,
      "successful": 1
    },
    "edges_table": {
      "total": 1,
      "successful": 1
    },
    "entity_type": {
      "total": 1,
      "successful": 1
    },
    "get_edge_attribute": {
      "total": 1,
      "successful": 0
    },
    "get_node_attribute": {
      "total": 1,
      "successful": 0
    },
    "has_edge_between": {
      "total": 1,
      "successful": 0
    },
    "has_meta_nodes": {
      "total": 1,
      "successful": 1
    },
    "has_path": {
      "total": 1,
      "successful": 0
    },
    "in_degree": {
      "total": 1,
      "successful": 1
    },
    "induced_subgraph": {
      "total": 1,
      "successful": 0
    },
    "intersect_with": {
      "total": 1,
      "successful": 0
    },
    "is_empty": {
      "total": 1,
      "successful": 1
    },
    "meta_nodes": {
      "total": 1,
      "successful": 1
    },
    "out_degree": {
      "total": 1,
      "successful": 1
    },
    "parent_meta_node": {
      "total": 1,
      "successful": 1
    },
    "shortest_path_subgraph": {
      "total": 1,
      "successful": 0
    },
    "subgraph_from_edges": {
      "total": 1,
      "successful": 0
    },
    "subtract_from": {
      "total": 1,
      "successful": 0
    },
    "summary": {
      "total": 2,
      "successful": 2
    },
    "transitivity": {
      "total": 1,
      "successful": 0
    },
    "abs": {
      "total": 1,
      "successful": 1
    },
    "apply": {
      "total": 1,
      "successful": 0
    },
    "backward": {
      "total": 1,
      "successful": 0
    },
    "cholesky_decomposition": {
      "total": 1,
      "successful": 0
    },
    "concatenate": {
      "total": 1,
      "successful": 0
    },
    "dense": {
      "total": 1,
      "successful": 1
    },
    "dense_html_repr": {
      "total": 1,
      "successful": 1
    },
    "determinant": {
      "total": 1,
      "successful": 1
    },
    "dropout": {
      "total": 1,
      "successful": 0
    },
    "eigenvalue_decomposition": {
      "total": 1,
      "successful": 1
    },
    "elementwise_multiply": {
      "total": 1,
      "successful": 0
    },
    "elu": {
      "total": 1,
      "successful": 1
    },
    "exp": {
      "total": 1,
      "successful": 1
    },
    "flatten": {
      "total": 1,
      "successful": 1
    },
    "from_base_array": {
      "total": 1,
      "successful": 0
    },
    "from_data": {
      "total": 1,
      "successful": 0
    },
    "from_flattened": {
      "total": 1,
      "successful": 0
    },
    "from_graph_attributes": {
      "total": 1,
      "successful": 0
    },
    "gelu": {
      "total": 1,
      "successful": 1
    },
    "get": {
      "total": 1,
      "successful": 0
    },
    "get_cell": {
      "total": 1,
      "successful": 0
    },
    "get_column": {
      "total": 1,
      "successful": 0
    },
    "get_column_by_name": {
      "total": 1,
      "successful": 0
    },
    "get_row": {
      "total": 1,
      "successful": 0
    },
    "identity": {
      "total": 1,
      "successful": 0
    },
    "inverse": {
      "total": 1,
      "successful": 0
    },
    "iter_columns": {
      "total": 1,
      "successful": 1
    },
    "iter_rows": {
      "total": 1,
      "successful": 1
    },
    "leaky_relu": {
      "total": 1,
      "successful": 1
    },
    "log": {
      "total": 1,
      "successful": 1
    },
    "lu_decomposition": {
      "total": 1,
      "successful": 0
    },
    "map": {
      "total": 1,
      "successful": 0
    },
    "max": {
      "total": 1,
      "successful": 1
    },
    "max_axis": {
      "total": 1,
      "successful": 0
    },
    "mean": {
      "total": 1,
      "successful": 1
    },
    "mean_axis": {
      "total": 1,
      "successful": 0
    },
    "min": {
      "total": 1,
      "successful": 1
    },
    "min_axis": {
      "total": 1,
      "successful": 0
    },
    "multiply": {
      "total": 1,
      "successful": 0
    },
    "norm": {
      "total": 1,
      "successful": 1
    },
    "norm_inf": {
      "total": 1,
      "successful": 1
    },
    "norm_l1": {
      "total": 1,
      "successful": 1
    },
    "ones": {
      "total": 1,
      "successful": 0
    },
    "power": {
      "total": 1,
      "successful": 0
    },
    "preview": {
      "total": 1,
      "successful": 1
    },
    "qr_decomposition": {
      "total": 1,
      "successful": 1
    },
    "rank": {
      "total": 1,
      "successful": 1
    },
    "relu": {
      "total": 1,
      "successful": 1
    },
    "repeat": {
      "total": 1,
      "successful": 0
    },
    "requires_grad_": {
      "total": 1,
      "successful": 0
    },
    "reshape": {
      "total": 1,
      "successful": 0
    },
    "scalar_multiply": {
      "total": 1,
      "successful": 0
    },
    "set": {
      "total": 1,
      "successful": 0
    },
    "sigmoid": {
      "total": 1,
      "successful": 1
    },
    "softmax": {
      "total": 1,
      "successful": 1
    },
    "solve": {
      "total": 1,
      "successful": 0
    },
    "split": {
      "total": 1,
      "successful": 0
    },
    "sqrt": {
      "total": 1,
      "successful": 1
    },
    "stack": {
      "total": 1,
      "successful": 0
    },
    "std_axis": {
      "total": 1,
      "successful": 0
    },
    "sum": {
      "total": 1,
      "successful": 1
    },
    "sum_axis": {
      "total": 1,
      "successful": 0
    },
    "svd": {
      "total": 1,
      "successful": 1
    },
    "tanh": {
      "total": 1,
      "successful": 1
    },
    "tile": {
      "total": 1,
      "successful": 0
    },
    "to_base_array": {
      "total": 1,
      "successful": 1
    },
    "to_degree_matrix": {
      "total": 1,
      "successful": 1
    },
    "to_dict": {
      "total": 1,
      "successful": 1
    },
    "to_laplacian": {
      "total": 1,
      "successful": 1
    },
    "to_normalized_laplacian": {
      "total": 1,
      "successful": 1
    },
    "to_numpy": {
      "total": 1,
      "successful": 1
    },
    "to_table_for_streaming": {
      "total": 1,
      "successful": 1
    },
    "trace": {
      "total": 1,
      "successful": 1
    },
    "transpose": {
      "total": 1,
      "successful": 1
    },
    "var_axis": {
      "total": 1,
      "successful": 0
    },
    "zero_grad": {
      "total": 1,
      "successful": 0
    },
    "zeros": {
      "total": 1,
      "successful": 0
    }
  }
}