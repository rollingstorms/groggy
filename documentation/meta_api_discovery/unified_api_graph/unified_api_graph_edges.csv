param_data_type,param_edges_type,target,param_source_type,param_node_type,param_bundle_path_type,test_requires_params,requires_parameters,param_center_nodes_type,param_nodes_type,param_edge_type,param_central_nodes_type,doc,is_property,test_result,param_agg_specs_type,param_mask_type,test_status,param_method_name_type,param_string_id_type,param_columns_type,param_values_type,param_target_type,return_type_node_id,test_error,param_column_name_type,param_source_nodes_type,param_target_nodes_type,param_edge_id_type,param_name_type,has_parameter_types,discovered,return_type_source,param_on_type,param_path_type,param_predicate_type,param_node_id_type,param_agg_functions_type,data_source,param_bundle_paths_type,param_commit_id_type,tested,source,param_updates_type,param_column_type,signature,param_value_type,param_node1_id_type,enhanced_signature,source_object,method_name,param_branch_name_type,param_node2_id_type,parameter_types_json,param_attr_name_type,edge_id,return_type
,,1,list,,,True,"""['source', 'target', 'kwargs']""",,,,,Add a single edge to the graph with support for string IDs and attributes,False,,,,skipped,,,,,list,,"""Requires parameters: ['source', 'target', 'kwargs']""",,,,,,true,True,,,,,,,discovery,,,true,6,,,"""(source, target, uid_key=None, **kwargs)""",,,"""(source: list, target: list, uid_key=None, **kwargs)""",Graph,add_edge,,,"""{""""source"""": """"list"""", """"target"""": """"list""""}""",,116,unknown
,,1,,,,True,"""['row', 'column_name', 'value']""",,,,,"CompressedText(CompressedData { data: [83, 101, 116, 32, 97, 32, 115, 105, 110, 103, 108, 101, 32, 118, 97, 108, 117, 101, 32, 97, 116, 32, 97, 32, 115, 112, 101, 99, 105, 102, 105, 99, 32, 114, 111, 119, 32, 97, 110, 100, 32, 99, 111, 108, 117, 109, 110, 10, 10, 65, 114, 103, 115, 58, 10, 32, 32, 32, 32, 114, 111, 119, 58, 32, 82, 111, 119, 32, 105, 110, 100, 101, 120, 32, 40, 48, 45, 98, 97, 115, 101, 100, 41, 10, 32, 32, 32, 32, 99, 111, 108, 117, 109, 110, 95, 110, 97, 109, 101, 58, 32, 78, 97, 109, 101, 32, 111, 102, 32, 116, 104, 101, 32, 99, 111, 108, 117, 109, 110, 10, 32, 32, 32, 32, 118, 97, 108, 117, 101, 58, 32, 78, 101, 119, 32, 118, 97, 108, 117, 101, 32, 116, 111, 32, 115, 101, 116, 10, 32, 32, 32, 32, 10, 69, 120, 97, 109, 112, 108, 101, 58, 10, 32, 32, 32, 32, 116, 97, 98, 108, 101, 46, 115, 101, 116, 95, 118, 97, 108, 117, 101, 40, 48, 44, 32, 34, 110, 97, 109, 101, 34, 44, 32, 34, 65, 108, 105, 99, 101, 32], original_size: 200, algorithm: None })",False,,,,skipped,,,,,,,"""Requires parameters: ['row', 'column_name', 'value']""",list,,,,,true,True,,,,,,,discovery,,,true,0,,,"""(row, column_name, value)""",Any,,"""(row, column_name: list, value: Any)""",BaseTable,set_value,,,"""{""""column_name"""": """"list"""", """"value"""": """"Any""""}""",,19,unknown
,,1,,,,False,[],,,,,Get node IDs,False,"""GraphArray(len=3, dtype=int64)""",,,success,,,,,,11,,,,,,,false,True,test_execution,,,,,,discovery,,,true,2,,,(),,,(),NodesTable,node_ids,,,,,43,GraphArray
,,1,,,,True,"""['other', 'strategy']""",,,,,Merge with another GraphTable,False,,,,skipped,,,,,,,"""Requires parameters: ['other', 'strategy']""",,,,,,false,True,,,,,,,discovery,,,true,4,,,"""(other, strategy)""",,,"""(other, strategy)""",GraphTable,merge_with,,,,,95,unknown
,,1,,,,False,[],,,,,Get maximum value,False,2,,,success,,,,,,19,,,,,,,false,True,test_execution,,,,,,discovery,,,true,11,,,(),,,(),GraphArray,max,,,,,253,int
,,1,,,,True,['columns'],,,,,"CompressedText(CompressedData { data: [68, 114, 111, 112, 32, 99, 111, 108, 117, 109, 110, 115, 32, 102, 114, 111, 109, 32, 116, 104, 101, 32, 116, 97, 98, 108, 101, 10, 10, 65, 114, 103, 115, 58, 10, 32, 32, 32, 32, 99, 111, 108, 117, 109, 110, 115, 58, 32, 76, 105, 115, 116, 32, 111, 102, 32, 99, 111, 108, 117, 109, 110, 32, 110, 97, 109, 101, 115, 32, 116, 111, 32, 100, 114, 111, 112, 10, 10, 82, 101, 116, 117, 114, 110, 115, 58, 10, 32, 32, 32, 32, 80, 121, 66, 97, 115, 101, 84, 97, 98, 108, 101, 58, 32, 65, 32, 110, 101, 119, 32, 116, 97, 98, 108, 101, 32, 119, 105, 116, 104, 111, 117, 116, 32, 116, 104, 101, 32, 115, 112, 101, 99, 105, 102, 105, 101, 100, 32, 99, 111, 108, 117, 109, 110, 115], original_size: 145, algorithm: None })",False,,,,skipped,,,list,,,,Requires parameters: ['columns'],,,,,,true,True,,,,,,,discovery,,,true,0,,,(columns),,,(columns: list),BaseTable,drop_columns,,,"""{""""columns"""": """"list""""}""",,4,unknown
,,1,,,,True,['agg_specs'],,,,,"CompressedText(CompressedData { data: [65, 108, 105, 97, 115, 32, 102, 111, 114, 32, 97, 103, 103, 114, 101, 103, 97, 116, 101, 32, 109, 101, 116, 104, 111, 100, 32, 40, 109, 111, 114, 101, 32, 99, 111, 110, 99, 105, 115, 101, 41, 10, 10, 35, 32, 65, 114, 103, 117, 109, 101, 110, 116, 115, 10, 42, 32, 96, 97, 103, 103, 95, 115, 112, 101, 99, 115, 96, 32, 45, 32, 68, 105, 99, 116, 105, 111, 110, 97, 114, 121, 32, 109, 97, 112, 112, 105, 110, 103, 32, 99, 111, 108, 117, 109, 110, 32, 110, 97, 109, 101, 115, 32, 116, 111, 32, 97, 103, 103, 114, 101, 103, 97, 116, 105, 111, 110, 32, 102, 117, 110, 99, 116, 105, 111, 110, 115, 10, 10, 35, 32, 82, 101, 116, 117, 114, 110, 115, 10, 80, 121, 66, 97, 115, 101, 84, 97, 98, 108, 101, 58, 32, 65, 32, 115, 105, 110, 103, 108, 101, 32, 116, 97, 98, 108, 101, 32, 119, 105, 116, 104, 32, 97, 103, 103, 114, 101, 103, 97, 116, 101, 100, 32, 114, 101, 115, 117, 108, 116, 115, 10, 10, 35, 32, 69, 120, 97, 109, 112, 108], original_size: 200, algorithm: None })",False,,dict,,skipped,,,,,,,Requires parameters: ['agg_specs'],,,,,,true,True,,,,,,,discovery,,,true,0,,,(agg_specs),,,(agg_specs: dict),BaseTable,agg,,,"""{""""agg_specs"""": """"dict""""}""",,0,unknown
,,1,,,,True,"""['start', 'end']""",,,,,"CompressedText(CompressedData { data: [71, 101, 116, 32, 97, 32, 115, 108, 105, 99, 101, 32, 111, 102, 32, 114, 111, 119, 115, 32, 91, 115, 116, 97, 114, 116, 44, 32, 101, 110, 100, 41, 10, 10, 65, 114, 103, 115, 58, 10, 32, 32, 32, 32, 115, 116, 97, 114, 116, 58, 32, 83, 116, 97, 114, 116, 105, 110, 103, 32, 114, 111, 119, 32, 105, 110, 100, 101, 120, 32, 40, 105, 110, 99, 108, 117, 115, 105, 118, 101, 41, 10, 32, 32, 32, 32, 101, 110, 100, 58, 32, 69, 110, 100, 105, 110, 103, 32, 114, 111, 119, 32, 105, 110, 100, 101, 120, 32, 40, 101, 120, 99, 108, 117, 115, 105, 118, 101, 41, 10, 10, 82, 101, 116, 117, 114, 110, 115, 58, 10, 32, 32, 32, 32, 80, 121, 69, 100, 103, 101, 115, 84, 97, 98, 108, 101, 58, 32, 65, 32, 110, 101, 119, 32, 116, 97, 98, 108, 101, 32, 119, 105, 116, 104, 32, 116, 104, 101, 32, 115, 112, 101, 99, 105, 102, 105, 101, 100, 32, 114, 111, 119, 32, 115, 108, 105, 99, 101], original_size: 188, algorithm: None })",False,,,,skipped,,,,,,,"""Requires parameters: ['start', 'end']""",,,,,,false,True,,,,,,,discovery,,,true,3,,,"""(start, end)""",,,"""(start, end)""",EdgesTable,slice,,,,,79,unknown
,,1,,,,False,[],,,,,Get largest component without materializing others,False,"CompressedText(CompressedData { data: [83, 117, 98, 103, 114, 97, 112, 104, 32, 119, 105, 116, 104, 32, 51, 32, 110, 111, 100, 101, 115, 32, 97, 110, 100, 32, 50, 32, 101, 100, 103, 101, 115, 10, 10, 69, 100, 103, 101, 115, 58, 10, 32, 32, 73, 68, 32, 32, 32, 32, 83, 111, 117, 114, 99, 101, 32, 226, 134, 146, 32, 84, 97, 114, 103, 101, 116, 10, 32, 32, 45, 45, 45, 45, 32, 32, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 10, 32, 32, 32, 32, 32, 48, 32, 32, 32, 32, 32, 32, 32, 48, 32, 226, 134, 146, 32, 49, 10, 32, 32, 32, 32, 32, 49, 32, 32, 32, 32, 32, 32, 32, 49, 32, 226, 134, 146, 32, 50], original_size: 133, algorithm: None })",,,success,,,,,,10,,,,,,,false,True,test_execution,,,,,,discovery,,,true,9,,,(),,,(),ComponentsArray,largest_component,,,,,188,Subgraph
,,1,,,,False,[],,,,,Check if this subgraph contains nodes that are meta-nodes,False,False,,,success,,,,,,13,,,,,,,false,True,test_execution,,,,,,discovery,,,true,10,,,(),,,(),Subgraph,has_meta_nodes,,,,,217,bool
,int,1,,,,True,['edges'],,,,,Remove multiple edges from the graph,False,,,,skipped,,,,,,,Requires parameters: ['edges'],,,,,,true,True,,,,,,,discovery,,,true,6,,,(edges),,,(edges: int),Graph,remove_edges,,,"""{""""edges"""": """"int""""}""",,163,unknown
,,1,,,,False,[],,,,,Check if array contains any null values,False,False,,,success,,,,,,13,,,,,,,false,True,test_execution,,,,,,discovery,,,true,11,,,(),,,(),GraphArray,has_null,,,,,251,bool
,,1,,,,True,['columns'],,,,,"CompressedText(CompressedData { data: [68, 114, 111, 112, 32, 99, 111, 108, 117, 109, 110, 115, 32, 102, 114, 111, 109, 32, 116, 104, 101, 32, 116, 97, 98, 108, 101, 32, 40, 99, 97, 110, 110, 111, 116, 32, 100, 114, 111, 112, 32, 110, 111, 100, 101, 95, 105, 100, 41, 10, 10, 65, 114, 103, 115, 58, 10, 32, 32, 32, 32, 99, 111, 108, 117, 109, 110, 115, 58, 32, 76, 105, 115, 116, 32, 111, 102, 32, 99, 111, 108, 117, 109, 110, 32, 110, 97, 109, 101, 115, 32, 116, 111, 32, 100, 114, 111, 112, 10, 10, 82, 101, 116, 117, 114, 110, 115, 58, 10, 32, 32, 32, 32, 80, 121, 78, 111, 100, 101, 115, 84, 97, 98, 108, 101, 58, 32, 65, 32, 110, 101, 119, 32, 116, 97, 98, 108, 101, 32, 119, 105, 116, 104, 111, 117, 116, 32, 116, 104, 101, 32, 115, 112, 101, 99, 105, 102, 105, 101, 100, 32, 99, 111, 108, 117, 109, 110, 115], original_size: 168, algorithm: None })",False,,,,skipped,,,list,,,,Requires parameters: ['columns'],,,,,,true,True,,,,,,,discovery,,,true,2,,,(columns),,,(columns: list),NodesTable,drop_columns,,,"""{""""columns"""": """"list""""}""",,31,unknown
,,1,,,,False,[],,,,,Get neighborhood sampling performance statistics,False,"""NeighborhoodStats(neighborhoods=1, nodes=3, time=0.01ms, avg=3.0 nodes/nbh)""",,,success,,,,,,28,,,,,,,false,True,test_execution,,,,,,discovery,,,true,6,,,(),,,(),Graph,neighborhood_statistics,,,,,158,NeighborhoodStats
,,1,,,,False,[],,,,,"""Get an EdgesTable representation of accessible edges
Implements: g.edges.table()  """,False,"CompressedText(CompressedData { data: [69, 100, 103, 101, 115, 84, 97, 98, 108, 101, 91, 50, 32, 120, 32, 52, 93, 10, 66, 97, 115, 101, 84, 97, 98, 108, 101, 91, 50, 32, 120, 32, 52, 93, 10, 124, 32, 32, 32, 32, 32, 115, 111, 117, 114, 99, 101, 32, 124, 32, 32, 32, 32, 32, 116, 97, 114, 103, 101, 116, 32, 124, 32, 32, 32, 32, 32, 109, 101, 116, 104, 111, 100, 32, 124, 32, 32, 32, 32, 101, 100, 103, 101, 95, 105, 100, 32, 124, 32, 10, 124, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 124, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 124, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 124, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 124, 10, 124, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 49, 32, 124, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 50, 32, 124, 32, 32, 32, 32, 32, 32, 32, 104, 101, 97, 100, 32, 124, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 49, 32, 124, 32, 10, 124], original_size: 200, algorithm: None })",,,success,,,,,,3,,,,,,,false,True,test_execution,,,,,,discovery,,,true,8,,,(),,,(),Edges,table,,,,,186,EdgesTable
,,1,,,,True,['predicate'],,,,,"CompressedText(CompressedData { data: [70, 105, 108, 116, 101, 114, 32, 114, 111, 119, 115, 32, 117, 115, 105, 110, 103, 32, 97, 32, 113, 117, 101, 114, 121, 32, 101, 120, 112, 114, 101, 115, 115, 105, 111, 110, 32, 111, 114, 32, 80, 121, 116, 104, 111, 110, 32, 102, 117, 110, 99, 116, 105, 111, 110, 10, 10, 65, 114, 103, 115, 58, 10, 32, 32, 32, 32, 112, 114, 101, 100, 105, 99, 97, 116, 101, 58, 32, 69, 105, 116, 104, 101, 114, 32, 97, 32, 115, 116, 114, 105, 110, 103, 32, 113, 117, 101, 114, 121, 32, 101, 120, 112, 114, 101, 115, 115, 105, 111, 110, 32, 40, 101, 46, 103, 46, 32, 34, 119, 101, 105, 103, 104, 116, 32, 62, 32, 48, 46, 53, 34, 41, 32, 111, 114, 32, 97, 32, 80, 121, 116, 104, 111, 110, 32, 102, 117, 110, 99, 116, 105, 111, 110, 10, 10, 82, 101, 116, 117, 114, 110, 115, 58, 10, 32, 32, 32, 32, 80, 121, 69, 100, 103, 101, 115, 84, 97, 98, 108, 101, 58, 32, 65, 32, 110, 101, 119, 32, 116, 97, 98, 108, 101, 32, 119, 105, 116, 104, 32, 102], original_size: 200, algorithm: None })",False,"CompressedText(CompressedData { data: [69, 100, 103, 101, 115, 84, 97, 98, 108, 101, 91, 50, 32, 120, 32, 52, 93, 10, 66, 97, 115, 101, 84, 97, 98, 108, 101, 91, 50, 32, 120, 32, 52, 93, 10, 124, 32, 32, 32, 32, 32, 109, 101, 116, 104, 111, 100, 32, 124, 32, 32, 32, 32, 32, 115, 111, 117, 114, 99, 101, 32, 124, 32, 32, 32, 32, 32, 116, 97, 114, 103, 101, 116, 32, 124, 32, 32, 32, 32, 101, 100, 103, 101, 95, 105, 100, 32, 124, 32, 10, 124, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 124, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 124, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 124, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 124, 10, 124, 32, 32, 32, 32, 32, 32, 116, 97, 98, 108, 101, 32, 124, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 49, 32, 124, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 50, 32, 124, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 49, 32, 124, 32, 10, 124], original_size: 200, algorithm: None })",,,success_with_params,,,,,,3,,,,,,,true,True,test_execution,,,str,,,discovery,,,true,3,,,(predicate),,,(predicate: str),EdgesTable,filter,,,"""{""""predicate"""": """"str""""}""",,62,EdgesTable
,int,1,,,,True,"""['edges', 'attrs']""",,,,,Get bulk edge attributes - delegates to PyGraphAttr,False,,,,skipped,,,,,,,"""Requires parameters: ['edges', 'attrs']""",,,,,,true,True,,,,,,,discovery,,,true,6,,,"""(edges, attrs)""",,,"""(edges: int, attrs)""",Graph,get_edge_attrs,,,"""{""""edges"""": """"int""""}""",,143,unknown
,,1,,,,False,[],,,,,Get all meta-nodes within this subgraph,False,[],,,success,,,,,,21,,,,,,,false,True,test_execution,,,,,,discovery,,,true,10,,,(),,,(),Subgraph,meta_nodes,,,,,226,list
,,1,,,,True,['branch_name'],,,,,Create a new branch (FFI wrapper around core history system),False,,,,skipped,,,,,,,Requires parameters: ['branch_name'],,,,,,true,True,,,,,,,discovery,,,true,6,,,(branch_name),,,(branch_name: str),Graph,create_branch,str,,"""{""""branch_name"""": """"str""""}""",,133,unknown
,,1,,,,True,['agg_specs'],,,,,"CompressedText(CompressedData { data: [65, 103, 103, 114, 101, 103, 97, 116, 101, 32, 101, 110, 116, 105, 114, 101, 32, 116, 97, 98, 108, 101, 32, 119, 105, 116, 104, 111, 117, 116, 32, 103, 114, 111, 117, 112, 105, 110, 103, 10, 10, 35, 32, 65, 114, 103, 117, 109, 101, 110, 116, 115, 10, 42, 32, 96, 97, 103, 103, 95, 115, 112, 101, 99, 115, 96, 32, 45, 32, 68, 105, 99, 116, 105, 111, 110, 97, 114, 121, 32, 109, 97, 112, 112, 105, 110, 103, 32, 99, 111, 108, 117, 109, 110, 32, 110, 97, 109, 101, 115, 32, 116, 111, 32, 97, 103, 103, 114, 101, 103, 97, 116, 105, 111, 110, 32, 102, 117, 110, 99, 116, 105, 111, 110, 115, 10, 10, 35, 32, 69, 120, 97, 109, 112, 108, 101, 115, 10, 96, 96, 96, 112, 121, 116, 104, 111, 110, 10, 35, 32, 67, 97, 108, 99, 117, 108, 97, 116, 101, 32, 115, 117, 109, 109, 97, 114, 121, 32, 115, 116, 97, 116, 105, 115, 116, 105, 99, 115, 10, 115, 117, 109, 109, 97, 114, 121, 32, 61, 32, 116, 97, 98, 108, 101, 46, 97, 103, 103, 114, 101], original_size: 200, algorithm: None })",False,,dict,,skipped,,,,,,,Requires parameters: ['agg_specs'],,,,,,true,True,,,,,,,discovery,,,true,0,,,(agg_specs),,,(agg_specs: dict),BaseTable,aggregate,,,"""{""""agg_specs"""": """"dict""""}""",,1,unknown
,,1,,,,True,['other'],,,,,"CompressedText(CompressedData { data: [65, 100, 100, 32, 97, 110, 111, 116, 104, 101, 114, 32, 103, 114, 97, 112, 104, 32, 116, 111, 32, 116, 104, 105, 115, 32, 103, 114, 97, 112, 104, 32, 40, 109, 101, 114, 103, 101, 32, 110, 111, 100, 101, 115, 32, 97, 110, 100, 32, 101, 100, 103, 101, 115, 41, 10, 10, 65, 108, 108, 32, 110, 111, 100, 101, 115, 32, 97, 110, 100, 32, 101, 100, 103, 101, 115, 32, 102, 114, 111, 109, 32, 116, 104, 101, 32, 111, 116, 104, 101, 114, 32, 103, 114, 97, 112, 104, 32, 119, 105, 108, 108, 32, 98, 101, 32, 97, 100, 100, 101, 100, 32, 116, 111, 32, 116, 104, 105, 115, 32, 103, 114, 97, 112, 104, 46, 10, 78, 111, 100, 101, 32, 97, 110, 100, 32, 101, 100, 103, 101, 32, 73, 68, 115, 32, 109, 97, 121, 32, 98, 101, 32, 114, 101, 109, 97, 112, 112, 101, 100, 32, 116, 111, 32, 97, 118, 111, 105, 100, 32, 99, 111, 110, 102, 108, 105, 99, 116, 115, 46, 10, 65, 116, 116, 114, 105, 98, 117, 116, 101, 115, 32, 97, 114, 101, 32, 112, 114, 101, 115], original_size: 200, algorithm: None })",False,,,,skipped,,,,,,,Requires parameters: ['other'],,,,,,false,True,,,,,,,discovery,,,true,6,,,(other),,,(other),Graph,add_graph,,,,,118,unknown
,,1,,,,True,['attrs_dict'],,,,,Set multiple edge attributes (bulk operation) - delegates to accessor  ,False,,,,skipped,,,,,,,Requires parameters: ['attrs_dict'],,,,,,false,True,,,,,,,discovery,,,true,10,,,(attrs_dict),,,(attrs_dict),Subgraph,set_edge_attrs,,,,,233,unknown
,,1,,int,,True,"""['node', 'attr']""",,,,,Get single node attribute - delegates to PyGraphAttr,False,,,,skipped,,,,,,,"""Requires parameters: ['node', 'attr']""",,,,,,true,True,,,,,,,discovery,,,true,6,,,"""(node, attr, default=None)""",,,"""(node: int, attr, default=None)""",Graph,get_node_attr,,,"""{""""node"""": """"int""""}""",,144,unknown
,,1,,,,False,[],,,,,Convert table to NodesAccessor by extracting node IDs from the table,False,,,,error,,,,,,,GraphTable to NodesAccessor conversion not yet implemented. Use .nodes() property instead.,,,,,,false,True,,,,,,,discovery,,,true,4,,,(),,,(),GraphTable,to_nodes,,,,,105,unknown
,,1,,,,True,"""['method_name', 'args']""",,,,,"CompressedText(CompressedData { data: [68, 101, 108, 101, 103, 97, 116, 105, 111, 110, 45, 98, 97, 115, 101, 100, 32, 109, 101, 116, 104, 111, 100, 32, 97, 112, 112, 108, 105, 99, 97, 116, 105, 111, 110, 32, 116, 111, 32, 101, 97, 99, 104, 32, 101, 108, 101, 109, 101, 110, 116, 32, 10, 84, 104, 105, 115, 32, 100, 101, 109, 111, 110, 115, 116, 114, 97, 116, 101, 115, 32, 116, 104, 101, 32, 99, 111, 110, 99, 101, 112, 116, 58, 32, 97, 112, 112, 108, 121, 32, 97, 32, 109, 101, 116, 104, 111, 100, 32, 116, 111, 32, 101, 97, 99, 104, 32, 101, 108, 101, 109, 101, 110, 116, 32, 97, 110, 100, 32, 114, 101, 116, 117, 114, 110, 32, 110, 101, 119, 32, 97, 114, 114, 97, 121], original_size: 135, algorithm: None })",False,,,,skipped,str,,,,,,"""Requires parameters: ['method_name', 'args']""",,,,,,true,True,,,,,,,discovery,,,true,11,,,"""(method_name, args)""",,,"""(method_name: str, args)""",GraphArray,apply_to_each,,,"""{""""method_name"""": """"str""""}""",,246,unknown
,,1,,,,False,[],,,,,Get preview of array for display (first 10 elements by default),False,"""[1, 0, 2]""",,,success,,,,,,21,,,,,,,false,True,test_execution,,,,,,discovery,,,true,11,,,(limit=None),,,(limit=None),GraphArray,preview,,,,,259,list
,,1,,,,False,[],,,,,Convert to BaseTable (loses node-specific typing),False,BaseTable[3 x 3],,,success,,,,,,0,,,,,,,false,True,test_execution,,,,,,discovery,,,true,2,,,(),,,(),NodesTable,into_base_table,,,,,40,BaseTable
,,1,,,,False,[],,,,,Calculate graph density (number of edges / number of possible edges) - PURE DELEGATION,False,0.6666666666666666,,,success,,,,,,26,,,,,,,false,True,test_execution,,,,,,discovery,,,true,6,,,(),,,(),Graph,density,,,,,135,float
,,1,,,,True,['n'],,,,,,False,BaseArray[5] (dtype: Int),,,success_with_params,,,,,,5,,,,,,,false,True,test_execution,,,,,,discovery,,,true,5,,,(n),,,(n),BaseArray,tail,,,,,114,BaseArray
,,1,,,,False,[],,,,,"""Get node IDs as a GraphArray
Implements: g.nodes.ids()""",False,"""GraphArray(len=3, dtype=int64)""",,,success,,,,,,11,,,,,,,false,True,test_execution,,,,,,discovery,,,true,7,,,(),,,(),Nodes,ids,,,,,180,GraphArray
,,1,,,,False,[],,,,,Edge count property,False,2,,,success,,,,,,19,,,,,,,false,True,test_execution,,,,,,discovery,,,true,10,,,(),,,(),Subgraph,edge_count,,,,,207,int
,,1,,,,,[],,,,,D.clear() -> None.  Remove all items from D.,False,,,,,,,,,,,,,,,,,false,True,,,,,,,discovery,,,,12,,,signature_unavailable,,,signature_unavailable,Matrix,clear,,,,,271,unknown
,,1,,,,False,[],,,,,Get reference to underlying BaseTable,False,BaseTable[3 x 3],,,success,,,,,,0,,,,,,,false,True,test_execution,,,,,,discovery,,,true,2,,,(),,,(),NodesTable,base_table,,,,,30,BaseTable
,,1,,,,False,[],,,,,Get table iterator for chaining,False,<groggy.EdgesTableIterator object at 0x10961fa30>,,,success,,,,,,22,,,,,,,false,True,test_execution,,,,,,discovery,,,true,3,,,(),,,(),EdgesTable,iter,,,,,73,EdgesTableIterator
,,1,,,,False,[],,,,,Return the entity type string,False,Subgraph,,,success,,,,,,15,,,,,,,false,True,test_execution,,,,,,discovery,,,true,10,,,(),,,(),Subgraph,entity_type,,,,,210,str
,,1,,,,True,"""['method_name', 'args']""",,,,,"CompressedText(CompressedData { data: [68, 101, 108, 101, 103, 97, 116, 105, 111, 110, 45, 98, 97, 115, 101, 100, 32, 109, 101, 116, 104, 111, 100, 32, 97, 112, 112, 108, 105, 99, 97, 116, 105, 111, 110, 32, 116, 111, 32, 101, 97, 99, 104, 32, 101, 108, 101, 109, 101, 110, 116, 32, 10, 84, 104, 105, 115, 32, 100, 101, 109, 111, 110, 115, 116, 114, 97, 116, 101, 115, 32, 116, 104, 101, 32, 99, 111, 110, 99, 101, 112, 116, 58, 32, 97, 112, 112, 108, 121, 32, 97, 32, 109, 101, 116, 104, 111, 100, 32, 116, 111, 32, 101, 97, 99, 104, 32, 101, 108, 101, 109, 101, 110, 116, 32, 97, 110, 100, 32, 114, 101, 116, 117, 114, 110, 32, 110, 101, 119, 32, 97, 114, 114, 97, 121], original_size: 135, algorithm: None })",False,,,,skipped,str,,,,,,"""Requires parameters: ['method_name', 'args']""",,,,,,true,True,,,,,,,discovery,,,true,5,,,"""(method_name, args)""",,,"""(method_name: str, args)""",BaseArray,apply_to_each,,,"""{""""method_name"""": """"str""""}""",,109,unknown
,,1,,,,False,[],,,,,Get connected components within this subgraph (lazy array),False,ComponentsArray(1 components),,,success,,,,,,9,,,,,,,false,True,test_execution,,,,,,discovery,,,true,10,,,(),,,(),Subgraph,connected_components,,,,,201,ComponentsArray
,,1,,,,False,[],,,,,Simple adjacency matrix (alias) - delegates to PyGraphMatrixHelper,False,"""GraphMatrix(3 x 3, dtype=Float)""",,,success,,,,,,25,,,,,,,false,True,test_execution,,,,,,discovery,,,true,6,,,(),,,(),Graph,adjacency,,,,,121,GraphMatrix
,,1,,,,True,['attrs_dict'],,,,,"CompressedText(CompressedData { data: [83, 101, 116, 32, 97, 116, 116, 114, 105, 98, 117, 116, 101, 115, 32, 102, 111, 114, 32, 109, 117, 108, 116, 105, 112, 108, 101, 32, 110, 111, 100, 101, 115, 32, 40, 98, 117, 108, 107, 32, 111, 112, 101, 114, 97, 116, 105, 111, 110, 41, 10, 83, 117, 112, 112, 111, 114, 116, 115, 32, 116, 104, 101, 32, 115, 97, 109, 101, 32, 102, 111, 114, 109, 97, 116, 115, 32, 97, 115, 32, 116, 104, 101, 32, 109, 97, 105, 110, 32, 103, 114, 97, 112, 104, 58, 32, 110, 111, 100, 101, 45, 99, 101, 110, 116, 114, 105, 99, 44, 32, 99, 111, 108, 117, 109, 110, 45, 99, 101, 110, 116, 114, 105, 99, 44, 32, 101, 116, 99, 46], original_size: 130, algorithm: None })",False,,,,skipped,,,,,,,Requires parameters: ['attrs_dict'],,,,,,false,True,,,,,,,discovery,,,true,7,,,(attrs_dict),,,(attrs_dict),Nodes,set_attrs,,,,,181,unknown
,,1,,,,True,"""['attribute', 'aggregation_attr', 'operation']""",,,,,Group nodes by attribute value and compute aggregates (public method for benchmarks),False,,,,skipped,,,,,,,"""Requires parameters: ['attribute', 'aggregation_attr', 'operation']""",,,,,,false,True,,,,,,,discovery,,,true,6,,,"""(attribute, aggregation_attr, operation)""",,,"""(attribute, aggregation_attr, operation)""",Graph,group_by,,,,,147,unknown
,,1,,,,True,['columns'],,,,,"CompressedText(CompressedData { data: [68, 114, 111, 112, 32, 99, 111, 108, 117, 109, 110, 115, 32, 102, 114, 111, 109, 32, 116, 104, 101, 32, 116, 97, 98, 108, 101, 32, 40, 99, 97, 110, 110, 111, 116, 32, 100, 114, 111, 112, 32, 101, 100, 103, 101, 95, 105, 100, 44, 32, 115, 111, 117, 114, 99, 101, 44, 32, 111, 114, 32, 116, 97, 114, 103, 101, 116, 41, 10, 10, 65, 114, 103, 115, 58, 10, 32, 32, 32, 32, 99, 111, 108, 117, 109, 110, 115, 58, 32, 76, 105, 115, 116, 32, 111, 102, 32, 99, 111, 108, 117, 109, 110, 32, 110, 97, 109, 101, 115, 32, 116, 111, 32, 100, 114, 111, 112, 10, 10, 82, 101, 116, 117, 114, 110, 115, 58, 10, 32, 32, 32, 32, 80, 121, 69, 100, 103, 101, 115, 84, 97, 98, 108, 101, 58, 32, 65, 32, 110, 101, 119, 32, 116, 97, 98, 108, 101, 32, 119, 105, 116, 104, 111, 117, 116, 32, 116, 104, 101, 32, 115, 112, 101, 99, 105, 102, 105, 101, 100, 32, 99, 111, 108, 117, 109, 110, 115], original_size: 187, algorithm: None })",False,,,,skipped,,,list,,,,Requires parameters: ['columns'],,,,,,true,True,,,,,,,discovery,,,true,3,,,(columns),,,(columns: list),EdgesTable,drop_columns,,,"""{""""columns"""": """"list""""}""",,60,unknown
,,1,,,,True,"""['edge', 'attr']""",,,int,,Get single edge attribute - delegates to PyGraphAttr,False,,,,skipped,,,,,,,"""Requires parameters: ['edge', 'attr']""",,,,,,true,True,,,,,,,discovery,,,true,6,,,"""(edge, attr, default=None)""",,,"""(edge: int, attr, default=None)""",Graph,get_edge_attr,,,"""{""""edge"""": """"int""""}""",,142,unknown
,,1,,,,False,[],,,,,Get rich display representation using Rust formatter,False,"CompressedText(CompressedData { data: [226, 138, 150, 226, 138, 150, 32, 103, 114, 46, 116, 97, 98, 108, 101, 10, 226, 149, 173, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 172, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 172, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 172, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 149, 174, 10, 226, 148, 130, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 148, 130, 32, 110, 97, 109, 101, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 226, 148, 130, 32, 116, 121, 112, 101, 32, 32], original_size: 450, algorithm: None })",,,success,,,,,,15,,,,,,,false,True,test_execution,,,,,,discovery,,,true,0,,,(config=None),,,(config=None),BaseTable,rich_display,,,,,16,str
,,1,,,,True,['path'],,,,,"""Import EdgesTable from CSV file (must contain edge_id, source, target columns)""",False,,,,skipped,,,,,,,Requires parameters: ['path'],,,,,,true,True,,,str,,,,discovery,,,true,3,,,(path),,,(path: str),EdgesTable,from_csv,,,"""{""""path"""": """"str""""}""",,66,unknown
,,1,,,,False,[],,,,,"CompressedText(CompressedData { data: [71, 101, 116, 32, 97, 108, 108, 32, 101, 100, 103, 101, 115, 32, 97, 115, 32, 97, 32, 115, 117, 98, 103, 114, 97, 112, 104, 32, 40, 101, 113, 117, 105, 118, 97, 108, 101, 110, 116, 32, 116, 111, 32, 103, 46, 101, 100, 103, 101, 115, 91, 58, 93, 41, 32, 45, 32, 68, 69, 76, 69, 71, 65, 84, 69, 68, 32, 116, 111, 32, 83, 117, 98, 103, 114, 97, 112, 104, 79, 112, 101, 114, 97, 116, 105, 111, 110, 115, 10, 82, 101, 116, 117, 114, 110, 115, 32, 97, 32, 115, 117, 98, 103, 114, 97, 112, 104, 32, 99, 111, 110, 116, 97, 105, 110, 105, 110, 103, 32, 97, 108, 108, 32, 110, 111, 100, 101, 115, 32, 116, 104, 97, 116, 32, 97, 114, 101, 32, 99, 111, 110, 110, 101, 99, 116, 101, 100, 32, 98, 121, 32, 116, 104, 101, 32, 101, 100, 103, 101, 115, 32, 97, 110, 100, 32, 97, 108, 108, 32, 101, 100, 103, 101, 115], original_size: 174, algorithm: None })",False,"CompressedText(CompressedData { data: [83, 117, 98, 103, 114, 97, 112, 104, 32, 119, 105, 116, 104, 32, 51, 32, 110, 111, 100, 101, 115, 32, 97, 110, 100, 32, 50, 32, 101, 100, 103, 101, 115, 10, 10, 69, 100, 103, 101, 115, 58, 10, 32, 32, 73, 68, 32, 32, 32, 32, 83, 111, 117, 114, 99, 101, 32, 226, 134, 146, 32, 84, 97, 114, 103, 101, 116, 10, 32, 32, 45, 45, 45, 45, 32, 32, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 10, 32, 32, 32, 32, 32, 48, 32, 32, 32, 32, 32, 32, 32, 48, 32, 226, 134, 146, 32, 49, 10, 32, 32, 32, 32, 32, 49, 32, 32, 32, 32, 32, 32, 32, 49, 32, 226, 134, 146, 32, 50], original_size: 133, algorithm: None })",,,success,,,,,,10,,,,,,,false,True,test_execution,,,,,,discovery,,,true,8,,,(),,,(),Edges,all,,,,,183,Subgraph
,,1,,,,False,[],,,,,Get rich display representation using Rust formatter,False,"CompressedText(CompressedData { data: [226, 149, 173, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 172, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 149, 174, 10, 226, 148, 130, 32, 35, 32, 226, 148, 130, 32, 118, 97, 108, 117, 101, 32, 226, 148, 130, 10, 226, 148, 130, 32, 32, 32, 226, 148, 130, 32, 111, 98, 106, 32, 32, 32, 226, 148, 130, 10, 226, 148, 156, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 188, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 164, 10, 226, 148, 130, 32, 48, 32, 226, 148, 130, 32, 49, 32, 32, 32, 32, 32, 226, 148, 130, 10, 226, 148, 130, 32, 49, 32, 226, 148, 130, 32, 48, 32, 32, 32, 32, 32, 226, 148, 130, 10, 226, 148, 130, 32, 50, 32, 226, 148, 130, 32, 50, 32, 32, 32, 32, 32, 226, 148, 130, 10, 226, 149, 176, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 180, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 149, 175, 10, 114, 111, 119, 115, 58, 32, 51, 32, 226, 128, 162, 32, 116, 121, 112, 101, 58, 32, 71, 114, 97, 112, 104, 65, 114, 114, 97, 121, 32, 226, 128, 162, 32, 100, 116, 121, 112, 101, 58, 32, 105, 110, 116, 54, 52], original_size: 265, algorithm: None })",,,success,,,,,,15,,,,,,,false,True,test_execution,,,,,,discovery,,,true,11,,,(config=None),,,(config=None),GraphArray,rich_display,,,,,261,str
,,1,,,,True,['nodes'],,int,,,Create induced subgraph from list of nodes,False,,,,skipped,,,,,,,Requires parameters: ['nodes'],,,,,,true,True,,,,,,,discovery,,,true,10,,,(nodes),,,(nodes: int),Subgraph,induced_subgraph,,,"""{""""nodes"""": """"int""""}""",,221,unknown
,,1,,,,True,['columns'],,,,,"CompressedText(CompressedData { data: [83, 101, 108, 101, 99, 116, 32, 115, 112, 101, 99, 105, 102, 105, 99, 32, 99, 111, 108, 117, 109, 110, 115, 32, 116, 111, 32, 99, 114, 101, 97, 116, 101, 32, 97, 32, 110, 101, 119, 32, 116, 97, 98, 108, 101, 10, 10, 65, 114, 103, 115, 58, 10, 32, 32, 32, 32, 99, 111, 108, 117, 109, 110, 115, 58, 32, 76, 105, 115, 116, 32, 111, 102, 32, 99, 111, 108, 117, 109, 110, 32, 110, 97, 109, 101, 115, 32, 116, 111, 32, 115, 101, 108, 101, 99, 116, 10, 10, 82, 101, 116, 117, 114, 110, 115, 58, 10, 32, 32, 32, 32, 80, 121, 78, 111, 100, 101, 115, 84, 97, 98, 108, 101, 58, 32, 65, 32, 110, 101, 119, 32, 116, 97, 98, 108, 101, 32, 119, 105, 116, 104, 32, 111, 110, 108, 121, 32, 116, 104, 101, 32, 115, 101, 108, 101, 99, 116, 101, 100, 32, 99, 111, 108, 117, 109, 110, 115], original_size: 167, algorithm: None })",False,,,,skipped,,,list,,,,Requires parameters: ['columns'],,,,,,true,True,,,,,,,discovery,,,true,2,,,(columns),,,(columns: list),NodesTable,select,,,"""{""""columns"""": """"list""""}""",,46,unknown
,,1,,,,False,[],,,,,Get last n rows (default 5),False,BaseTable[3 x 3],,,success,,,,,,0,,,,,,,false,True,test_execution,,,,,,discovery,,,true,0,,,(n=5),,,(n=5),BaseTable,tail,,,,,24,BaseTable
,,1,,,,True,['column'],,,,,"CompressedText(CompressedData { data: [83, 111, 114, 116, 32, 116, 97, 98, 108, 101, 32, 98, 121, 32, 99, 111, 108, 117, 109, 110, 10, 10, 65, 114, 103, 115, 58, 10, 32, 32, 32, 32, 99, 111, 108, 117, 109, 110, 58, 32, 78, 97, 109, 101, 32, 111, 102, 32, 116, 104, 101, 32, 99, 111, 108, 117, 109, 110, 32, 116, 111, 32, 115, 111, 114, 116, 32, 98, 121, 10, 32, 32, 32, 32, 97, 115, 99, 101, 110, 100, 105, 110, 103, 58, 32, 73, 102, 32, 84, 114, 117, 101, 44, 32, 115, 111, 114, 116, 32, 105, 110, 32, 97, 115, 99, 101, 110, 100, 105, 110, 103, 32, 111, 114, 100, 101, 114, 59, 32, 105, 102, 32, 70, 97, 108, 115, 101, 44, 32, 100, 101, 115, 99, 101, 110, 100, 105, 110, 103, 10, 10, 82, 101, 116, 117, 114, 110, 115, 58, 10, 32, 32, 32, 32, 80, 121, 66, 97, 115, 101, 84, 97, 98, 108, 101, 58, 32, 65, 32, 110, 101, 119, 32, 115, 111, 114, 116, 101, 100, 32, 116, 97, 98, 108, 101], original_size: 185, algorithm: None })",False,,,,skipped,,,,,,,Requires parameters: ['column'],,,,,,true,True,,,,,,,discovery,,,true,0,,list,"""(column, ascending=True)""",,,"""(column: list, ascending=True)""",BaseTable,sort_by,,,"""{""""column"""": """"list""""}""",,23,unknown
,,1,,int,,True,"""['node', 'attr', 'value']""",,,,,Set single node attribute - delegates to PyGraphAttrMut,False,,,,skipped,,,,,,,"""Requires parameters: ['node', 'attr', 'value']""",,,,,,true,True,,,,,,,discovery,,,true,6,,,"""(node, attr, value)""",,,"""(node: int, attr, value)""",Graph,set_node_attr,,,"""{""""node"""": """"int""""}""",,169,unknown
,,1,,,,False,[],,,,,Convert to Pandas Series (when pandas available),False,"""0    1
1    0
2    2
dtype: int64""",,,success,,,,,,36,,,,,,,false,True,test_execution,,,,,,discovery,,,true,11,,,(),,,(),GraphArray,to_pandas,,,,,266,Series
,,1,,,,False,[],,,,,Get all unique edge attribute names across the entire graph,False,['method'],,,success,,,,,,21,,,,,,,false,True,test_execution,,,,,,discovery,,,true,6,,,(),,,(),Graph,all_edge_attribute_names,,,,,124,list
,,1,,,,False,[],,,,,"CompressedText(CompressedData { data: [69, 120, 116, 114, 97, 99, 116, 32, 105, 110, 100, 105, 99, 101, 115, 32, 119, 104, 101, 114, 101, 32, 98, 111, 111, 108, 101, 97, 110, 32, 97, 114, 114, 97, 121, 32, 105, 115, 32, 84, 114, 117, 101, 10, 84, 104, 105, 115, 32, 105, 115, 32, 117, 115, 101, 100, 32, 102, 111, 114, 32, 101, 102, 102, 105, 99, 105, 101, 110, 116, 32, 98, 111, 111, 108, 101, 97, 110, 32, 105, 110, 100, 101, 120, 105, 110, 103, 32, 119, 105, 116, 104, 32, 110, 111, 100, 101, 47, 101, 100, 103, 101, 32, 97, 99, 99, 101, 115, 115, 111, 114, 115], original_size: 112, algorithm: None })",False,[],,,success,,,,,,21,,,,,,,false,True,test_execution,,,,,,discovery,,,true,11,,,(),,,(),GraphArray,true_indices,,,,,268,list
,,1,,,,True,"""['attribute', 'operation']""",,,,,Aggregate attribute values across nodes or edges,False,,,,skipped,,,,,,,"""Requires parameters: ['attribute', 'operation']""",,,,,,false,True,,,,,,,discovery,,,true,6,,,"""(attribute, operation, target=None, _node_ids=None)""",,,"""(attribute, operation, target=None, _node_ids=None)""",Graph,aggregate,,,,,123,unknown
,,1,,,,True,['weight_attr'],,,,,Get weighted adjacency matrix - delegates to PyGraphMatrixHelper,False,,,,skipped,,,,,,,Requires parameters: ['weight_attr'],,,,,,false,True,,,,,,,discovery,,,true,6,,,(weight_attr),,,(weight_attr),Graph,weighted_adjacency_matrix,,,,,177,unknown
,,1,,,,False,[],,,,,Get first n rows (default 5),False,"CompressedText(CompressedData { data: [69, 100, 103, 101, 115, 84, 97, 98, 108, 101, 91, 50, 32, 120, 32, 52, 93, 10, 66, 97, 115, 101, 84, 97, 98, 108, 101, 91, 50, 32, 120, 32, 52, 93, 10, 124, 32, 32, 32, 32, 32, 109, 101, 116, 104, 111, 100, 32, 124, 32, 32, 32, 32, 32, 115, 111, 117, 114, 99, 101, 32, 124, 32, 32, 32, 32, 32, 116, 97, 114, 103, 101, 116, 32, 124, 32, 32, 32, 32, 101, 100, 103, 101, 95, 105, 100, 32, 124, 32, 10, 124, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 124, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 124, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 124, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 124, 10, 124, 32, 32, 32, 32, 32, 32, 116, 97, 98, 108, 101, 32, 124, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 49, 32, 124, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 50, 32, 124, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 49, 32, 124, 32, 10, 124], original_size: 200, algorithm: None })",,,success,,,,,,3,,,,,,,false,True,test_execution,,,,,,discovery,,,true,3,,,(n=5),,,(n=5),EdgesTable,head,,,,,71,EdgesTable
,,1,,,,True,['filter'],,,,,"CompressedText(CompressedData { data: [70, 105, 108, 116, 101, 114, 32, 101, 100, 103, 101, 115, 32, 117, 115, 105, 110, 103, 32, 69, 100, 103, 101, 70, 105, 108, 116, 101, 114, 32, 111, 98, 106, 101, 99, 116, 32, 111, 114, 32, 115, 116, 114, 105, 110, 103, 32, 113, 117, 101, 114, 121, 10, 10, 79, 80, 84, 73, 77, 73, 90, 69, 68, 58, 32, 68, 105, 114, 101, 99, 116, 32, 105, 109, 112, 108, 101, 109, 101, 110, 116, 97, 116, 105, 111, 110, 32, 97, 118, 111, 105, 100, 105, 110, 103, 32, 101, 120, 112, 101, 110, 115, 105, 118, 101, 32, 118, 105, 101, 119, 40, 41, 32, 99, 114, 101, 97, 116, 105, 111, 110, 32, 111, 118, 101, 114, 104, 101, 97, 100], original_size: 130, algorithm: None })",False,,,,skipped,,,,,,,Requires parameters: ['filter'],,,,,,false,True,,,,,,,discovery,,,true,6,,,(filter),,,(filter),Graph,filter_edges,,,,,140,unknown
,,1,,,,False,[],,,,,"CompressedText(CompressedData { data: [71, 101, 116, 32, 99, 104, 105, 108, 100, 32, 109, 101, 116, 97, 45, 110, 111, 100, 101, 115, 32, 105, 102, 32, 116, 104, 105, 115, 32, 115, 117, 98, 103, 114, 97, 112, 104, 32, 99, 111, 110, 116, 97, 105, 110, 115, 32, 116, 104, 101, 109, 10, 78, 79, 84, 69, 58, 32, 84, 104, 105, 115, 32, 102, 101, 97, 116, 117, 114, 101, 32, 105, 115, 32, 110, 111, 116, 32, 121, 101, 116, 32, 105, 109, 112, 108, 101, 109, 101, 110, 116, 101, 100, 32, 45, 32, 97, 108, 119, 97, 121, 115, 32, 114, 101, 116, 117, 114, 110, 115, 32, 101, 109, 112, 116, 121, 32, 108, 105, 115, 116], original_size: 121, algorithm: None })",False,[],,,success,,,,,,21,,,,,,,false,True,test_execution,,,,,,discovery,,,true,10,,,(),,,(),Subgraph,child_meta_nodes,,,,,196,list
,,1,,,,True,"""['edge_id', 'attr_name']""",,,,,Check if edge has specific attribute - delegates to PyGraphAttr,False,,,,skipped,,,,,,,"""Requires parameters: ['edge_id', 'attr_name']""",,,,int,,true,True,,,,,,,discovery,,,true,6,,,"""(edge_id, attr_name)""",,,"""(edge_id: int, attr_name: str)""",Graph,has_edge_attribute,,,"""{""""edge_id"""": """"int"""", """"attr_name"""": """"str""""}""",str,150,unknown
,,1,,,,True,"""['edge_id', 'attr_name']""",,,,,Get a single edge attribute value,False,,,,skipped,,,,,,,"""Requires parameters: ['edge_id', 'attr_name']""",,,,int,,true,True,,,,,,,discovery,,,true,10,,,"""(edge_id, attr_name)""",,,"""(edge_id: int, attr_name: str)""",Subgraph,get_edge_attribute,,,"""{""""edge_id"""": """"int"""", """"attr_name"""": """"str""""}""",str,213,unknown
,,1,,,,False,[],,,,,"CompressedText(CompressedData { data: [71, 101, 116, 32, 101, 100, 103, 101, 115, 32, 102, 114, 111, 109, 32, 116, 104, 105, 115, 32, 115, 117, 98, 103, 114, 97, 112, 104, 32, 97, 115, 32, 97, 110, 32, 69, 100, 103, 101, 115, 65, 99, 99, 101, 115, 115, 111, 114, 32, 32, 10, 69, 110, 97, 98, 108, 101, 115, 32, 99, 104, 97, 105, 110, 105, 110, 103, 32, 108, 105, 107, 101, 58, 32, 115, 117, 98, 103, 114, 97, 112, 104, 46, 116, 111, 95, 101, 100, 103, 101, 115, 40, 41, 46, 116, 111, 95, 110, 111, 100, 101, 115, 40, 41, 46, 99, 111, 110, 110, 101, 99, 116, 101, 100, 95, 99, 111, 109, 112, 111, 110, 101, 110, 116, 115, 40, 41], original_size: 127, algorithm: None })",False,EdgesAccessor(2 edges),,,success,,,,,,32,,,,,,,false,True,test_execution,,,,,,discovery,,,true,10,,,(),,,(),Subgraph,to_edges,,,,,240,EdgesAccessor
,,1,,,,True,['column'],,,,,"CompressedText(CompressedData { data: [83, 111, 114, 116, 32, 116, 97, 98, 108, 101, 32, 98, 121, 32, 99, 111, 108, 117, 109, 110, 10, 10, 65, 114, 103, 115, 58, 10, 32, 32, 32, 32, 99, 111, 108, 117, 109, 110, 58, 32, 78, 97, 109, 101, 32, 111, 102, 32, 116, 104, 101, 32, 99, 111, 108, 117, 109, 110, 32, 116, 111, 32, 115, 111, 114, 116, 32, 98, 121, 10, 32, 32, 32, 32, 97, 115, 99, 101, 110, 100, 105, 110, 103, 58, 32, 73, 102, 32, 84, 114, 117, 101, 44, 32, 115, 111, 114, 116, 32, 105, 110, 32, 97, 115, 99, 101, 110, 100, 105, 110, 103, 32, 111, 114, 100, 101, 114, 59, 32, 105, 102, 32, 70, 97, 108, 115, 101, 44, 32, 100, 101, 115, 99, 101, 110, 100, 105, 110, 103, 10, 10, 82, 101, 116, 117, 114, 110, 115, 58, 10, 32, 32, 32, 32, 80, 121, 69, 100, 103, 101, 115, 84, 97, 98, 108, 101, 58, 32, 65, 32, 110, 101, 119, 32, 115, 111, 114, 116, 101, 100, 32, 116, 97, 98, 108, 101], original_size: 186, algorithm: None })",False,,,,skipped,,,,,,,Requires parameters: ['column'],,,,,,true,True,,,,,,,discovery,,,true,3,,list,"""(column, ascending=True)""",,,"""(column: list, ascending=True)""",EdgesTable,sort_by,,,"""{""""column"""": """"list""""}""",,80,unknown
,,1,,,,True,['tables'],,,,,Merge multiple GraphTables into one,False,,,,skipped,,,,,,,Requires parameters: ['tables'],,,,,,false,True,,,,,,,discovery,,,true,4,,,(tables),,,(tables),GraphTable,merge,,,,,94,unknown
,,1,,,,False,[],,,,,"CompressedText(CompressedData { data: [82, 101, 109, 111, 118, 101, 32, 97, 110, 100, 32, 114, 101, 116, 117, 114, 110, 32, 97, 32, 40, 107, 101, 121, 44, 32, 118, 97, 108, 117, 101, 41, 32, 112, 97, 105, 114, 32, 97, 115, 32, 97, 32, 50, 45, 116, 117, 112, 108, 101, 46, 10, 10, 80, 97, 105, 114, 115, 32, 97, 114, 101, 32, 114, 101, 116, 117, 114, 110, 101, 100, 32, 105, 110, 32, 76, 73, 70, 79, 32, 40, 108, 97, 115, 116, 45, 105, 110, 44, 32, 102, 105, 114, 115, 116, 45, 111, 117, 116, 41, 32, 111, 114, 100, 101, 114, 46, 10, 82, 97, 105, 115, 101, 115, 32, 75, 101, 121, 69, 114, 114, 111, 114, 32, 105, 102, 32, 116, 104, 101, 32, 100, 105, 99, 116, 32, 105, 115, 32, 101, 109, 112, 116, 121, 46], original_size: 145, algorithm: None })",False,"""('matrix', GraphMatrix(3 x 3, dtype=Float))""",,,success,,,,,,20,,,,,,,false,True,test_execution,,,,,,discovery,,,true,12,,,(),,,(),Matrix,popitem,,,,,278,tuple
,,1,,,,True,"""['edge', 'attr', 'value']""",,,int,,Set single edge attribute - delegates to PyGraphAttrMut,False,,,,skipped,,,,,,,"""Requires parameters: ['edge', 'attr', 'value']""",,,,,,true,True,,,,,,,discovery,,,true,6,,,"""(edge, attr, value)""",,,"""(edge: int, attr, value)""",Graph,set_edge_attr,,,"""{""""edge"""": """"int""""}""",,167,unknown
,,1,,,,True,['node_id'],,,,,Check if subgraph contains a specific node (alias for has_node),False,,,,skipped,,,,,,,Requires parameters: ['node_id'],,,,,,true,True,,,,,int,,discovery,,,true,10,,,(node_id),,,(node_id: int),Subgraph,contains_node,,,"""{""""node_id"""": """"int""""}""",,203,unknown
,,1,,,,True,['fill_value'],,,,,"""Fill null values with a specified value, returning a new array""",False,,,,skipped,,,,,,,Requires parameters: ['fill_value'],,,,,,false,True,,,,,,,discovery,,,true,11,,,(fill_value),,,(fill_value),GraphArray,fill_na,,,,,250,unknown
,,1,,,,False,[],,,,,Get Laplacian matrix - delegates to PyGraphMatrixHelper,False,"""GraphMatrix(3 x 3, dtype=Float)""",,,success,,,,,,25,,,,,,,false,True,test_execution,,,,,,discovery,,,true,6,,,(normalized=None),,,(normalized=None),Graph,laplacian_matrix,,,,,156,GraphMatrix
,,1,,,,True,['filter'],,,,,Filter nodes and return new subgraph  ,False,,,,skipped,,,,,,,Requires parameters: ['filter'],,,,,,false,True,,,,,,,discovery,,,true,10,,,(filter),,,(filter),Subgraph,filter_nodes,,,,,212,unknown
,,1,,,,True,['updates'],,,,,"CompressedText(CompressedData { data: [65, 115, 115, 105, 103, 110, 32, 117, 112, 100, 97, 116, 101, 115, 32, 116, 111, 32, 109, 117, 108, 116, 105, 112, 108, 101, 32, 99, 111, 108, 117, 109, 110, 115, 32, 97, 116, 32, 111, 110, 99, 101, 10, 10, 65, 114, 103, 115, 58, 10, 32, 32, 32, 32, 117, 112, 100, 97, 116, 101, 115, 58, 32, 68, 105, 99, 116, 105, 111, 110, 97, 114, 121, 32, 109, 97, 112, 112, 105, 110, 103, 32, 99, 111, 108, 117, 109, 110, 32, 110, 97, 109, 101, 115, 32, 116, 111, 32, 118, 97, 108, 117, 101, 115, 46, 32, 86, 97, 108, 117, 101, 115, 32, 99, 97, 110, 32, 98, 101, 58, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 45, 32, 76, 105, 115, 116, 115, 58, 32, 91, 39, 118, 97, 108, 117, 101, 49, 39, 44, 32, 39, 118, 97, 108, 117, 101, 50, 39, 44, 32, 46, 46, 46, 93, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 45, 32, 68, 105, 99, 116, 105, 111, 110, 97, 114, 105, 101, 115, 32, 119], original_size: 200, algorithm: None })",False,,,,skipped,,,,,,,Requires parameters: ['updates'],,,,,,true,True,,,,,,,discovery,,,true,0,dict,,(updates),,,(updates: dict),BaseTable,assign,,,"""{""""updates"""": """"dict""""}""",,2,unknown
,,1,,,,True,['target_nodes'],,,,,Filter edges by target nodes,False,,,,skipped,,,,,,,Requires parameters: ['target_nodes'],,,int,,,true,True,,,,,,,discovery,,,true,3,,,(target_nodes),,,(target_nodes: int),EdgesTable,filter_by_targets,,,"""{""""target_nodes"""": """"int""""}""",,65,unknown
,,1,,,,False,[],,,,,Get table iterator for chaining,False,<groggy.BaseTableIterator object at 0x104a6a0b0>,,,success,,,,,,14,,,,,,,false,True,test_execution,,,,,,discovery,,,true,0,,,(),,,(),BaseTable,iter,,,,,14,BaseTableIterator
,,1,,,,True,['key'],,,,,"CompressedText(CompressedData { data: [73, 110, 115, 101, 114, 116, 32, 107, 101, 121, 32, 119, 105, 116, 104, 32, 97, 32, 118, 97, 108, 117, 101, 32, 111, 102, 32, 100, 101, 102, 97, 117, 108, 116, 32, 105, 102, 32, 107, 101, 121, 32, 105, 115, 32, 110, 111, 116, 32, 105, 110, 32, 116, 104, 101, 32, 100, 105, 99, 116, 105, 111, 110, 97, 114, 121, 46, 10, 10, 82, 101, 116, 117, 114, 110, 32, 116, 104, 101, 32, 118, 97, 108, 117, 101, 32, 102, 111, 114, 32, 107, 101, 121, 32, 105, 102, 32, 107, 101, 121, 32, 105, 115, 32, 105, 110, 32, 116, 104, 101, 32, 100, 105, 99, 116, 105, 111, 110, 97, 114, 121, 44, 32, 101, 108, 115, 101, 32, 100, 101, 102, 97, 117, 108, 116, 46], original_size: 136, algorithm: None })",False,,,,skipped,,,,,,,Requires parameters: ['key'],,,,,,false,True,,,,,,,discovery,,,true,12,,,"""(key, default=None, /)""",,,"""(key, default=None, /)""",Matrix,setdefault,,,,,279,unknown
,,1,,,,True,['path'],,,,,Export BaseTable to Parquet file ,False,,,,skipped,,,,,,,Requires parameters: ['path'],,,,,,true,True,,,str,,,,discovery,,,true,0,,,(path),,,(path: str),BaseTable,to_parquet,,,"""{""""path"""": """"str""""}""",,28,unknown
,,1,,,str,True,['bundle_path'],,,,,"CompressedText(CompressedData { data: [76, 111, 97, 100, 32, 71, 114, 97, 112, 104, 84, 97, 98, 108, 101, 32, 102, 114, 111, 109, 32, 97, 32, 98, 117, 110, 100, 108, 101, 32, 100, 105, 114, 101, 99, 116, 111, 114, 121, 32, 40, 115, 117, 112, 112, 111, 114, 116, 115, 32, 98, 111, 116, 104, 32, 118, 49, 46, 48, 32, 97, 110, 100, 32, 118, 50, 46, 48, 32, 102, 111, 114, 109, 97, 116, 115, 41, 10, 10, 35, 32, 65, 114, 103, 117, 109, 101, 110, 116, 115, 10, 42, 32, 96, 98, 117, 110, 100, 108, 101, 95, 112, 97, 116, 104, 96, 32, 45, 32, 68, 105, 114, 101, 99, 116, 111, 114, 121, 32, 112, 97, 116, 104, 32, 99, 111, 110, 116, 97, 105, 110, 105, 110, 103, 32, 116, 104, 101, 32, 98, 117, 110, 100, 108, 101, 10, 10, 35, 32, 82, 101, 116, 117, 114, 110, 115, 10, 42, 32, 96, 80, 121, 71, 114, 97, 112, 104, 84, 97, 98, 108, 101, 96, 32, 45, 32, 76, 111, 97, 100, 101, 100, 32, 103, 114, 97, 112, 104, 32, 116, 97, 98, 108, 101, 32, 119, 105, 116, 104, 32], original_size: 200, algorithm: None })",False,,,,skipped,,,,,,,Requires parameters: ['bundle_path'],,,,,,true,True,,,,,,,discovery,,,true,4,,,(bundle_path),,,(bundle_path: str),GraphTable,load_bundle,,,"""{""""bundle_path"""": """"str""""}""",,93,unknown
,,1,,,,True,['edge_id'],,,,,"""Get edge endpoints (source, target)""",False,,,,skipped,,,,,,,Requires parameters: ['edge_id'],,,,int,,true,True,,,,,,,discovery,,,true,10,,,(edge_id),,,(edge_id: int),Subgraph,edge_endpoints,,,"""{""""edge_id"""": """"int""""}""",,208,unknown
,,1,,,,False,[],,,,,Calculate mean (average) of numeric values,False,1.0,,,success,,,,,,26,,,,,,,false,True,test_execution,,,,,,discovery,,,true,11,,,(),,,(),GraphArray,mean,,,,,254,float
,,1,,,,False,[],,,,,"CompressedText(CompressedData { data: [71, 101, 116, 32, 97, 108, 108, 32, 110, 111, 100, 101, 115, 32, 97, 115, 32, 97, 32, 115, 117, 98, 103, 114, 97, 112, 104, 32, 40, 101, 113, 117, 105, 118, 97, 108, 101, 110, 116, 32, 116, 111, 32, 103, 46, 110, 111, 100, 101, 115, 91, 58, 93, 41, 32, 45, 32, 68, 69, 76, 69, 71, 65, 84, 69, 68, 32, 116, 111, 32, 83, 117, 98, 103, 114, 97, 112, 104, 79, 112, 101, 114, 97, 116, 105, 111, 110, 115, 32, 32, 10, 82, 101, 116, 117, 114, 110, 115, 32, 97, 32, 115, 117, 98, 103, 114, 97, 112, 104, 32, 99, 111, 110, 116, 97, 105, 110, 105, 110, 103, 32, 97, 108, 108, 32, 110, 111, 100, 101, 115, 32, 97, 110, 100, 32, 97, 108, 108, 32, 105, 110, 100, 117, 99, 101, 100, 32, 101, 100, 103, 101, 115], original_size: 152, algorithm: None })",False,"CompressedText(CompressedData { data: [83, 117, 98, 103, 114, 97, 112, 104, 32, 119, 105, 116, 104, 32, 51, 32, 110, 111, 100, 101, 115, 32, 97, 110, 100, 32, 50, 32, 101, 100, 103, 101, 115, 10, 10, 69, 100, 103, 101, 115, 58, 10, 32, 32, 73, 68, 32, 32, 32, 32, 83, 111, 117, 114, 99, 101, 32, 226, 134, 146, 32, 84, 97, 114, 103, 101, 116, 10, 32, 32, 45, 45, 45, 45, 32, 32, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 10, 32, 32, 32, 32, 32, 48, 32, 32, 32, 32, 32, 32, 32, 48, 32, 226, 134, 146, 32, 49, 10, 32, 32, 32, 32, 32, 49, 32, 32, 32, 32, 32, 32, 32, 49, 32, 226, 134, 146, 32, 50], original_size: 133, algorithm: None })",,,success,,,,,,10,,,,,,,false,True,test_execution,,,,,,discovery,,,true,7,,,(),,,(),Nodes,all,,,,,178,Subgraph
,,1,,,,False,[],,,,,"""Convert to NumPy array (when numpy available)
Uses .values property to materialize data""",False,[1 0 2],,,success,,,,,,35,,,,,,,false,True,test_execution,,,,,,discovery,,,true,11,,,(),,,(),GraphArray,to_numpy,,,,,265,ndarray
,,1,,,,True,['name'],,,,,Check if column exists,False,True,,,success_with_params,,,,,,13,,,,,,str,true,True,test_execution,,,,,,discovery,,,true,0,,,(name),,,(name: str),BaseTable,has_column,,,"""{""""name"""": """"str""""}""",,11,bool
,,1,,,,False,[],,,,,Convert table to SubgraphArray by creating subgraphs from table rows,False,,,,error,,,,,,,GraphTable to SubgraphArray conversion not yet implemented.,,,,,,false,True,,,,,,,discovery,,,true,4,,,(),,,(),GraphTable,to_subgraphs,,,,,106,unknown
,,1,,,,True,['node_id'],,,,,Get all attribute keys for a node - delegates to PyGraphAttr,False,,,,skipped,,,,,,,Requires parameters: ['node_id'],,,,,,true,True,,,,,int,,discovery,,,true,6,,,(node_id),,,(node_id: int),Graph,node_attribute_keys,,,"""{""""node_id"""": """"int""""}""",,160,unknown
,,1,,,,False,[],,,,,Calculate standard deviation of numeric values,False,1.0,,,success,,,,,,26,,,,,,,false,True,test_execution,,,,,,discovery,,,true,11,,,(),,,(),GraphArray,std,,,,,262,float
,,1,,,,True,['branch_name'],,,,,Checkout a branch (FFI wrapper around core history system),False,,,,skipped,,,,,,,Requires parameters: ['branch_name'],,,,,,true,True,,,,,,,discovery,,,true,6,,,(branch_name),,,(branch_name: str),Graph,checkout_branch,str,,"""{""""branch_name"""": """"str""""}""",,128,unknown
,,1,,,,True,['attrs_dict'],,,,,Set bulk edge attributes - delegates to PyGraphAttrMut,False,,,,skipped,,,,,,,Requires parameters: ['attrs_dict'],,,,,,false,True,,,,,,,discovery,,,true,6,,,(attrs_dict),,,(attrs_dict),Graph,set_edge_attrs,,,,,168,unknown
,,1,,,,False,[],,,,,,False,BaseArray[5] (dtype: Int),,,success,,,,,,5,,,,,,,false,True,test_execution,,,,,,discovery,,,true,5,,,(),,,(),BaseArray,unique,,,,,115,BaseArray
,,1,,,,False,[],,,,,Convert table to EdgesAccessor by extracting edge IDs from the table,False,,,,error,,,,,,,GraphTable to EdgesAccessor conversion not yet implemented. Use .edges() property instead.,,,,,,false,True,,,,,,,discovery,,,true,4,,,(),,,(),GraphTable,to_edges,,,,,103,unknown
,,1,,,,True,"""['attr_name', 'value']""",,,,,Filter edges by attribute value,False,,,,skipped,,,,,,,"""Requires parameters: ['attr_name', 'value']""",,,,,,true,True,,,,,,,discovery,,,true,3,,,"""(attr_name, value)""",,,"""(attr_name: str, value)""",EdgesTable,filter_by_attr,,,"""{""""attr_name"""": """"str""""}""",str,63,unknown
,int,1,,,,True,['edges'],,,,,Add multiple edges at once,False,,,,skipped,,,,,,,Requires parameters: ['edges'],,,,,,true,True,,,,,,,discovery,,,true,6,,,"""(edges, node_mapping=None, _uid_key=None, warm_cache=None)""",,,"""(edges: int, node_mapping=None, _uid_key=None, warm_cache=None)""",Graph,add_edges,,,"""{""""edges"""": """"int""""}""",,117,unknown
,,1,,,,False,[],,,,,"CompressedText(CompressedData { data: [82, 101, 116, 117, 114, 110, 32, 97, 32, 102, 117, 108, 108, 45, 118, 105, 101, 119, 32, 83, 117, 98, 103, 114, 97, 112, 104, 32, 40, 119, 104, 111, 108, 101, 32, 103, 114, 97, 112, 104, 32, 97, 115, 32, 97, 32, 115, 117, 98, 103, 114, 97, 112, 104, 41, 46, 10, 68, 111, 119, 110, 115, 116, 114, 101, 97, 109, 32, 99, 111, 100, 101, 32, 99, 97, 110, 32, 97, 108, 119, 97, 121, 115, 32, 114, 101, 115, 111, 108, 118, 101, 32, 112, 97, 114, 101, 110, 116, 32, 103, 114, 97, 112, 104, 32, 102, 114, 111, 109, 32, 116, 104, 105, 115, 32, 111, 98, 106, 101, 99, 116, 46], original_size: 122, algorithm: None })",False,"CompressedText(CompressedData { data: [83, 117, 98, 103, 114, 97, 112, 104, 32, 119, 105, 116, 104, 32, 51, 32, 110, 111, 100, 101, 115, 32, 97, 110, 100, 32, 50, 32, 101, 100, 103, 101, 115, 10, 10, 69, 100, 103, 101, 115, 58, 10, 32, 32, 73, 68, 32, 32, 32, 32, 83, 111, 117, 114, 99, 101, 32, 226, 134, 146, 32, 84, 97, 114, 103, 101, 116, 10, 32, 32, 45, 45, 45, 45, 32, 32, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 10, 32, 32, 32, 32, 32, 49, 32, 32, 32, 32, 32, 32, 32, 49, 32, 226, 134, 146, 32, 50, 10, 32, 32, 32, 32, 32, 48, 32, 32, 32, 32, 32, 32, 32, 48, 32, 226, 134, 146, 32, 49], original_size: 133, algorithm: None })",,,success,,,,,,10,,,,,,,false,True,test_execution,,,,,,discovery,,,true,6,,,(),,,(),Graph,view,,,,,176,Subgraph
,,1,list,,,True,"""['source', 'target']""",,,,,Check if edge exists between two nodes,False,,,,skipped,,,,,list,,"""Requires parameters: ['source', 'target']""",,,,,,true,True,,,,,,,discovery,,,true,10,,,"""(source, target)""",,,"""(source: list, target: list)""",Subgraph,has_edge_between,,,"""{""""source"""": """"list"""", """"target"""": """"list""""}""",,216,unknown
,,1,,,,True,['predicate'],,,,,"CompressedText(CompressedData { data: [70, 105, 108, 116, 101, 114, 32, 114, 111, 119, 115, 32, 117, 115, 105, 110, 103, 32, 97, 32, 113, 117, 101, 114, 121, 32, 101, 120, 112, 114, 101, 115, 115, 105, 111, 110, 32, 111, 114, 32, 80, 121, 116, 104, 111, 110, 32, 102, 117, 110, 99, 116, 105, 111, 110, 10, 10, 65, 114, 103, 115, 58, 10, 32, 32, 32, 32, 112, 114, 101, 100, 105, 99, 97, 116, 101, 58, 32, 69, 105, 116, 104, 101, 114, 32, 97, 32, 115, 116, 114, 105, 110, 103, 32, 113, 117, 101, 114, 121, 32, 101, 120, 112, 114, 101, 115, 115, 105, 111, 110, 32, 40, 101, 46, 103, 46, 32, 34, 97, 103, 101, 32, 62, 32, 50, 53, 34, 41, 32, 111, 114, 32, 97, 32, 80, 121, 116, 104, 111, 110, 32, 102, 117, 110, 99, 116, 105, 111, 110, 10, 10, 82, 101, 116, 117, 114, 110, 115, 58, 10, 32, 32, 32, 32, 80, 121, 66, 97, 115, 101, 84, 97, 98, 108, 101, 58, 32, 65, 32, 110, 101, 119, 32, 116, 97, 98, 108, 101, 32, 119, 105, 116, 104, 32, 102, 105, 108, 116, 101, 114], original_size: 200, algorithm: None })",False,BaseTable[3 x 3],,,success_with_params,,,,,,0,,,,,,,true,True,test_execution,,,str,,,discovery,,,true,0,,,(predicate),,,(predicate: str),BaseTable,filter,,,"""{""""predicate"""": """"str""""}""",,5,BaseTable
,,1,,,,True,['column_name'],,,,,"CompressedText(CompressedData { data: [71, 101, 116, 32, 97, 32, 115, 112, 101, 99, 105, 102, 105, 99, 32, 99, 111, 108, 117, 109, 110, 32, 97, 115, 32, 66, 97, 115, 101, 65, 114, 114, 97, 121, 32, 102, 111, 114, 32, 99, 104, 97, 105, 110, 105, 110, 103, 32, 111, 112, 101, 114, 97, 116, 105, 111, 110, 115, 10, 84, 104, 105, 115, 32, 101, 110, 97, 98, 108, 101, 115, 58, 32, 116, 97, 98, 108, 101, 46, 99, 111, 108, 117, 109, 110, 40, 39, 97, 103, 101, 39, 41, 46, 105, 116, 101, 114, 40, 41, 46, 102, 105, 108, 116, 101, 114, 40, 46, 46, 46, 41, 46, 99, 111, 108, 108, 101, 99, 116, 40, 41], original_size: 121, algorithm: None })",False,BaseArray[3] (dtype: Int),,,success_with_params,,,,,,5,,list,,,,,true,True,test_execution,,,,,,discovery,,,true,0,,,(column_name),,,(column_name: list),BaseTable,column,,,"""{""""column_name"""": """"list""""}""",,3,BaseArray
,,1,,,,True,['nodes'],,int,,,Remove multiple nodes from the graph,False,,,,skipped,,,,,,,Requires parameters: ['nodes'],,,,,,true,True,,,,,,,discovery,,,true,6,,,(nodes),,,(nodes: int),Graph,remove_nodes,,,"""{""""nodes"""": """"int""""}""",,165,unknown
,,1,,,,False,[],,,,,Get dense adjacency matrix - delegates to PyGraphMatrixHelper,False,"""GraphMatrix(3 x 3, dtype=Float)""",,,success,,,,,,25,,,,,,,false,True,test_execution,,,,,,discovery,,,true,6,,,(),,,(),Graph,dense_adjacency_matrix,,,,,134,GraphMatrix
,,1,,,,False,[],,,,,Calculate density of this subgraph,False,0.6666666666666666,,,success,,,,,,26,,,,,,,false,True,test_execution,,,,,,discovery,,,true,10,,,(),,,(),Subgraph,density,,,,,205,float
,,1,,,,True,['other'],,,,,"CompressedText(CompressedData { data: [73, 110, 116, 101, 114, 115, 101, 99, 116, 32, 119, 105, 116, 104, 32, 97, 110, 111, 116, 104, 101, 114, 32, 116, 97, 98, 108, 101, 32, 40, 114, 101, 116, 117, 114, 110, 115, 32, 99, 111, 109, 109, 111, 110, 32, 114, 111, 119, 115, 41, 10, 10, 35, 32, 65, 114, 103, 117, 109, 101, 110, 116, 115, 10, 42, 32, 96, 111, 116, 104, 101, 114, 96, 32, 45, 32, 84, 104, 101, 32, 116, 97, 98, 108, 101, 32, 116, 111, 32, 105, 110, 116, 101, 114, 115, 101, 99, 116, 32, 119, 105, 116, 104, 10, 10, 35, 32, 69, 120, 97, 109, 112, 108, 101, 115, 10, 96, 96, 96, 112, 121, 116, 104, 111, 110, 10, 35, 32, 70, 105, 110, 100, 32, 99, 111, 109, 109, 111, 110, 32, 114, 111, 119, 115, 32, 98, 101, 116, 119, 101, 101, 110, 32, 116, 97, 98, 108, 101, 115, 10, 99, 111, 109, 109, 111, 110, 32, 61, 32, 116, 97, 98, 108, 101, 49, 46, 105, 110, 116, 101, 114, 115, 101, 99, 116, 40, 116, 97, 98, 108, 101, 50, 41, 10, 96, 96, 96], original_size: 197, algorithm: None })",False,,,,skipped,,,,,,,Requires parameters: ['other'],,,,,,false,True,,,,,,,discovery,,,true,0,,,(other),,,(other),BaseTable,intersect,,,,,13,unknown
,,1,,,,True,['path'],,,,,Export NodesTable to CSV file,False,None,,,success_with_params,,,,,,16,,,,,,,true,True,test_execution,,str,,,,discovery,,,true,2,,,(path),,,(path: str),NodesTable,to_csv,,,"""{""""path"""": """"str""""}""",,51,NoneType
,,1,,,,False,[],,,,,Convert to BaseTable (loses edge-specific typing),False,BaseTable[2 x 4],,,success,,,,,,0,,,,,,,false,True,test_execution,,,,,,discovery,,,true,3,,,(),,,(),EdgesTable,into_base_table,,,,,72,BaseTable
,,1,,,,True,['start'],,,,,DFS traversal - delegates to PyGraphAnalysis helper  ,False,,,,skipped,,,,,,,Requires parameters: ['start'],,,,,,false,True,,,,,,,discovery,,,true,6,,,"""(start, max_depth=None, inplace=None, attr_name=None)""",,,"""(start, max_depth=None, inplace=None, attr_name=None)""",Graph,dfs,,,,,136,unknown
,,1,,,,False,[],,,,,Get sparse adjacency matrix - delegates to PyGraphMatrixHelper,False,"CompressedText(CompressedData { data: [123, 39, 115, 105, 122, 101, 39, 58, 32, 51, 44, 32, 39, 105, 115, 95, 115, 112, 97, 114, 115, 101, 39, 58, 32, 84, 114, 117, 101, 44, 32, 39, 116, 121, 112, 101, 39, 58, 32, 39, 97, 100, 106, 97, 99, 101, 110, 99, 121, 95, 109, 97, 116, 114, 105, 120, 39, 44, 32, 39, 109, 97, 116, 114, 105, 120, 39, 58, 32, 71, 114, 97, 112, 104, 77, 97, 116, 114, 105, 120, 40, 51, 32, 120, 32, 51, 44, 32, 100, 116, 121, 112, 101, 61, 70, 108, 111, 97, 116, 41, 125], original_size: 101, algorithm: None })",,,success,,,,,,23,,,,,,,false,True,test_execution,,,,,,discovery,,,true,6,,,(),,,(),Graph,sparse_adjacency_matrix,,,,,172,dict
,,1,,,,True,['node_id'],,,,,"CompressedText(CompressedData { data: [71, 101, 116, 32, 97, 32, 77, 101, 116, 97, 78, 111, 100, 101, 32, 111, 98, 106, 101, 99, 116, 32, 105, 102, 32, 116, 104, 101, 32, 115, 112, 101, 99, 105, 102, 105, 101, 100, 32, 110, 111, 100, 101, 32, 105, 115, 32, 97, 32, 109, 101, 116, 97, 45, 110, 111, 100, 101, 10, 10, 65, 114, 103, 115, 58, 10, 32, 32, 32, 32, 110, 111, 100, 101, 95, 105, 100, 58, 32, 84, 104, 101, 32, 110, 111, 100, 101, 32, 73, 68, 32, 116, 111, 32, 99, 104, 101, 99, 107, 10, 10, 82, 101, 116, 117, 114, 110, 115, 58, 10, 32, 32, 32, 32, 80, 121, 77, 101, 116, 97, 78, 111, 100, 101, 32, 105, 102, 32, 116, 104, 101, 32, 110, 111, 100, 101, 32, 105, 115, 32, 97, 32, 109, 101, 116, 97, 45, 110, 111, 100, 101, 44, 32, 78, 111, 110, 101, 32, 111, 116, 104, 101, 114, 119, 105, 115, 101, 10, 10, 69, 120, 97, 109, 112, 108, 101, 58, 10, 32, 32, 32, 32, 109, 101, 116, 97, 95, 110, 111, 100, 101, 32, 61, 32, 103, 46, 110, 111, 100, 101], original_size: 200, algorithm: None })",False,,,,skipped,,,,,,,Requires parameters: ['node_id'],,,,,,true,True,,,,,int,,discovery,,,true,7,,,(node_id),,,(node_id: int),Nodes,get_meta_node,,,"""{""""node_id"""": """"int""""}""",,179,unknown
,,1,,,,True,['path'],,,,,Export BaseTable to CSV file,False,None,,,success_with_params,,,,,,16,,,,,,,true,True,test_execution,,str,,,,discovery,,,true,0,,,(path),,,(path: str),BaseTable,to_csv,,,"""{""""path"""": """"str""""}""",,25,NoneType
,,1,,,,False,[],,,,,"CompressedText(CompressedData { data: [82, 101, 116, 117, 114, 110, 32, 105, 116, 101, 114, 97, 116, 111, 114, 32, 111, 118, 101, 114, 32, 97, 114, 114, 97, 121, 32, 105, 116, 101, 109, 115, 32, 40, 99, 111, 109, 112, 97, 116, 105, 98, 105, 108, 105, 116, 121, 32, 119, 105, 116, 104, 32, 112, 97, 110, 100, 97, 115, 47, 110, 117, 109, 112, 121, 41, 10, 82, 101, 116, 117, 114, 110, 115, 32, 105, 116, 101, 114, 97, 116, 111, 114, 32, 111, 102, 32, 40, 105, 110, 100, 101, 120, 44, 32, 118, 97, 108, 117, 101, 41, 32, 116, 117, 112, 108, 101, 115], original_size: 108, algorithm: None })",False,"""[(0, 1), (1, 0), (2, 2)]""",,,success,,,,,,21,,,,,,,false,True,test_execution,,,,,,discovery,,,true,11,,,(),,,(),GraphArray,items,,,,,252,list
,,1,,,,True,['_other'],,,,,,False,,,,skipped,,,,,,,Requires parameters: ['_other'],,,,,,false,True,,,,,,,discovery,,,true,10,,,(_other),,,(_other),Subgraph,subtract_from,,,,,237,unknown
,,1,,,,False,[],,,,,Validate the GraphTable and return report,False,"CompressedText(CompressedData { data: [86, 97, 108, 105, 100, 97, 116, 105, 111, 110, 82, 101, 112, 111, 114, 116, 32, 123, 32, 101, 114, 114, 111, 114, 115, 58, 32, 91, 93, 44, 32, 119, 97, 114, 110, 105, 110, 103, 115, 58, 32, 91, 93, 44, 32, 105, 110, 102, 111, 58, 32, 91, 34, 78, 111, 100, 101, 32, 85, 73, 68, 115, 32, 118, 97, 108, 105, 100, 97, 116, 105, 111, 110, 32, 112, 97, 115, 115, 101, 100, 34, 44, 32, 34, 69, 100, 103, 101, 32, 118, 97, 108, 105, 100, 97, 116, 105, 111, 110, 32, 112, 97, 115, 115, 101, 100, 34, 44, 32, 34, 69, 100, 103, 101, 32, 110, 111, 100, 101, 32, 114, 101, 102, 101, 114, 101, 110, 99, 101, 32, 118, 97, 108, 105, 100, 97, 116, 105, 111, 110, 32, 112, 97, 115, 115, 101, 100, 34, 93, 44, 32, 115, 116, 97, 116, 115, 58, 32, 123, 34, 116, 111, 116, 97, 108, 95, 110, 111, 100, 101, 115, 34, 58, 32, 51, 44, 32, 34, 116, 111, 116, 97, 108, 95, 101, 100, 103, 101, 115, 34, 58, 32, 50, 125, 32, 125], original_size: 196, algorithm: None })",,,success,,,,,,15,,,,,,,false,True,test_execution,,,,,,discovery,,,true,4,,,(),,,(),GraphTable,validate,,,,,107,str
,,1,,,,True,['attrs_dict'],,,,,Set bulk node attributes - delegates to PyGraphAttrMut,False,,,,skipped,,,,,,,Requires parameters: ['attrs_dict'],,,,,,false,True,,,,,,,discovery,,,true,6,,,(attrs_dict),,,(attrs_dict),Graph,set_node_attrs,,,,,170,unknown
,,1,,,,False,[],,,,,Check if this subgraph is connected,False,True,,,success,,,,,,13,,,,,,,false,True,test_execution,,,,,,discovery,,,true,10,,,(),,,(),Subgraph,is_connected,,,,,223,bool
,,1,,,,False,[],,,,,"CompressedText(CompressedData { data: [67, 111, 110, 118, 101, 114, 116, 32, 116, 111, 32, 78, 101, 116, 119, 111, 114, 107, 88, 32, 103, 114, 97, 112, 104, 32, 40, 105, 102, 32, 97, 118, 97, 105, 108, 97, 98, 108, 101, 41, 10, 10, 82, 101, 116, 117, 114, 110, 115, 32, 97, 32, 78, 101, 116, 119, 111, 114, 107, 88, 32, 71, 114, 97, 112, 104, 32, 111, 114, 32, 68, 105, 71, 114, 97, 112, 104, 32, 40, 100, 101, 112, 101, 110, 100, 105, 110, 103, 32, 111, 110, 32, 116, 104, 101, 32, 112, 97, 114, 101, 110, 116, 32, 103, 114, 97, 112, 104, 32, 116, 121, 112, 101, 41, 10, 99, 111, 110, 116, 97, 105, 110, 105, 110, 103, 32, 111, 110, 108, 121, 32, 116, 104, 101, 32, 110, 111, 100, 101, 115, 32, 97, 110, 100, 32, 101, 100, 103, 101, 115, 32, 102, 114, 111, 109, 32, 116, 104, 105, 115, 32, 115, 117, 98, 103, 114, 97, 112, 104, 44, 32, 119, 105, 116, 104, 32, 97, 108, 108, 32, 97, 116, 116, 114, 105, 98, 117, 116, 101, 115, 32, 112, 114, 101, 115, 101, 114, 118, 101, 100], original_size: 200, algorithm: None })",False,Graph with 3 nodes and 2 edges,,,success,,,,,,6,,,,,,,false,True,test_execution,,,,,,discovery,,,true,10,,,(),,,(),Subgraph,to_networkx,,,,,243,Graph
,,1,,,,True,['path'],,,,,Import BaseTable from JSON file,False,,,,skipped,,,,,,,Requires parameters: ['path'],,,,,,true,True,,,str,,,,discovery,,,true,0,,,(path),,,(path: str),BaseTable,from_json,,,"""{""""path"""": """"str""""}""",,8,unknown
,,1,,,,True,['k'],,,,,Direct delegation: Apply sample(k) to each component and return PySubgraphArray,False,SubgraphArray(1 subgraphs),,,success_with_params,,,,,,29,,,,,,,false,True,test_execution,,,,,,discovery,,,true,9,,,(k),,,(k),ComponentsArray,sample,,,,,190,SubgraphArray
,,1,,,,False,[],,,,,Convert to pandas DataFrame,False,"CompressedText(CompressedData { data: [32, 32, 109, 101, 116, 104, 111, 100, 32, 32, 101, 100, 103, 101, 95, 105, 100, 32, 32, 116, 97, 114, 103, 101, 116, 32, 32, 115, 111, 117, 114, 99, 101, 10, 48, 32, 32, 116, 97, 98, 108, 101, 32, 32, 32, 32, 32, 32, 32, 32, 49, 32, 32, 32, 32, 32, 32, 32, 50, 32, 32, 32, 32, 32, 32, 32, 49, 10, 49, 32, 32, 32, 104, 101, 97, 100, 32, 32, 32, 32, 32, 32, 32, 32, 50, 32, 32, 32, 32, 32, 32, 32, 51, 32, 32, 32, 32, 32, 32, 32, 50], original_size: 101, algorithm: None })",,,success,,,,,,17,,,,,,,false,True,test_execution,,,,,,discovery,,,true,3,,,(),,,(),EdgesTable,to_pandas,,,,,86,DataFrame
,,1,,,,True,"""['attribute', 'aggregation_attr', 'operation']""",,,,,"CompressedText(CompressedData { data: [71, 101, 116, 32, 97, 110, 97, 108, 121, 116, 105, 99, 115, 32, 109, 111, 100, 117, 108, 101, 32, 102, 111, 114, 32, 116, 104, 105, 115, 32, 103, 114, 97, 112, 104, 10, 71, 114, 111, 117, 112, 32, 110, 111, 100, 101, 115, 32, 98, 121, 32, 97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 118, 97, 108, 117, 101, 32, 97, 110, 100, 32, 99, 111, 109, 112, 117, 116, 101, 32, 97, 103, 103, 114, 101, 103, 97, 116, 101, 115, 32, 102, 111, 114, 32, 101, 97, 99, 104, 32, 103, 114, 111, 117, 112], original_size: 104, algorithm: None })",False,,,,skipped,,,,,,,"""Requires parameters: ['attribute', 'aggregation_attr', 'operation']""",,,,,,false,True,,,,,,,discovery,,,true,6,,,"""(attribute, aggregation_attr, operation)""",,,"""(attribute, aggregation_attr, operation)""",Graph,group_nodes_by_attribute,,,,,148,unknown
,,1,,,,False,[],,,,,Get neighbors of nodes - delegates to PyGraphAnalysis helper,False,,,,error,,,,,,,nodes parameter is required,,,,,,false,True,,,,,,,discovery,,,true,6,,,(nodes=None),,,(nodes=None),Graph,neighbors,,,,,159,unknown
,,1,,int,,True,['node'],,,,,Remove a single node from the graph,False,,,,skipped,,,,,,,Requires parameters: ['node'],,,,,,true,True,,,,,,,discovery,,,true,6,,,(node),,,(node: int),Graph,remove_node,,,"""{""""node"""": """"int""""}""",,164,unknown
,,1,,,,False,[],,,,,Get first n rows (default 5),False,BaseTable[3 x 3],,,success,,,,,,0,,,,,,,false,True,test_execution,,,,,,discovery,,,true,0,,,(n=5),,,(n=5),BaseTable,head,,,,,12,BaseTable
,,1,,,,False,[],,,,,Convert to pandas DataFrame,False,"CompressedText(CompressedData { data: [32, 32, 32, 32, 116, 121, 112, 101, 32, 32, 32, 32, 32, 32, 32, 32, 110, 97, 109, 101, 32, 32, 110, 111, 100, 101, 95, 105, 100, 10, 48, 32, 32, 32, 99, 111, 114, 101, 32, 32, 32, 32, 32, 32, 32, 71, 114, 97, 112, 104, 32, 32, 32, 32, 32, 32, 32, 32, 49, 10, 49, 32, 32, 116, 97, 98, 108, 101, 32, 32, 32, 66, 97, 115, 101, 84, 97, 98, 108, 101, 32, 32, 32, 32, 32, 32, 32, 32, 50, 10, 50, 32, 32, 116, 97, 98, 108, 101, 32, 32, 78, 111, 100, 101, 115, 84, 97, 98, 108, 101, 32, 32, 32, 32, 32, 32, 32, 32, 51], original_size: 119, algorithm: None })",,,success,,,,,,17,,,,,,,false,True,test_execution,,,,,,discovery,,,true,0,,,(),,,(),BaseTable,to_pandas,,,,,27,DataFrame
,,1,,,,True,['predicate'],,,,,Direct delegation: Apply filter to components,False,ComponentsArray(1 components),,,success_with_params,,,,,,9,,,,,,,false,True,test_execution,,,,,,discovery,,,true,9,,,(predicate),,,(predicate),ComponentsArray,filter,,,,,187,ComponentsArray
,,1,,,,False,[],,,,,"""Get a GraphTable representation of this graph
Implements: g.table()""",False,"CompressedText(CompressedData { data: [71, 114, 97, 112, 104, 84, 97, 98, 108, 101, 91, 51, 32, 110, 111, 100, 101, 115, 44, 32, 50, 32, 101, 100, 103, 101, 115, 93, 10, 86, 97, 108, 105, 100, 97, 116, 105, 111, 110, 32, 80, 111, 108, 105, 99, 121, 58, 32, 83, 116, 97, 110, 100, 97, 114, 100, 10, 78, 111, 100, 101, 115, 58, 10, 78, 111, 100, 101, 115, 84, 97, 98, 108, 101, 91, 51, 32, 120, 32, 51, 93, 10, 66, 97, 115, 101, 84, 97, 98, 108, 101, 91, 51, 32, 120, 32, 51, 93, 10, 124, 32, 32, 32, 32, 32, 32, 32, 110, 97, 109, 101, 32, 124, 32, 32, 32, 32, 32, 32, 32, 116, 121, 112, 101, 32, 124, 32, 32, 32, 32, 110, 111, 100, 101, 95, 105, 100, 32, 124, 32, 10, 124, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 124, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 124, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 124, 10, 124, 32, 32, 66, 97, 115, 101, 84, 97, 98, 108, 101, 32, 124, 32, 32, 32, 32], original_size: 200, algorithm: None })",,,success,,,,,,4,,,,,,,false,True,test_execution,,,,,,discovery,,,true,6,,,(),,,(),Graph,table,,,,,173,GraphTable
,,1,,,,True,['path'],,,,,Export NodesTable to Parquet file ,False,,,,skipped,,,,,,,Requires parameters: ['path'],,,,,,true,True,,,str,,,,discovery,,,true,2,,,(path),,,(path: str),NodesTable,to_parquet,,,"""{""""path"""": """"str""""}""",,54,unknown
,,1,,,,False,[],,,,,Get number of rows,False,2,,,success,,,,,,19,,,,,,,false,True,test_execution,,,,,,discovery,,,true,3,,,(),,,(),EdgesTable,nrows,,,,,75,int
,,1,,,,False,[],,,,,Convert to SciPy sparse array (for compatibility - GraphArray is dense by nature),False,"""  (np.int32(0), np.int32(0))	1
  (np.int32(0), np.int32(2))	2""",,,success,,,,,,37,,,,,,,false,True,test_execution,,,,,,discovery,,,true,11,,,(),,,(),GraphArray,to_scipy_sparse,,,,,267,csr_matrix
,,1,,,,True,['iterable'],,,,,Create a new dictionary with keys from iterable and values set to value.,False,,,,skipped,,,,,,,Requires parameters: ['iterable'],,,,,,false,True,,,,,,,discovery,,,true,12,,,"""(iterable, value=None, /)""",,,"""(iterable, value=None, /)""",Matrix,fromkeys,,,,,273,unknown
,,1,,,,False,[],,,,,Get number of rows,False,3,,,success,,,,,,19,,,,,,,false,True,test_execution,,,,,,discovery,,,true,2,,,(),,,(),NodesTable,nrows,,,,,44,int
,,1,,,,False,[],,,,,Get all unique node attribute names across the entire graph,False,"""['name', 'type']""",,,success,,,,,,21,,,,,,,false,True,test_execution,,,,,,discovery,,,true,6,,,(),,,(),Graph,all_node_attribute_names,,,,,125,list
,,1,,,,False,[],,,,,Convert to pandas DataFrame,False,"CompressedText(CompressedData { data: [32, 32, 32, 110, 111, 100, 101, 95, 105, 100, 32, 32, 32, 116, 121, 112, 101, 32, 32, 32, 32, 32, 32, 32, 32, 110, 97, 109, 101, 10, 48, 32, 32, 32, 32, 32, 32, 32, 32, 49, 32, 32, 32, 99, 111, 114, 101, 32, 32, 32, 32, 32, 32, 32, 71, 114, 97, 112, 104, 10, 49, 32, 32, 32, 32, 32, 32, 32, 32, 50, 32, 32, 116, 97, 98, 108, 101, 32, 32, 32, 66, 97, 115, 101, 84, 97, 98, 108, 101, 10, 50, 32, 32, 32, 32, 32, 32, 32, 32, 51, 32, 32, 116, 97, 98, 108, 101, 32, 32, 78, 111, 100, 101, 115, 84, 97, 98, 108, 101], original_size: 119, algorithm: None })",,,success,,,,,,17,,,,,,,false,True,test_execution,,,,,,discovery,,,true,2,,,(),,,(),NodesTable,to_pandas,,,,,53,DataFrame
,,1,,,,True,['edge_id'],,,,,Check if subgraph contains a specific edge (alias for has_edge)  ,False,,,,skipped,,,,,,,Requires parameters: ['edge_id'],,,,int,,true,True,,,,,,,discovery,,,true,10,,,(edge_id),,,(edge_id: int),Subgraph,contains_edge,,,"""{""""edge_id"""": """"int""""}""",,202,unknown
,,1,,,,False,[],,,,,"""Get shape as (rows, cols)""",False,"""(3, 3)""",,,success,,,,,,20,,,,,,,false,True,test_execution,,,,,,discovery,,,true,2,,,(),,,(),NodesTable,shape,,,,,47,tuple
,,1,,,,False,[],,,,,"""Get shape as (rows, cols)""",False,"""(5, 7)""",,,success,,,,,,20,,,,,,,false,True,test_execution,,,,,,discovery,,,true,4,,,(),,,(),GraphTable,shape,,,,,100,tuple
,,1,,,,False,[],,,,,Convert this graph to a NetworkX graph.,False,Graph with 3 nodes and 2 edges,,,success,,,,,,6,,,,,,,false,True,test_execution,,,,,,discovery,,,true,6,,,"""(directed: bool = False, include_attributes: bool = True)""",,,"""(directed: bool = False, include_attributes: bool = True)""",Graph,to_networkx,,,,,174,Graph
,,1,,,,False,[],,,,,D.keys() -> a set-like object providing a view on D's keys,False,"""dict_keys(['size', 'is_sparse', 'type', 'matrix'])""",,,success,,,,,,39,,,,,,,false,True,test_execution,,,,,,discovery,,,true,12,,,signature_unavailable,,,signature_unavailable,Matrix,keys,,,,,276,dict_keys
dict,,1,,,,True,['data'],,,,,,False,,,,skipped,,,,,,,Requires parameters: ['data'],,,,,,true,True,,,,,,,discovery,,,true,6,,,"""(data, uid_key=None)""",,,"""(data: dict, uid_key=None)""",Graph,add_nodes,,,"""{""""data"""": """"dict""""}""",,120,unknown
,,1,,int,,True,['node'],,,,,Check if node exists - DELEGATED (same as has_node),False,,,,skipped,,,,,,,Requires parameters: ['node'],,,,,,true,True,,,,,,,discovery,,,true,6,,,(node),,,(node: int),Graph,contains_node,,,"""{""""node"""": """"int""""}""",,132,unknown
dict,,1,,,,True,['data'],,,,,Create NodesTable from a Python dictionary (must contain 'node_id' column),False,,,,skipped,,,,,,,Requires parameters: ['data'],,,,,,true,True,,,,,,,discovery,,,true,2,,,(data),,,(data: dict),NodesTable,from_dict,,,"""{""""data"""": """"dict""""}""",,35,unknown
,,1,,,,False,[],,,,,Get adjacency matrix - delegates to PyGraphMatrixHelper,False,"CompressedText(CompressedData { data: [123, 39, 115, 105, 122, 101, 39, 58, 32, 51, 44, 32, 39, 105, 115, 95, 115, 112, 97, 114, 115, 101, 39, 58, 32, 84, 114, 117, 101, 44, 32, 39, 116, 121, 112, 101, 39, 58, 32, 39, 97, 100, 106, 97, 99, 101, 110, 99, 121, 95, 109, 97, 116, 114, 105, 120, 39, 44, 32, 39, 109, 97, 116, 114, 105, 120, 39, 58, 32, 71, 114, 97, 112, 104, 77, 97, 116, 114, 105, 120, 40, 51, 32, 120, 32, 51, 44, 32, 100, 116, 121, 112, 101, 61, 70, 108, 111, 97, 116, 41, 125], original_size: 101, algorithm: None })",,,success,,,,,,23,,,,,,,false,True,test_execution,,,,,,discovery,,,true,6,,,(),,,(),Graph,adjacency_matrix,,,,,122,dict
,,1,,,,False,[],,,,,Check if subgraph is empty,False,False,,,success,,,,,,13,,,,,,,false,True,test_execution,,,,,,discovery,,,true,10,,,(),,,(),Subgraph,is_empty,,,,,224,bool
,,1,,,,False,[],,,,,Get text summary of subgraph,False,"""Subgraph: 3 nodes, 2 edges, density: 0.667""",,,success,,,,,,15,,,,,,,false,True,test_execution,,,,,,discovery,,,true,10,,,(),,,(),Subgraph,summary,,,,,238,str
,,1,,,,False,[],,,,,Count non-null values,False,3,,,success,,,,,,19,,,,,,,false,True,test_execution,,,,,,discovery,,,true,11,,,(),,,(),GraphArray,count,,,,,247,int
,,1,,,,False,[],,,,,Convert back to Graph,False,"""Graph(nodes=3, edges=2)""",,,success,,,,,,6,,,,,,,false,True,test_execution,,,,,,discovery,,,true,4,,,(),,,(),GraphTable,to_graph,,,,,104,Graph
,,1,,,,True,['filter'],,,,,"CompressedText(CompressedData { data: [70, 105, 108, 116, 101, 114, 32, 110, 111, 100, 101, 115, 32, 117, 115, 105, 110, 103, 32, 78, 111, 100, 101, 70, 105, 108, 116, 101, 114, 32, 111, 98, 106, 101, 99, 116, 32, 111, 114, 32, 115, 116, 114, 105, 110, 103, 32, 113, 117, 101, 114, 121, 10, 10, 79, 80, 84, 73, 77, 73, 90, 69, 68, 58, 32, 68, 105, 114, 101, 99, 116, 32, 105, 109, 112, 108, 101, 109, 101, 110, 116, 97, 116, 105, 111, 110, 32, 97, 118, 111, 105, 100, 105, 110, 103, 32, 101, 120, 112, 101, 110, 115, 105, 118, 101, 32, 118, 105, 101, 119, 40, 41, 32, 99, 114, 101, 97, 116, 105, 111, 110, 32, 111, 118, 101, 114, 104, 101, 97, 100], original_size: 130, algorithm: None })",False,,,,skipped,,,,,,,Requires parameters: ['filter'],,,,,,false,True,,,,,,,discovery,,,true,6,,,(filter),,,(filter),Graph,filter_nodes,,,,,141,unknown
,,1,,,,False,[],,,,,"""Get a NodesTable representation of accessible nodes  
Implements: g.nodes.table()""",False,"CompressedText(CompressedData { data: [78, 111, 100, 101, 115, 84, 97, 98, 108, 101, 91, 51, 32, 120, 32, 51, 93, 10, 66, 97, 115, 101, 84, 97, 98, 108, 101, 91, 51, 32, 120, 32, 51, 93, 10, 124, 32, 32, 32, 32, 32, 32, 32, 116, 121, 112, 101, 32, 124, 32, 32, 32, 32, 110, 111, 100, 101, 95, 105, 100, 32, 124, 32, 32, 32, 32, 32, 32, 32, 110, 97, 109, 101, 32, 124, 32, 10, 124, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 124, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 124, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 124, 10, 124, 32, 32, 32, 32, 32, 32, 116, 97, 98, 108, 101, 32, 124, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 49, 32, 124, 32, 32, 66, 97, 115, 101, 84, 97, 98, 108, 101, 32, 124, 32, 10, 124, 32, 32, 32, 32, 32, 32, 32, 99, 111, 114, 101, 32, 124, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 48, 32, 124, 32, 32, 32, 32, 32, 32, 71, 114, 97, 112, 104, 32, 124], original_size: 200, algorithm: None })",,,success,,,,,,2,,,,,,,false,True,test_execution,,,,,,discovery,,,true,7,,,(),,,(),Nodes,table,,,,,182,NodesTable
,,1,,,,True,['other'],,,,,Calculate similarity between subgraphs using various metrics,False,,,,skipped,,,,,,,Requires parameters: ['other'],,,,,,false,True,,,,,,,discovery,,,true,10,,,"""(other, metric='jaccard')""",,,"""(other, metric='jaccard')""",Subgraph,calculate_similarity,,,,,195,unknown
,,1,,,,True,"""['node1_id', 'node2_id']""",,,,,"CompressedText(CompressedData { data: [67, 104, 101, 99, 107, 32, 105, 102, 32, 116, 104, 101, 114, 101, 32, 105, 115, 32, 97, 32, 112, 97, 116, 104, 32, 98, 101, 116, 119, 101, 101, 110, 32, 116, 119, 111, 32, 110, 111, 100, 101, 115, 32, 119, 105, 116, 104, 105, 110, 32, 116, 104, 105, 115, 32, 115, 117, 98, 103, 114, 97, 112, 104, 10, 10, 84, 104, 105, 115, 32, 105, 115, 32, 109, 111, 114, 101, 32, 101, 102, 102, 105, 99, 105, 101, 110, 116, 32, 116, 104, 97, 110, 32, 96, 115, 104, 111, 114, 116, 101, 115, 116, 95, 112, 97, 116, 104, 95, 115, 117, 98, 103, 114, 97, 112, 104, 96, 32, 119, 104, 101, 110, 32, 121, 111, 117, 32, 111, 110, 108, 121, 32, 110, 101, 101, 100, 10, 116, 111, 32, 107, 110, 111, 119, 32, 105, 102, 32, 97, 32, 112, 97, 116, 104, 32, 101, 120, 105, 115, 116, 115, 44, 32, 110, 111, 116, 32, 116, 104, 101, 32, 97, 99, 116, 117, 97, 108, 32, 112, 97, 116, 104, 46, 10, 10, 35, 32, 65, 114, 103, 117, 109, 101, 110, 116, 115, 10, 42, 32, 96], original_size: 200, algorithm: None })",False,,,,skipped,,,,,,,"""Requires parameters: ['node1_id', 'node2_id']""",,,,,,true,True,,,,,,,discovery,,,true,10,,,"""(node1_id, node2_id)""",,int,"""(node1_id: int, node2_id: int)""",Subgraph,has_path,,int,"""{""""node1_id"""": """"int"""", """"node2_id"""": """"int""""}""",,219,unknown
,,1,,,,True,['path'],,,,,Export NodesTable to JSON file,False,None,,,success_with_params,,,,,,16,,,,,,,true,True,test_execution,,str,,,,discovery,,,true,2,,,(path),,,(path: str),NodesTable,to_json,,,"""{""""path"""": """"str""""}""",,52,NoneType
,,1,,,,True,['n'],,,,,,False,BaseArray[5] (dtype: Int),,,success_with_params,,,,,,5,,,,,,,false,True,test_execution,,,,,,discovery,,,true,5,,,(n),,,(n),BaseArray,head,,,,,112,BaseArray
,int,1,,,,True,['edges'],,,,,Create subgraph from list of edges,False,,,,skipped,,,,,,,Requires parameters: ['edges'],,,,,,true,True,,,,,,,discovery,,,true,10,,,(edges),,,(edges: int),Subgraph,subgraph_from_edges,,,"""{""""edges"""": """"int""""}""",,236,unknown
,,1,,,,False,[],,,,,Get unique values as a new GraphArray,False,"""GraphArray(len=3, dtype=int64)""",,,success,,,,,,11,,,,,,,false,True,test_execution,,,,,,discovery,,,true,11,,,(),,,(),GraphArray,unique,,,,,269,GraphArray
,,1,,,,True,['commit_id'],,,,,Get historical view at specific commit (FFI wrapper around core history system),False,,,,skipped,,,,,,,Requires parameters: ['commit_id'],,,,,,true,True,,,,,,,discovery,,int,true,6,,,(commit_id),,,(commit_id: int),Graph,historical_view,,,"""{""""commit_id"""": """"int""""}""",,154,unknown
,,1,,,,False,[],,,,,Get last n rows (default 5),False,"CompressedText(CompressedData { data: [78, 111, 100, 101, 115, 84, 97, 98, 108, 101, 91, 51, 32, 120, 32, 51, 93, 10, 66, 97, 115, 101, 84, 97, 98, 108, 101, 91, 51, 32, 120, 32, 51, 93, 10, 124, 32, 32, 32, 32, 32, 32, 32, 110, 97, 109, 101, 32, 124, 32, 32, 32, 32, 32, 32, 32, 116, 121, 112, 101, 32, 124, 32, 32, 32, 32, 110, 111, 100, 101, 95, 105, 100, 32, 124, 32, 10, 124, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 124, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 124, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 124, 10, 124, 32, 32, 32, 32, 32, 32, 71, 114, 97, 112, 104, 32, 124, 32, 32, 32, 32, 32, 32, 32, 99, 111, 114, 101, 32, 124, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 49, 32, 124, 32, 10, 124, 32, 32, 66, 97, 115, 101, 84, 97, 98, 108, 101, 32, 124, 32, 32, 32, 32, 32, 32, 116, 97, 98, 108, 101, 32, 124, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 50, 32, 124], original_size: 200, algorithm: None })",,,success,,,,,,2,,,,,,,false,True,test_execution,,,,,,discovery,,,true,2,,,(n=5),,,(n=5),NodesTable,tail,,,,,50,NodesTable
,,1,,,,True,"""['string_id', 'uid_key']""",,,,,Helper method to resolve string ID to NodeId using uid_key attribute,False,,,,skipped,,int,,,,,"""Requires parameters: ['string_id', 'uid_key']""",,,,,,true,True,,,,,,,discovery,,,true,6,,,"""(string_id, uid_key)""",,,"""(string_id: int, uid_key)""",Graph,resolve_string_id_to_node,,,"""{""""string_id"""": """"int""""}""",,166,unknown
,,1,,,,False,[],,,,,D.items() -> a set-like object providing a view on D's items,False,"CompressedText(CompressedData { data: [100, 105, 99, 116, 95, 105, 116, 101, 109, 115, 40, 91, 40, 39, 115, 105, 122, 101, 39, 44, 32, 51, 41, 44, 32, 40, 39, 105, 115, 95, 115, 112, 97, 114, 115, 101, 39, 44, 32, 84, 114, 117, 101, 41, 44, 32, 40, 39, 116, 121, 112, 101, 39, 44, 32, 39, 97, 100, 106, 97, 99, 101, 110, 99, 121, 95, 109, 97, 116, 114, 105, 120, 39, 41, 44, 32, 40, 39, 109, 97, 116, 114, 105, 120, 39, 44, 32, 71, 114, 97, 112, 104, 77, 97, 116, 114, 105, 120, 40, 51, 32, 120, 32, 51, 44, 32, 100, 116, 121, 112, 101, 61, 70, 108, 111, 97, 116, 41, 41, 93, 41], original_size: 121, algorithm: None })",,,success,,,,,,38,,,,,,,false,True,test_execution,,,,,,discovery,,,true,12,,,signature_unavailable,,,signature_unavailable,Matrix,items,,,,,275,dict_items
,,1,,,,False,[],,,,,Convert subgraph edges to a table - pure delegation to core GraphTable,False,"CompressedText(CompressedData { data: [69, 100, 103, 101, 115, 84, 97, 98, 108, 101, 91, 50, 32, 120, 32, 52, 93, 10, 66, 97, 115, 101, 84, 97, 98, 108, 101, 91, 50, 32, 120, 32, 52, 93, 10, 124, 32, 32, 32, 32, 101, 100, 103, 101, 95, 105, 100, 32, 124, 32, 32, 32, 32, 32, 115, 111, 117, 114, 99, 101, 32, 124, 32, 32, 32, 32, 32, 116, 97, 114, 103, 101, 116, 32, 124, 32, 32, 32, 32, 32, 109, 101, 116, 104, 111, 100, 32, 124, 32, 10, 124, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 124, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 124, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 124, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 124, 10, 124, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 49, 32, 124, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 49, 32, 124, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 50, 32, 124, 32, 32, 32, 32, 32, 32, 32, 104, 101, 97, 100, 32, 124, 32, 10, 124], original_size: 200, algorithm: None })",,,success,,,,,,3,,,,,,,false,True,test_execution,,,,,,discovery,,,true,10,,,(),,,(),Subgraph,edges_table,,,,,209,EdgesTable
,,1,,,,True,"""['start', 'end']""",,,,,"CompressedText(CompressedData { data: [71, 101, 116, 32, 97, 32, 115, 108, 105, 99, 101, 32, 111, 102, 32, 114, 111, 119, 115, 32, 91, 115, 116, 97, 114, 116, 44, 32, 101, 110, 100, 41, 10, 10, 65, 114, 103, 115, 58, 10, 32, 32, 32, 32, 115, 116, 97, 114, 116, 58, 32, 83, 116, 97, 114, 116, 105, 110, 103, 32, 114, 111, 119, 32, 105, 110, 100, 101, 120, 32, 40, 105, 110, 99, 108, 117, 115, 105, 118, 101, 41, 10, 32, 32, 32, 32, 101, 110, 100, 58, 32, 69, 110, 100, 105, 110, 103, 32, 114, 111, 119, 32, 105, 110, 100, 101, 120, 32, 40, 101, 120, 99, 108, 117, 115, 105, 118, 101, 41, 10, 10, 82, 101, 116, 117, 114, 110, 115, 58, 10, 32, 32, 32, 32, 80, 121, 66, 97, 115, 101, 84, 97, 98, 108, 101, 58, 32, 65, 32, 110, 101, 119, 32, 116, 97, 98, 108, 101, 32, 119, 105, 116, 104, 32, 116, 104, 101, 32, 115, 112, 101, 99, 105, 102, 105, 101, 100, 32, 114, 111, 119, 32, 115, 108, 105, 99, 101], original_size: 187, algorithm: None })",False,,,,skipped,,,,,,,"""Requires parameters: ['start', 'end']""",,,,,,false,True,,,,,,,discovery,,,true,0,,,"""(start, end)""",,,"""(start, end)""",BaseTable,slice,,,,,22,unknown
,,1,,,,True,['edge'],,,int,,,False,,,,skipped,,,,,,,Requires parameters: ['edge'],,,,,,true,True,,,,,,,discovery,,,true,6,,,(edge),,,(edge: int),Graph,edge_endpoints,,,"""{""""edge"""": """"int""""}""",,139,unknown
,,1,,,,False,[],,,,,Get the data type of the array based on the first non-null element,False,Int,,,success,,,,,,15,,,,,,,false,True,test_execution,,,,,,discovery,,,true,5,,,(),,,(),BaseArray,dtype,,,,,111,str
,,1,,,,False,[],,,,,"""Get edge IDs as a GraphArray
Implements: g.edges.ids()""",False,"""GraphArray(len=2, dtype=int64)""",,,success,,,,,,11,,,,,,,false,True,test_execution,,,,,,discovery,,,true,8,,,(),,,(),Edges,ids,,,,,184,GraphArray
,,1,,,,False,[],,,,,"""Drop null values, returning a new array""",False,"""GraphArray(len=3, dtype=int64)""",,,success,,,,,,11,,,,,,,false,True,test_execution,,,,,,discovery,,,true,11,,,(),,,(),GraphArray,drop_na,,,,,249,GraphArray
,,1,,,,False,[],,,,,Direct delegation: Apply neighborhood() to each component and return PySubgraphArray,False,SubgraphArray(1 subgraphs),,,success,,,,,,29,,,,,,,false,True,test_execution,,,,,,discovery,,,true,9,,,(),,,(),ComponentsArray,neighborhood,,,,,189,SubgraphArray
,,1,,,,False,[],,,,,"""Get edges as tuples (edge_id, source, target)""",False,"""[(1, 1, 2), (2, 2, 3)]""",,,success,,,,,,21,,,,,,,false,True,test_execution,,,,,,discovery,,,true,3,,,(),,,(),EdgesTable,as_tuples,,,,,57,list
,,1,,,,True,"""['message', 'author']""",,,,,Commit current state of the graph (FFI wrapper around core history system),False,,,,skipped,,,,,,,"""Requires parameters: ['message', 'author']""",,,,,,false,True,,,,,,,discovery,,,true,6,,,"""(message, author)""",,,"""(message, author)""",Graph,commit,,,,,129,unknown
,,1,,,,True,['path'],,,,,Import BaseTable from CSV file,False,,,,skipped,,,,,,,Requires parameters: ['path'],,,,,,true,True,,,str,,,,discovery,,,true,0,,,(path),,,(path: str),BaseTable,from_csv,,,"""{""""path"""": """"str""""}""",,6,unknown
,,1,,,,False,[],,,,,"""Get last n rows (primarily from nodes table, default 5) """,False,"CompressedText(CompressedData { data: [71, 114, 97, 112, 104, 84, 97, 98, 108, 101, 91, 51, 32, 110, 111, 100, 101, 115, 44, 32, 50, 32, 101, 100, 103, 101, 115, 93, 10, 86, 97, 108, 105, 100, 97, 116, 105, 111, 110, 32, 80, 111, 108, 105, 99, 121, 58, 32, 83, 116, 97, 110, 100, 97, 114, 100, 10, 78, 111, 100, 101, 115, 58, 10, 78, 111, 100, 101, 115, 84, 97, 98, 108, 101, 91, 51, 32, 120, 32, 51, 93, 10, 66, 97, 115, 101, 84, 97, 98, 108, 101, 91, 51, 32, 120, 32, 51, 93, 10, 124, 32, 32, 32, 32, 32, 32, 32, 110, 97, 109, 101, 32, 124, 32, 32, 32, 32, 32, 32, 32, 116, 121, 112, 101, 32, 124, 32, 32, 32, 32, 110, 111, 100, 101, 95, 105, 100, 32, 124, 32, 10, 124, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 124, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 124, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 124, 10, 124, 32, 32, 32, 32, 32, 32, 71, 114, 97, 112, 104, 32, 124, 32, 32, 32, 32], original_size: 200, algorithm: None })",,,success,,,,,,4,,,,,,,false,True,test_execution,,,,,,discovery,,,true,4,,,(n=5),,,(n=5),GraphTable,tail,,,,,102,GraphTable
,,1,,,,True,['_other'],,,,,,False,,,,skipped,,,,,,,Requires parameters: ['_other'],,,,,,false,True,,,,,,,discovery,,,true,10,,,(_other),,,(_other),Subgraph,intersect_with,,,,,222,unknown
,,1,,,,True,"""['other', 'on', 'how']""",,,,,"CompressedText(CompressedData { data: [85, 110, 105, 102, 105, 101, 100, 32, 106, 111, 105, 110, 32, 109, 101, 116, 104, 111, 100, 32, 119, 105, 116, 104, 32, 112, 97, 110, 100, 97, 115, 45, 115, 116, 121, 108, 101, 32, 105, 110, 116, 101, 114, 102, 97, 99, 101, 10, 10, 35, 32, 65, 114, 103, 117, 109, 101, 110, 116, 115, 10, 42, 32, 96, 111, 116, 104, 101, 114, 96, 32, 45, 32, 84, 104, 101, 32, 116, 97, 98, 108, 101, 32, 116, 111, 32, 106, 111, 105, 110, 32, 119, 105, 116, 104, 10, 42, 32, 96, 111, 110, 96, 32, 45, 32, 67, 111, 108, 117, 109, 110, 32, 110, 97, 109, 101, 40, 115, 41, 32, 116, 111, 32, 106, 111, 105, 110, 32, 111, 110, 46, 32, 67, 97, 110, 32, 98, 101, 58, 10, 32, 32, 45, 32, 83, 116, 114, 105, 110, 103, 58, 32, 115, 105, 110, 103, 108, 101, 32, 99, 111, 108, 117, 109, 110, 32, 110, 97, 109, 101, 32, 40, 115, 97, 109, 101, 32, 105, 110, 32, 98, 111, 116, 104, 32, 116, 97, 98, 108, 101, 115, 41, 10, 32, 32, 45, 32, 76, 105, 115], original_size: 200, algorithm: None })",False,,,,skipped,,,,,,,"""Requires parameters: ['other', 'on', 'how']""",,,,,,true,True,,list,,,,,discovery,,,true,0,,,"""(other, on, how)""",,,"""(other, on: list, how)""",BaseTable,join,,,"""{""""on"""": """"list""""}""",,15,unknown
,,1,,,,False,[],,,,,Get table iterator for chaining,False,<groggy.NodesTableIterator object at 0x10961fa30>,,,success,,,,,,18,,,,,,,false,True,test_execution,,,,,,discovery,,,true,2,,,(),,,(),NodesTable,iter,,,,,41,NodesTableIterator
,,1,,,,False,[],,,,,Get source node IDs,False,"""GraphArray(len=2, dtype=int64)""",,,success,,,,,,11,,,,,,,false,True,test_execution,,,,,,discovery,,,true,3,,,(),,,(),EdgesTable,sources,,,,,81,GraphArray
,,1,,,,True,['bundle_paths'],,,,,Create federated GraphTable from multiple bundle paths,False,,,,skipped,,,,,,,Requires parameters: ['bundle_paths'],,,,,,true,True,,,,,,,discovery,str,,true,4,,,"""(bundle_paths, domain_names=None)""",,,"""(bundle_paths: str, domain_names=None)""",GraphTable,from_federated_bundles,,,"""{""""bundle_paths"""": """"str""""}""",,90,unknown
,,1,,,,False,[],,,,,Get number of total rows (nodes + edges),False,5,,,success,,,,,,19,,,,,,,false,True,test_execution,,,,,,discovery,,,true,4,,,(),,,(),GraphTable,nrows,,,,,98,int
,,1,,,,True,['agg_functions'],,,,,"CompressedText(CompressedData { data: [67, 111, 108, 108, 97, 112, 115, 101, 32, 115, 117, 98, 103, 114, 97, 112, 104, 32, 116, 111, 32, 97, 32, 115, 105, 110, 103, 108, 101, 32, 110, 111, 100, 101, 32, 119, 105, 116, 104, 32, 101, 110, 104, 97, 110, 99, 101, 100, 32, 109, 105, 115, 115, 105, 110, 103, 32, 97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 104, 97, 110, 100, 108, 105, 110, 103, 10, 10, 35, 32, 65, 114, 103, 117, 109, 101, 110, 116, 115, 10, 42, 32, 96, 97, 103, 103, 95, 102, 117, 110, 99, 116, 105, 111, 110, 115, 96, 32, 45, 32, 68, 105, 99, 116, 105, 111, 110, 97, 114, 121, 32, 111, 102, 32, 123, 97, 116, 116, 114, 105, 98, 117, 116, 101, 95, 110, 97, 109, 101, 58, 32, 97, 103, 103, 114, 101, 103, 97, 116, 105, 111, 110, 95, 102, 117, 110, 99, 116, 105, 111, 110, 125, 10, 42, 32, 96, 100, 101, 102, 97, 117, 108, 116, 115, 96, 32, 45, 32, 79, 112, 116, 105, 111, 110, 97, 108, 32, 100, 105, 99, 116, 105, 111, 110, 97, 114, 121, 32, 111, 102, 32], original_size: 200, algorithm: None })",False,,,,skipped,,,,,,,Requires parameters: ['agg_functions'],,,,,,true,True,,,,,,dict,discovery,,,true,10,,,"""(agg_functions, defaults=None)""",,,"""(agg_functions: dict, defaults=None)""",Subgraph,collapse_to_node_with_defaults,,,"""{""""agg_functions"""": """"dict""""}""",,200,unknown
,,1,,,,False,[],,,,,Get reference to underlying BaseTable,False,BaseTable[2 x 4],,,success,,,,,,0,,,,,,,false,True,test_execution,,,,,,discovery,,,true,3,,,(),,,(),EdgesTable,base_table,,,,,59,BaseTable
,,1,,,,True,['attrs_dict'],,,,,Set multiple node attributes (bulk operation) - delegates to accessor,False,,,,skipped,,,,,,,Requires parameters: ['attrs_dict'],,,,,,false,True,,,,,,,discovery,,,true,10,,,(attrs_dict),,,(attrs_dict),Subgraph,set_node_attrs,,,,,234,unknown
,,1,,,,False,[],,,,,Get summary information without materializing data,False,"""GraphArray('unnamed', length=3, dtype=Int, sparse=false)""",,,success,,,,,,15,,,,,,,false,True,test_execution,,,,,,discovery,,,true,11,,,(),,,(),GraphArray,summary,,,,,263,str
,,1,,,,True,"""['attr_name', 'attributes']""",,,,,"CompressedText(CompressedData { data: [65, 100, 100, 32, 110, 111, 100, 101, 32, 97, 116, 116, 114, 105, 98, 117, 116, 101, 115, 32, 45, 32, 102, 108, 101, 120, 105, 98, 108, 101, 32, 105, 110, 112, 117, 116, 32, 102, 111, 114, 109, 97, 116, 10, 10, 65, 114, 103, 115, 58, 10, 32, 32, 32, 32, 97, 116, 116, 114, 95, 110, 97, 109, 101, 58, 32, 78, 97, 109, 101, 32, 111, 102, 32, 116, 104, 101, 32, 97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 99, 111, 108, 117, 109, 110, 32, 116, 111, 32, 97, 100, 100, 32, 32, 10, 32, 32, 32, 32, 97, 116, 116, 114, 105, 98, 117, 116, 101, 115, 58, 32, 67, 97, 110, 32, 98, 101, 58, 10, 32, 32, 32, 32, 32, 32, 32, 32, 45, 32, 68, 105, 99, 116, 105, 111, 110, 97, 114, 121, 32, 109, 97, 112, 112, 105, 110, 103, 32, 110, 111, 100, 101, 95, 105, 100, 32, 116, 111, 32, 118, 97, 108, 117, 101, 58, 32, 123, 48, 58, 32, 34, 65, 108, 105, 99, 101, 34, 44, 32, 49, 58, 32, 34, 66, 111, 98, 34, 125, 10, 32, 32], original_size: 200, algorithm: None })",False,,,,skipped,,,,,,,"""Requires parameters: ['attr_name', 'attributes']""",,,,,,true,True,,,,,,,discovery,,,true,2,,,"""(attr_name, attributes)""",,,"""(attr_name: list, attributes)""",NodesTable,with_attributes,,,"""{""""attr_name"""": """"list""""}""",list,56,unknown
,,1,,,,True,['other'],,,,,"CompressedText(CompressedData { data: [85, 110, 105, 111, 110, 32, 119, 105, 116, 104, 32, 97, 110, 111, 116, 104, 101, 114, 32, 116, 97, 98, 108, 101, 32, 40, 114, 101, 109, 111, 118, 101, 115, 32, 100, 117, 112, 108, 105, 99, 97, 116, 101, 115, 41, 10, 10, 35, 32, 65, 114, 103, 117, 109, 101, 110, 116, 115, 10, 42, 32, 96, 111, 116, 104, 101, 114, 96, 32, 45, 32, 84, 104, 101, 32, 116, 97, 98, 108, 101, 32, 116, 111, 32, 117, 110, 105, 111, 110, 32, 119, 105, 116, 104, 10, 10, 35, 32, 69, 120, 97, 109, 112, 108, 101, 115, 10, 96, 96, 96, 112, 121, 116, 104, 111, 110, 10, 35, 32, 67, 111, 109, 98, 105, 110, 101, 32, 116, 119, 111, 32, 116, 97, 98, 108, 101, 115, 32, 119, 105, 116, 104, 32, 115, 97, 109, 101, 32, 115, 99, 104, 101, 109, 97, 10, 99, 111, 109, 98, 105, 110, 101, 100, 32, 61, 32, 116, 97, 98, 108, 101, 49, 46, 117, 110, 105, 111, 110, 40, 116, 97, 98, 108, 101, 50, 41, 10, 96, 96, 96], original_size: 190, algorithm: None })",False,,,,skipped,,,,,,,Requires parameters: ['other'],,,,,,false,True,,,,,,,discovery,,,true,0,,,(other),,,(other),BaseTable,union,,,,,29,unknown
,,1,,,,True,"""['node_id', 'attr_name']""",,,,,Check if node has specific attribute - delegates to PyGraphAttr,False,,,,skipped,,,,,,,"""Requires parameters: ['node_id', 'attr_name']""",,,,,,true,True,,,,,int,,discovery,,,true,6,,,"""(node_id, attr_name)""",,,"""(node_id: int, attr_name: str)""",Graph,has_node_attribute,,,"""{""""node_id"""": """"int"""", """"attr_name"""": """"str""""}""",str,152,unknown
,,1,,,,False,[],,,,,Convert subgraph nodes to a table - pure delegation to core GraphTable,False,"CompressedText(CompressedData { data: [78, 111, 100, 101, 115, 84, 97, 98, 108, 101, 91, 51, 32, 120, 32, 52, 93, 10, 66, 97, 115, 101, 84, 97, 98, 108, 101, 91, 51, 32, 120, 32, 52, 93, 10, 124, 32, 101, 110, 116, 105, 116, 121, 95, 116, 121, 112, 101, 32, 124, 32, 32, 32, 32, 32, 32, 32, 116, 121, 112, 101, 32, 124, 32, 32, 32, 32, 110, 111, 100, 101, 95, 105, 100, 32, 124, 32, 32, 32, 32, 32, 32, 32, 110, 97, 109, 101, 32, 124, 32, 10, 124, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 124, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 124, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 124, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 124, 10, 124, 32, 32, 32, 32, 32, 32, 32, 98, 97, 115, 101, 32, 124, 32, 32, 32, 32, 32, 32, 116, 97, 98, 108, 101, 32, 124, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 49, 32, 124, 32, 32, 66, 97, 115, 101, 84, 97, 98, 108, 101, 32, 124, 32, 10], original_size: 200, algorithm: None })",,,success,,,,,,2,,,,,,,false,True,test_execution,,,,,,discovery,,,true,10,,,(),,,(),Subgraph,table,,,,,239,NodesTable
,,1,,,,False,[],,,,,Get rich display representation with EdgesTable type,False,"CompressedText(CompressedData { data: [226, 138, 150, 226, 138, 150, 32, 103, 114, 46, 116, 97, 98, 108, 101, 10, 226, 149, 173, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 172, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 172, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 172, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 172, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 149, 174, 10, 226, 148, 130, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 148, 130, 32, 109, 101, 116, 104, 111, 100, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 226, 148, 130, 32, 115, 111, 117, 114, 99, 101, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32], original_size: 450, algorithm: None })",,,success,,,,,,15,,,,,,,false,True,test_execution,,,,,,discovery,,,true,3,,,(config=None),,,(config=None),EdgesTable,rich_display,,,,,76,str
,,1,,,,False,[],,,,,Get the number of nodes in the graph - DELEGATED,False,3,,,success,,,,,,19,,,,,,,false,True,test_execution,,,,,,discovery,,,true,6,,,(),,,(),Graph,node_count,,,,,161,int
,,1,,,,False,[],,,,,Get rich display representation with NodesTable type,False,"CompressedText(CompressedData { data: [226, 138, 150, 226, 138, 150, 32, 103, 114, 46, 116, 97, 98, 108, 101, 10, 226, 149, 173, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 172, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 172, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 172, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 148, 128, 226, 149, 174, 10, 226, 148, 130, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 148, 130, 32, 110, 97, 109, 101, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 226, 148, 130, 32, 116, 121, 112, 101, 32, 32], original_size: 450, algorithm: None })",,,success,,,,,,15,,,,,,,false,True,test_execution,,,,,,discovery,,,true,2,,,(config=None),,,(config=None),NodesTable,rich_display,,,,,45,str
,,1,,,,True,['path'],,,,,Export BaseTable to JSON file,False,None,,,success_with_params,,,,,,16,,,,,,,true,True,test_execution,,str,,,,discovery,,,true,0,,,(path),,,(path: str),BaseTable,to_json,,,"""{""""path"""": """"str""""}""",,26,NoneType
,,1,,,,False,[],,,,,"""Get first n rows (primarily from nodes table, default 5)""",False,"CompressedText(CompressedData { data: [71, 114, 97, 112, 104, 84, 97, 98, 108, 101, 91, 51, 32, 110, 111, 100, 101, 115, 44, 32, 50, 32, 101, 100, 103, 101, 115, 93, 10, 86, 97, 108, 105, 100, 97, 116, 105, 111, 110, 32, 80, 111, 108, 105, 99, 121, 58, 32, 83, 116, 97, 110, 100, 97, 114, 100, 10, 78, 111, 100, 101, 115, 58, 10, 78, 111, 100, 101, 115, 84, 97, 98, 108, 101, 91, 51, 32, 120, 32, 51, 93, 10, 66, 97, 115, 101, 84, 97, 98, 108, 101, 91, 51, 32, 120, 32, 51, 93, 10, 124, 32, 32, 32, 32, 32, 32, 32, 110, 97, 109, 101, 32, 124, 32, 32, 32, 32, 32, 32, 32, 116, 121, 112, 101, 32, 124, 32, 32, 32, 32, 110, 111, 100, 101, 95, 105, 100, 32, 124, 32, 10, 124, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 124, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 124, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 124, 10, 124, 32, 32, 32, 32, 32, 32, 71, 114, 97, 112, 104, 32, 124, 32, 32, 32, 32], original_size: 200, algorithm: None })",,,success,,,,,,4,,,,,,,false,True,test_execution,,,,,,discovery,,,true,4,,,(n=5),,,(n=5),GraphTable,head,,,,,92,GraphTable
,,1,list,,,True,"""['source', 'target']""",,,,,Create subgraph representing shortest path between two nodes,False,,,,skipped,,,,,list,,"""Requires parameters: ['source', 'target']""",,,,,,true,True,,,,,,,discovery,,,true,10,,,"""(source, target)""",,,"""(source: list, target: list)""",Subgraph,shortest_path_subgraph,,,"""{""""source"""": """"list"""", """"target"""": """"list""""}""",,235,unknown
,,1,,,,False,[],,,,,Count null values,False,0,,,success,,,,,,19,,,,,,,false,True,test_execution,,,,,,discovery,,,true,11,,,(),,,(),GraphArray,null_count,,,,,257,int
,,1,,,,False,[],,,,,Get comprehensive statistical summary,False,"CompressedText(CompressedData { data: [83, 116, 97, 116, 105, 115, 116, 105, 99, 97, 108, 32, 83, 117, 109, 109, 97, 114, 121, 58, 10, 32, 32, 67, 111, 117, 110, 116, 58, 32, 51, 10, 32, 32, 77, 101, 97, 110, 58, 32, 32, 49, 46, 48, 48, 10, 32, 32, 83, 116, 100, 58, 32, 32, 32, 49, 46, 48, 48, 10, 32, 32, 77, 105, 110, 58, 32, 32, 32, 73, 110, 116, 40, 48, 41, 10, 32, 32, 50, 53, 37, 58, 32, 32, 32, 49, 46, 48, 48, 10, 32, 32, 53, 48, 37, 58, 32, 32, 32, 49, 46, 48, 48, 10, 32, 32, 55, 53, 37, 58, 32, 32, 32, 50, 46, 48, 48, 10, 32, 32, 77, 97, 120, 58, 32, 32, 32, 73, 110, 116, 40, 50, 41, 10], original_size: 134, algorithm: None })",,,success,,,,,,34,,,,,,,false,True,test_execution,,,,,,discovery,,,true,11,,,(),,,(),GraphArray,describe,,,,,248,StatsSummary
,,1,,,,True,['filter'],,,,,Filter edges and return new subgraph,False,,,,skipped,,,,,,,Requires parameters: ['filter'],,,,,,false,True,,,,,,,discovery,,,true,10,,,(filter),,,(filter),Subgraph,filter_edges,,,,,211,unknown
,,1,,,,False,[],,,,,Get minimum value,False,0,,,success,,,,,,19,,,,,,,false,True,test_execution,,,,,,discovery,,,true,11,,,(),,,(),GraphArray,min,,,,,256,int
,,1,,,,False,[],,,,,Calculate median (50th percentile),False,1.0,,,success,,,,,,26,,,,,,,false,True,test_execution,,,,,,discovery,,,true,11,,,(),,,(),GraphArray,median,,,,,255,float
,,1,,,,False,[],,,,,Get last n rows (default 5),False,"CompressedText(CompressedData { data: [69, 100, 103, 101, 115, 84, 97, 98, 108, 101, 91, 50, 32, 120, 32, 52, 93, 10, 66, 97, 115, 101, 84, 97, 98, 108, 101, 91, 50, 32, 120, 32, 52, 93, 10, 124, 32, 32, 32, 32, 32, 109, 101, 116, 104, 111, 100, 32, 124, 32, 32, 32, 32, 32, 115, 111, 117, 114, 99, 101, 32, 124, 32, 32, 32, 32, 32, 116, 97, 114, 103, 101, 116, 32, 124, 32, 32, 32, 32, 101, 100, 103, 101, 95, 105, 100, 32, 124, 32, 10, 124, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 124, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 124, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 124, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 124, 10, 124, 32, 32, 32, 32, 32, 32, 116, 97, 98, 108, 101, 32, 124, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 49, 32, 124, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 50, 32, 124, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 49, 32, 124, 32, 10, 124], original_size: 200, algorithm: None })",,,success,,,,,,3,,,,,,,false,True,test_execution,,,,,,discovery,,,true,3,,,(n=5),,,(n=5),EdgesTable,tail,,,,,82,EdgesTable
,,1,,,,False,[],,,,,Calculate transitivity of the subgraph,False,,,,error,,,,,,,Transitivity not yet implemented in core - coming in future version,,,,,,false,True,,,,,,,discovery,,,true,10,,,(),,,(),Subgraph,transitivity,,,,,245,unknown
,,1,,,str,True,['bundle_path'],,,,,"CompressedText(CompressedData { data: [83, 97, 118, 101, 32, 71, 114, 97, 112, 104, 84, 97, 98, 108, 101, 32, 97, 115, 32, 97, 32, 118, 50, 46, 48, 32, 98, 117, 110, 100, 108, 101, 32, 119, 105, 116, 104, 32, 99, 111, 109, 112, 114, 101, 104, 101, 110, 115, 105, 118, 101, 32, 109, 101, 116, 97, 100, 97, 116, 97, 32, 97, 110, 100, 32, 99, 104, 101, 99, 107, 115, 117, 109, 115, 10, 10, 35, 32, 65, 114, 103, 117, 109, 101, 110, 116, 115, 10, 42, 32, 96, 98, 117, 110, 100, 108, 101, 95, 112, 97, 116, 104, 96, 32, 45, 32, 68, 105, 114, 101, 99, 116, 111, 114, 121, 32, 112, 97, 116, 104, 32, 116, 111, 32, 115, 97, 118, 101, 32, 116, 104, 101, 32, 98, 117, 110, 100, 108, 101, 10, 10, 35, 32, 69, 120, 97, 109, 112, 108, 101, 115, 10, 96, 96, 96, 112, 121, 116, 104, 111, 110, 10, 35, 32, 83, 97, 118, 101, 32, 119, 105, 116, 104, 32, 99, 111, 109, 112, 114, 101, 104, 101, 110, 115, 105, 118, 101, 32, 109, 101, 116, 97, 100, 97, 116, 97, 32, 97, 110, 100], original_size: 200, algorithm: None })",False,,,,skipped,,,,,,,Requires parameters: ['bundle_path'],,,,,,true,True,,,,,,,discovery,,,true,4,,,(bundle_path),,,(bundle_path: str),GraphTable,save_bundle,,,"""{""""bundle_path"""": """"str""""}""",,99,unknown
,,1,,,,True,"""['central_nodes', 'hops']""",,,,int,"""Compute neighborhoods from this subgraph, returning a PyNeighborhoodResult""",False,,,,skipped,,,,,,,"""Requires parameters: ['central_nodes', 'hops']""",,,,,,true,True,,,,,,,discovery,,,true,10,,,"""(central_nodes, hops)""",,,"""(central_nodes: int, hops)""",Subgraph,neighborhood,,,"""{""""central_nodes"""": """"int""""}""",,227,unknown
,,1,,,,False,[],,,,,Get target node IDs  ,False,"""GraphArray(len=2, dtype=int64)""",,,success,,,,,,11,,,,,,,false,True,test_execution,,,,,,discovery,,,true,3,,,(),,,(),EdgesTable,targets,,,,,83,GraphArray
,,1,,,,False,[],,,,,Auto-assign edge IDs for null values (useful for meta nodes and imported data),False,"CompressedText(CompressedData { data: [71, 114, 97, 112, 104, 84, 97, 98, 108, 101, 91, 51, 32, 110, 111, 100, 101, 115, 44, 32, 50, 32, 101, 100, 103, 101, 115, 93, 10, 86, 97, 108, 105, 100, 97, 116, 105, 111, 110, 32, 80, 111, 108, 105, 99, 121, 58, 32, 83, 116, 97, 110, 100, 97, 114, 100, 10, 78, 111, 100, 101, 115, 58, 10, 78, 111, 100, 101, 115, 84, 97, 98, 108, 101, 91, 51, 32, 120, 32, 51, 93, 10, 66, 97, 115, 101, 84, 97, 98, 108, 101, 91, 51, 32, 120, 32, 51, 93, 10, 124, 32, 32, 32, 32, 32, 32, 32, 110, 97, 109, 101, 32, 124, 32, 32, 32, 32, 32, 32, 32, 116, 121, 112, 101, 32, 124, 32, 32, 32, 32, 110, 111, 100, 101, 95, 105, 100, 32, 124, 32, 10, 124, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 124, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 124, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 124, 10, 124, 32, 32, 32, 32, 32, 32, 71, 114, 97, 112, 104, 32, 124, 32, 32, 32, 32], original_size: 200, algorithm: None })",,,success,,,,,,4,,,,,,,false,True,test_execution,,,,,,discovery,,,true,4,,,(),,,(),GraphTable,auto_assign_edge_ids,,,,,89,GraphTable
,,1,,,,True,['edge_id'],,,,,Check if an edge exists in this subgraph,False,,,,skipped,,,,,,,Requires parameters: ['edge_id'],,,,int,,true,True,,,,,,,discovery,,,true,10,,,(edge_id),,,(edge_id: int),Subgraph,has_edge,,,"""{""""edge_id"""": """"int""""}""",,215,unknown
,,1,,,,False,[],,,,,"CompressedText(CompressedData { data: [71, 101, 116, 32, 110, 111, 100, 101, 115, 32, 102, 114, 111, 109, 32, 116, 104, 105, 115, 32, 115, 117, 98, 103, 114, 97, 112, 104, 32, 97, 115, 32, 97, 32, 78, 111, 100, 101, 115, 65, 99, 99, 101, 115, 115, 111, 114, 10, 69, 110, 97, 98, 108, 101, 115, 32, 99, 104, 97, 105, 110, 105, 110, 103, 32, 108, 105, 107, 101, 58, 32, 115, 117, 98, 103, 114, 97, 112, 104, 46, 116, 111, 95, 110, 111, 100, 101, 115, 40, 41, 46, 116, 97, 98, 108, 101, 40, 41, 46, 115, 116, 97, 116, 115, 40, 41], original_size: 106, algorithm: None })",False,NodesAccessor(4 nodes),,,success,,,,,,33,,,,,,,false,True,test_execution,,,,,,discovery,,,true,10,,,(),,,(),Subgraph,to_nodes,,,,,244,NodesAccessor
,,1,,,,True,['columns'],,,,,"CompressedText(CompressedData { data: [71, 114, 111, 117, 112, 32, 98, 121, 32, 99, 111, 108, 117, 109, 110, 115, 32, 97, 110, 100, 32, 114, 101, 116, 117, 114, 110, 32, 103, 114, 111, 117, 112, 101, 100, 32, 116, 97, 98, 108, 101, 115, 10, 10, 65, 114, 103, 115, 58, 10, 32, 32, 32, 32, 99, 111, 108, 117, 109, 110, 115, 58, 32, 76, 105, 115, 116, 32, 111, 102, 32, 99, 111, 108, 117, 109, 110, 32, 110, 97, 109, 101, 115, 32, 116, 111, 32, 103, 114, 111, 117, 112, 32, 98, 121, 10, 10, 82, 101, 116, 117, 114, 110, 115, 58, 10, 32, 32, 32, 32, 80, 121, 84, 97, 98, 108, 101, 65, 114, 114, 97, 121, 58, 32, 65, 114, 114, 97, 121, 45, 108, 105, 107, 101, 32, 99, 111, 110, 116, 97, 105, 110, 101, 114, 32, 104, 111, 108, 100, 105, 110, 103, 32, 116, 104, 101, 32, 103, 114, 111, 117, 112, 101, 100, 32, 116, 97, 98, 108, 101, 115], original_size: 171, algorithm: None })",False,,,,skipped,,,list,,,,Requires parameters: ['columns'],,,,,,true,True,,,,,,,discovery,,,true,0,,,(columns),,,(columns: list),BaseTable,group_by,,,"""{""""columns"""": """"list""""}""",,10,unknown
,,1,,,,False,[],,,,,Convert to plain Python list,False,"""[1, 0, 2]""",,,success,,,,,,21,,,,,,,false,True,test_execution,,,,,,discovery,,,true,11,,,(),,,(),GraphArray,to_list,,,,,264,list
,,1,,,,False,[],,,,,Get in-degree of nodes within subgraph,False,"""GraphArray(len=3, dtype=int64)""",,,success,,,,,,11,,,,,,,false,True,test_execution,,,,,,discovery,,,true,10,,,"""(nodes=None, full_graph=False)""",,,"""(nodes=None, full_graph=False)""",Subgraph,in_degree,,,,,220,GraphArray
,,1,,,,True,['p'],,,,,"CompressedText(CompressedData { data: [67, 97, 108, 99, 117, 108, 97, 116, 101, 32, 112, 101, 114, 99, 101, 110, 116, 105, 108, 101, 32, 40, 117, 115, 101, 114, 45, 102, 114, 105, 101, 110, 100, 108, 121, 32, 119, 114, 97, 112, 112, 101, 114, 32, 102, 111, 114, 32, 113, 117, 97, 110, 116, 105, 108, 101, 41, 10, 112, 101, 114, 99, 101, 110, 116, 105, 108, 101, 58, 32, 48, 45, 49, 48, 48, 32, 40, 101, 46, 103, 46, 44, 32, 50, 53, 32, 102, 111, 114, 32, 50, 53, 116, 104, 32, 112, 101, 114, 99, 101, 110, 116, 105, 108, 101, 44, 32, 57, 48, 32, 102, 111, 114, 32, 57, 48, 116, 104, 32, 112, 101, 114, 99, 101, 110, 116, 105, 108, 101, 41], original_size: 130, algorithm: None })",False,,,,skipped,,,,,,,Requires parameters: ['p'],,,,,,false,True,,,,,,,discovery,,,true,11,,,(p),,,(p),GraphArray,percentile,,,,,258,unknown
,,1,,,,False,[],,,,,Get the number of edges in the graph - DELEGATED,False,2,,,success,,,,,,19,,,,,,,false,True,test_execution,,,,,,discovery,,,true,6,,,(),,,(),Graph,edge_count,,,,,138,int
,,1,,,,False,[],,,,,Direct delegation: Apply table() to each component and return PyTableArray,False,TableArray(1 tables),,,success,,,,,,30,,,,,,,false,True,test_execution,,,,,,discovery,,,true,9,,,(),,,(),ComponentsArray,table,,,,,192,TableArray
,,1,,,,False,[],,,,,"CompressedText(CompressedData { data: [68, 46, 117, 112, 100, 97, 116, 101, 40, 91, 69, 44, 32, 93, 42, 42, 70, 41, 32, 45, 62, 32, 78, 111, 110, 101, 46, 32, 32, 85, 112, 100, 97, 116, 101, 32, 68, 32, 102, 114, 111, 109, 32, 100, 105, 99, 116, 47, 105, 116, 101, 114, 97, 98, 108, 101, 32, 69, 32, 97, 110, 100, 32, 70, 46, 10, 73, 102, 32, 69, 32, 105, 115, 32, 112, 114, 101, 115, 101, 110, 116, 32, 97, 110, 100, 32, 104, 97, 115, 32, 97, 32, 46, 107, 101, 121, 115, 40, 41, 32, 109, 101, 116, 104, 111, 100, 44, 32, 116, 104, 101, 110, 32, 100, 111, 101, 115, 58, 32, 32, 102, 111, 114, 32, 107, 32, 105, 110, 32, 69, 58, 32, 68, 91, 107, 93, 32, 61, 32, 69, 91, 107, 93, 10, 73, 102, 32, 69, 32, 105, 115, 32, 112, 114, 101, 115, 101, 110, 116, 32, 97, 110, 100, 32, 108, 97, 99, 107, 115, 32, 97, 32, 46, 107, 101, 121, 115, 40, 41, 32, 109, 101, 116, 104, 111, 100, 44, 32, 116, 104, 101, 110, 32, 100, 111, 101, 115, 58, 32, 32], original_size: 200, algorithm: None })",False,None,,,success,,,,,,16,,,,,,,false,True,test_execution,,,,,,discovery,,,true,12,,,signature_unavailable,,,signature_unavailable,Matrix,update,,,,,280,NoneType
,,1,,,,False,[],,,,,Get out-degree of nodes within subgraph,False,"""GraphArray(len=3, dtype=int64)""",,,success,,,,,,11,,,,,,,false,True,test_execution,,,,,,discovery,,,true,10,,,"""(nodes=None, full_graph=False)""",,,"""(nodes=None, full_graph=False)""",Subgraph,out_degree,,,,,230,GraphArray
,,1,,,,False,[],,,,,,False,"""{'count': 5, 'non_null': 5, 'null': 0, 'unique': 5, 'dtype': 'Int'}""",,,success,,,,,,23,,,,,,,false,True,test_execution,,,,,,discovery,,,true,5,,,(),,,(),BaseArray,describe,,,,,110,dict
,,1,,,,True,['columns'],,,,,"CompressedText(CompressedData { data: [71, 114, 111, 117, 112, 32, 98, 121, 32, 99, 111, 108, 117, 109, 110, 115, 32, 97, 110, 100, 32, 114, 101, 116, 117, 114, 110, 32, 103, 114, 111, 117, 112, 101, 100, 32, 116, 97, 98, 108, 101, 115, 10, 10, 65, 114, 103, 115, 58, 10, 32, 32, 32, 32, 99, 111, 108, 117, 109, 110, 115, 58, 32, 76, 105, 115, 116, 32, 111, 102, 32, 99, 111, 108, 117, 109, 110, 32, 110, 97, 109, 101, 115, 32, 116, 111, 32, 103, 114, 111, 117, 112, 32, 98, 121, 10, 10, 82, 101, 116, 117, 114, 110, 115, 58, 10, 32, 32, 32, 32, 80, 121, 69, 100, 103, 101, 115, 84, 97, 98, 108, 101, 65, 114, 114, 97, 121, 58, 32, 65, 114, 114, 97, 121, 45, 108, 105, 107, 101, 32, 99, 111, 110, 116, 97, 105, 110, 101, 114, 32, 104, 111, 108, 100, 105, 110, 103, 32, 116, 104, 101, 32, 103, 114, 111, 117, 112, 101, 100, 32, 101, 100, 103, 101, 32, 116, 97, 98, 108, 101, 115], original_size: 181, algorithm: None })",False,,,,skipped,,,list,,,,Requires parameters: ['columns'],,,,,,true,True,,,,,,,discovery,,,true,3,,,(columns),,,(columns: list),EdgesTable,group_by,,,"""{""""columns"""": """"list""""}""",,70,unknown
,,1,,,,True,['path'],,,,,Export EdgesTable to CSV file,False,None,,,success_with_params,,,,,,16,,,,,,,true,True,test_execution,,str,,,,discovery,,,true,3,,,(path),,,(path: str),EdgesTable,to_csv,,,"""{""""path"""": """"str""""}""",,84,NoneType
,,1,,,,True,"""['start', 'end']""",,,,,"CompressedText(CompressedData { data: [71, 101, 116, 32, 97, 32, 115, 108, 105, 99, 101, 32, 111, 102, 32, 114, 111, 119, 115, 32, 91, 115, 116, 97, 114, 116, 44, 32, 101, 110, 100, 41, 10, 10, 65, 114, 103, 115, 58, 10, 32, 32, 32, 32, 115, 116, 97, 114, 116, 58, 32, 83, 116, 97, 114, 116, 105, 110, 103, 32, 114, 111, 119, 32, 105, 110, 100, 101, 120, 32, 40, 105, 110, 99, 108, 117, 115, 105, 118, 101, 41, 10, 32, 32, 32, 32, 101, 110, 100, 58, 32, 69, 110, 100, 105, 110, 103, 32, 114, 111, 119, 32, 105, 110, 100, 101, 120, 32, 40, 101, 120, 99, 108, 117, 115, 105, 118, 101, 41, 10, 10, 82, 101, 116, 117, 114, 110, 115, 58, 10, 32, 32, 32, 32, 80, 121, 78, 111, 100, 101, 115, 84, 97, 98, 108, 101, 58, 32, 65, 32, 110, 101, 119, 32, 116, 97, 98, 108, 101, 32, 119, 105, 116, 104, 32, 116, 104, 101, 32, 115, 112, 101, 99, 105, 102, 105, 101, 100, 32, 114, 111, 119, 32, 115, 108, 105, 99, 101], original_size: 188, algorithm: None })",False,,,,skipped,,,,,,,"""Requires parameters: ['start', 'end']""",,,,,,false,True,,,,,,,discovery,,,true,2,,,"""(start, end)""",,,"""(start, end)""",NodesTable,slice,,,,,48,unknown
,,1,,,,False,[],,,,,D.copy() -> a shallow copy of D,False,"CompressedText(CompressedData { data: [123, 39, 115, 105, 122, 101, 39, 58, 32, 51, 44, 32, 39, 105, 115, 95, 115, 112, 97, 114, 115, 101, 39, 58, 32, 84, 114, 117, 101, 44, 32, 39, 116, 121, 112, 101, 39, 58, 32, 39, 97, 100, 106, 97, 99, 101, 110, 99, 121, 95, 109, 97, 116, 114, 105, 120, 39, 44, 32, 39, 109, 97, 116, 114, 105, 120, 39, 58, 32, 71, 114, 97, 112, 104, 77, 97, 116, 114, 105, 120, 40, 51, 32, 120, 32, 51, 44, 32, 100, 116, 121, 112, 101, 61, 70, 108, 111, 97, 116, 41, 125], original_size: 101, algorithm: None })",,,success,,,,,,23,,,,,,,false,True,test_execution,,,,,,discovery,,,true,12,,,signature_unavailable,,,signature_unavailable,Matrix,copy,,,,,272,dict
,,1,,,,False,[],,,,,"CompressedText(CompressedData { data: [71, 101, 116, 32, 100, 101, 103, 114, 101, 101, 32, 111, 102, 32, 110, 111, 100, 101, 115, 32, 105, 110, 32, 115, 117, 98, 103, 114, 97, 112, 104, 32, 97, 115, 32, 71, 114, 97, 112, 104, 65, 114, 114, 97, 121, 10, 10, 85, 115, 97, 103, 101, 58, 10, 45, 32, 100, 101, 103, 114, 101, 101, 40, 110, 111, 100, 101, 95, 105, 100, 44, 32, 102, 117, 108, 108, 95, 103, 114, 97, 112, 104, 61, 70, 97, 108, 115, 101, 41, 32, 45, 62, 32, 105, 110, 116, 58, 32, 100, 101, 103, 114, 101, 101, 32, 111, 102, 32, 115, 105, 110, 103, 108, 101, 32, 110, 111, 100, 101, 32, 40, 108, 111, 99, 97, 108, 32, 111, 114, 32, 102, 117, 108, 108, 32, 103, 114, 97, 112, 104, 41, 10, 45, 32, 100, 101, 103, 114, 101, 101, 40, 110, 111, 100, 101, 95, 105, 100, 115, 44, 32, 102, 117, 108, 108, 95, 103, 114, 97, 112, 104, 61, 70, 97, 108, 115, 101, 41, 32, 45, 62, 32, 71, 114, 97, 112, 104, 65, 114, 114, 97, 121, 58, 32, 100, 101, 103, 114, 101, 101], original_size: 200, algorithm: None })",False,"""GraphArray(len=3, dtype=int64)""",,,success,,,,,,11,,,,,,,false,True,test_execution,,,,,,discovery,,,true,10,,,"""(nodes=None, *, full_graph=False)""",,,"""(nodes=None, *, full_graph=False)""",Subgraph,degree,,,,,204,GraphArray
,,1,,,,False,[],,,,,Get edge IDs,False,"""GraphArray(len=2, dtype=int64)""",,,success,,,,,,11,,,,,,,false,True,test_execution,,,,,,discovery,,,true,3,,,(),,,(),EdgesTable,edge_ids,,,,,61,GraphArray
,,1,,,,True,['edge_id'],,,,,Check if an edge exists in the graph - DELEGATED  ,False,,,,skipped,,,,,,,Requires parameters: ['edge_id'],,,,int,,true,True,,,,,,,discovery,,,true,6,,,(edge_id),,,(edge_id: int),Graph,has_edge,,,"""{""""edge_id"""": """"int""""}""",,149,unknown
,,1,,,,False,[],,,,,Auto-assign edge IDs for null values (useful for meta nodes),False,"CompressedText(CompressedData { data: [69, 100, 103, 101, 115, 84, 97, 98, 108, 101, 91, 50, 32, 120, 32, 52, 93, 10, 66, 97, 115, 101, 84, 97, 98, 108, 101, 91, 50, 32, 120, 32, 52, 93, 10, 124, 32, 32, 32, 32, 32, 109, 101, 116, 104, 111, 100, 32, 124, 32, 32, 32, 32, 32, 115, 111, 117, 114, 99, 101, 32, 124, 32, 32, 32, 32, 32, 116, 97, 114, 103, 101, 116, 32, 124, 32, 32, 32, 32, 101, 100, 103, 101, 95, 105, 100, 32, 124, 32, 10, 124, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 124, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 124, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 124, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 124, 10, 124, 32, 32, 32, 32, 32, 32, 116, 97, 98, 108, 101, 32, 124, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 49, 32, 124, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 50, 32, 124, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 49, 32, 124, 32, 10, 124], original_size: 200, algorithm: None })",,,success,,,,,,3,,,,,,,false,True,test_execution,,,,,,discovery,,,true,3,,,(),,,(),EdgesTable,auto_assign_edge_ids,,,,,58,EdgesTable
,,1,,,,True,"""['attr_name', 'value']""",,,,,Filter nodes by attribute value,False,,,,skipped,,,,,,,"""Requires parameters: ['attr_name', 'value']""",,,,,,true,True,,,,,,,discovery,,,true,2,,,"""(attr_name, value)""",,,"""(attr_name: str, value)""",NodesTable,filter_by_attr,,,"""{""""attr_name"""": """"str""""}""",str,33,unknown
,,1,,,,True,['path'],,,,,Import NodesTable from CSV file (must contain node_id column),False,,,,skipped,,,,,,,Requires parameters: ['path'],,,,,,true,True,,,str,,,,discovery,,,true,2,,,(path),,,(path: str),NodesTable,from_csv,,,"""{""""path"""": """"str""""}""",,34,unknown
,,1,,,,True,['kwargs'],,,,,,False,,,,skipped,,,,,,,Requires parameters: ['kwargs'],,,,,,false,True,,,,,,,discovery,,,true,6,,,"""(node_id=None, **kwargs)""",,,"""(node_id=None, **kwargs)""",Graph,add_node,,,,,119,unknown
,,1,,,,True,['edge'],,,int,,Check if edge exists - DELEGATED (same as has_edge)  ,False,,,,skipped,,,,,,,Requires parameters: ['edge'],,,,,,true,True,,,,,,,discovery,,,true,6,,,(edge),,,(edge: int),Graph,contains_edge,,,"""{""""edge"""": """"int""""}""",,131,unknown
,,1,,,,True,['edge_id'],,,,,Get all attribute keys for an edge - delegates to PyGraphAttr,False,,,,skipped,,,,,,,Requires parameters: ['edge_id'],,,,int,,true,True,,,,,,,discovery,,,true,6,,,(edge_id),,,(edge_id: int),Graph,edge_attribute_keys,,,"""{""""edge_id"""": """"int""""}""",,137,unknown
,,1,,,,False,[],,,,,Check if there are uncommitted changes (FFI wrapper around core history system),False,True,,,success,,,,,,13,,,,,,,false,True,test_execution,,,,,,discovery,,,true,6,,,(),,,(),Graph,has_uncommitted_changes,,,,,153,bool
,,1,,,,True,['attrs_dict'],,,,,"CompressedText(CompressedData { data: [83, 101, 116, 32, 97, 116, 116, 114, 105, 98, 117, 116, 101, 115, 32, 102, 111, 114, 32, 109, 117, 108, 116, 105, 112, 108, 101, 32, 101, 100, 103, 101, 115, 32, 40, 98, 117, 108, 107, 32, 111, 112, 101, 114, 97, 116, 105, 111, 110, 41, 10, 83, 117, 112, 112, 111, 114, 116, 115, 32, 116, 104, 101, 32, 115, 97, 109, 101, 32, 102, 111, 114, 109, 97, 116, 115, 32, 97, 115, 32, 116, 104, 101, 32, 109, 97, 105, 110, 32, 103, 114, 97, 112, 104, 58, 32, 101, 100, 103, 101, 45, 99, 101, 110, 116, 114, 105, 99, 44, 32, 99, 111, 108, 117, 109, 110, 45, 99, 101, 110, 116, 114, 105, 99, 44, 32, 101, 116, 99, 46], original_size: 130, algorithm: None })",False,,,,skipped,,,,,,,Requires parameters: ['attrs_dict'],,,,,,false,True,,,,,,,discovery,,,true,8,,,(attrs_dict),,,(attrs_dict),Edges,set_attrs,,,,,185,unknown
,,1,,,,True,['columns'],,,,,"CompressedText(CompressedData { data: [83, 101, 108, 101, 99, 116, 32, 115, 112, 101, 99, 105, 102, 105, 99, 32, 99, 111, 108, 117, 109, 110, 115, 32, 116, 111, 32, 99, 114, 101, 97, 116, 101, 32, 97, 32, 110, 101, 119, 32, 116, 97, 98, 108, 101, 10, 10, 65, 114, 103, 115, 58, 10, 32, 32, 32, 32, 99, 111, 108, 117, 109, 110, 115, 58, 32, 76, 105, 115, 116, 32, 111, 102, 32, 99, 111, 108, 117, 109, 110, 32, 110, 97, 109, 101, 115, 32, 116, 111, 32, 115, 101, 108, 101, 99, 116, 10, 10, 82, 101, 116, 117, 114, 110, 115, 58, 10, 32, 32, 32, 32, 80, 121, 66, 97, 115, 101, 84, 97, 98, 108, 101, 58, 32, 65, 32, 110, 101, 119, 32, 116, 97, 98, 108, 101, 32, 119, 105, 116, 104, 32, 111, 110, 108, 121, 32, 116, 104, 101, 32, 115, 101, 108, 101, 99, 116, 101, 100, 32, 99, 111, 108, 117, 109, 110, 115], original_size: 166, algorithm: None })",False,,,,skipped,,,list,,,,Requires parameters: ['columns'],,,,,,true,True,,,,,,,discovery,,,true,0,,,(columns),,,(columns: list),BaseTable,select,,,"""{""""columns"""": """"list""""}""",,17,unknown
,,1,,,,True,"""['column_name', 'values']""",,,,,"CompressedText(CompressedData { data: [83, 101, 116, 32, 97, 110, 32, 101, 110, 116, 105, 114, 101, 32, 99, 111, 108, 117, 109, 110, 32, 119, 105, 116, 104, 32, 110, 101, 119, 32, 118, 97, 108, 117, 101, 115, 10, 10, 65, 114, 103, 115, 58, 10, 32, 32, 32, 32, 99, 111, 108, 117, 109, 110, 95, 110, 97, 109, 101, 58, 32, 78, 97, 109, 101, 32, 111, 102, 32, 116, 104, 101, 32, 99, 111, 108, 117, 109, 110, 32, 116, 111, 32, 115, 101, 116, 10, 32, 32, 32, 32, 118, 97, 108, 117, 101, 115, 58, 32, 76, 105, 115, 116, 32, 111, 102, 32, 110, 101, 119, 32, 118, 97, 108, 117, 101, 115, 32, 102, 111, 114, 32, 116, 104, 101, 32, 99, 111, 108, 117, 109, 110, 10, 32, 32, 32, 32, 10, 69, 120, 97, 109, 112, 108, 101, 58, 10, 32, 32, 32, 32, 116, 97, 98, 108, 101, 46, 115, 101, 116, 95, 99, 111, 108, 117, 109, 110, 40, 34, 115, 99, 111, 114, 101, 34, 44, 32, 91, 57, 53, 44, 32, 56, 55, 44, 32, 57, 50, 44, 32, 56, 56, 93, 41], original_size: 194, algorithm: None })",False,,,,skipped,,,,list,,,"""Requires parameters: ['column_name', 'values']""",list,,,,,true,True,,,,,,,discovery,,,true,0,,,"""(column_name, values)""",,,"""(column_name: list, values: list)""",BaseTable,set_column,,,"""{""""column_name"""": """"list"""", """"values"""": """"list""""}""",,18,unknown
,,1,,,str,True,['bundle_path'],,,,,"CompressedText(CompressedData { data: [86, 101, 114, 105, 102, 121, 32, 98, 117, 110, 100, 108, 101, 32, 105, 110, 116, 101, 103, 114, 105, 116, 121, 32, 119, 105, 116, 104, 111, 117, 116, 32, 108, 111, 97, 100, 105, 110, 103, 32, 116, 104, 101, 32, 102, 117, 108, 108, 32, 100, 97, 116, 97, 10, 10, 35, 32, 65, 114, 103, 117, 109, 101, 110, 116, 115, 10, 42, 32, 96, 98, 117, 110, 100, 108, 101, 95, 112, 97, 116, 104, 96, 32, 45, 32, 68, 105, 114, 101, 99, 116, 111, 114, 121, 32, 112, 97, 116, 104, 32, 99, 111, 110, 116, 97, 105, 110, 105, 110, 103, 32, 116, 104, 101, 32, 98, 117, 110, 100, 108, 101, 10, 10, 35, 32, 82, 101, 116, 117, 114, 110, 115, 10, 42, 32, 96, 100, 105, 99, 116, 96, 32, 45, 32, 86, 101, 114, 105, 102, 105, 99, 97, 116, 105, 111, 110, 32, 114, 101, 115, 117, 108, 116, 115, 32, 119, 105, 116, 104, 32, 99, 104, 101, 99, 107, 115, 117, 109, 115, 32, 97, 110, 100, 32, 118, 97, 108, 105, 100, 97, 116, 105, 111, 110, 32, 115, 116, 97, 116, 117], original_size: 200, algorithm: None })",False,,,,skipped,,,,,,,Requires parameters: ['bundle_path'],,,,,,true,True,,,,,,,discovery,,,true,4,,,(bundle_path),,,(bundle_path: str),GraphTable,verify_bundle,,,"""{""""bundle_path"""": """"str""""}""",,108,unknown
,,1,,,,True,['start'],,,,,BFS traversal - returns subgraph result,False,,,,skipped,,,,,,,Requires parameters: ['start'],,,,,,false,True,,,,,,,discovery,,,true,10,,,"""(start, max_depth=None)""",,,"""(start, max_depth=None)""",Subgraph,bfs,,,,,194,unknown
,,1,,,,False,[],,,,,"CompressedText(CompressedData { data: [68, 46, 112, 111, 112, 40, 107, 91, 44, 100, 93, 41, 32, 45, 62, 32, 118, 44, 32, 114, 101, 109, 111, 118, 101, 32, 115, 112, 101, 99, 105, 102, 105, 101, 100, 32, 107, 101, 121, 32, 97, 110, 100, 32, 114, 101, 116, 117, 114, 110, 32, 116, 104, 101, 32, 99, 111, 114, 114, 101, 115, 112, 111, 110, 100, 105, 110, 103, 32, 118, 97, 108, 117, 101, 46, 10, 10, 73, 102, 32, 107, 101, 121, 32, 105, 115, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 44, 32, 100, 101, 102, 97, 117, 108, 116, 32, 105, 115, 32, 114, 101, 116, 117, 114, 110, 101, 100, 32, 105, 102, 32, 103, 105, 118, 101, 110, 44, 32, 111, 116, 104, 101, 114, 119, 105, 115, 101, 32, 75, 101, 121, 69, 114, 114, 111, 114, 32, 105, 115, 32, 114, 97, 105, 115, 101, 100], original_size: 156, algorithm: None })",False,,,,error,,,,,,,"""pop expected at least 1 argument, got 0""",,,,,,false,True,,,,,,,discovery,,,true,12,,,signature_unavailable,,,signature_unavailable,Matrix,pop,,,,,277,unknown
,,1,,,,True,['columns'],,,,,"CompressedText(CompressedData { data: [83, 101, 108, 101, 99, 116, 32, 115, 112, 101, 99, 105, 102, 105, 99, 32, 99, 111, 108, 117, 109, 110, 115, 32, 116, 111, 32, 99, 114, 101, 97, 116, 101, 32, 97, 32, 110, 101, 119, 32, 116, 97, 98, 108, 101, 10, 10, 65, 114, 103, 115, 58, 10, 32, 32, 32, 32, 99, 111, 108, 117, 109, 110, 115, 58, 32, 76, 105, 115, 116, 32, 111, 102, 32, 99, 111, 108, 117, 109, 110, 32, 110, 97, 109, 101, 115, 32, 116, 111, 32, 115, 101, 108, 101, 99, 116, 10, 10, 82, 101, 116, 117, 114, 110, 115, 58, 10, 32, 32, 32, 32, 80, 121, 69, 100, 103, 101, 115, 84, 97, 98, 108, 101, 58, 32, 65, 32, 110, 101, 119, 32, 116, 97, 98, 108, 101, 32, 119, 105, 116, 104, 32, 111, 110, 108, 121, 32, 116, 104, 101, 32, 115, 101, 108, 101, 99, 116, 101, 100, 32, 99, 111, 108, 117, 109, 110, 115], original_size: 167, algorithm: None })",False,,,,skipped,,,list,,,,Requires parameters: ['columns'],,,,,,true,True,,,,,,,discovery,,,true,3,,,(columns),,,(columns: list),EdgesTable,select,,,"""{""""columns"""": """"list""""}""",,77,unknown
,,1,,,,True,['source_nodes'],,,,,Filter edges by source nodes,False,,,,skipped,,,,,,,Requires parameters: ['source_nodes'],,int,,,,true,True,,,,,,,discovery,,,true,3,,,(source_nodes),,,(source_nodes: int),EdgesTable,filter_by_sources,,,"""{""""source_nodes"""": """"int""""}""",,64,unknown
,,1,,,str,True,['bundle_path'],,,,,"CompressedText(CompressedData { data: [71, 101, 116, 32, 98, 117, 110, 100, 108, 101, 32, 109, 101, 116, 97, 100, 97, 116, 97, 32, 105, 110, 102, 111, 114, 109, 97, 116, 105, 111, 110, 32, 119, 105, 116, 104, 111, 117, 116, 32, 108, 111, 97, 100, 105, 110, 103, 32, 116, 104, 101, 32, 102, 117, 108, 108, 32, 98, 117, 110, 100, 108, 101, 10, 10, 35, 32, 65, 114, 103, 117, 109, 101, 110, 116, 115, 10, 42, 32, 96, 98, 117, 110, 100, 108, 101, 95, 112, 97, 116, 104, 96, 32, 45, 32, 68, 105, 114, 101, 99, 116, 111, 114, 121, 32, 112, 97, 116, 104, 32, 99, 111, 110, 116, 97, 105, 110, 105, 110, 103, 32, 116, 104, 101, 32, 98, 117, 110, 100, 108, 101, 10, 10, 35, 32, 82, 101, 116, 117, 114, 110, 115, 10, 42, 32, 96, 100, 105, 99, 116, 96, 32, 45, 32, 66, 117, 110, 100, 108, 101, 32, 109, 101, 116, 97, 100, 97, 116, 97, 32, 105, 110, 102, 111, 114, 109, 97, 116, 105, 111, 110, 10, 10, 35, 32, 69, 120, 97, 109, 112, 108, 101, 115, 10, 96, 96, 96, 112, 121, 116], original_size: 200, algorithm: None })",False,,,,skipped,,,,,,,Requires parameters: ['bundle_path'],,,,,,true,True,,,,,,,discovery,,,true,4,,,(bundle_path),,,(bundle_path: str),GraphTable,get_bundle_info,,,"""{""""bundle_path"""": """"str""""}""",,91,unknown
dict,,1,,,,True,['data'],,,,,"""Create EdgesTable from a Python dictionary (must contain 'edge_id', 'source', 'target' columns)""",False,,,,skipped,,,,,,,Requires parameters: ['data'],,,,,,true,True,,,,,,,discovery,,,true,3,,,(data),,,(data: dict),EdgesTable,from_dict,,,"""{""""data"""": """"dict""""}""",,67,unknown
,,1,,,,False,[],,,,,"CompressedText(CompressedData { data: [67, 111, 110, 118, 101, 114, 116, 32, 116, 104, 105, 115, 32, 115, 117, 98, 103, 114, 97, 112, 104, 32, 116, 111, 32, 105, 116, 115, 32, 97, 100, 106, 97, 99, 101, 110, 99, 121, 32, 109, 97, 116, 114, 105, 120, 32, 114, 101, 112, 114, 101, 115, 101, 110, 116, 97, 116, 105, 111, 110, 10, 69, 110, 97, 98, 108, 101, 115, 32, 99, 104, 97, 105, 110, 105, 110, 103, 32, 108, 105, 107, 101, 58, 32, 115, 117, 98, 103, 114, 97, 112, 104, 46, 116, 111, 95, 109, 97, 116, 114, 105, 120, 40, 41, 46, 101, 105, 103, 101, 110, 40, 41, 46, 115, 116, 97, 116, 115, 40, 41], original_size: 120, algorithm: None })",False,,,,error,,,,,,,Subgraph to matrix conversion not yet implemented,,,,,,false,True,,,,,,,discovery,,,true,10,,,(),,,(),Subgraph,to_matrix,,,,,242,unknown
,,1,list,,,True,"""['source', 'target']""",,,,,Get shortest path - delegates to PyGraphAnalysis helper,False,,,,skipped,,,,,list,,"""Requires parameters: ['source', 'target']""",,,,,,true,True,,,,,,,discovery,,,true,6,,,"""(source, target, weight_attribute=None, inplace=None, attr_name=None)""",,,"""(source: list, target: list, weight_attribute=None, inplace=None, attr_name=None)""",Graph,shortest_path,,,"""{""""source"""": """"list"""", """"target"""": """"list""""}""",,171,unknown
,,1,,,,True,['q'],,,,,Calculate quantile (percentile),False,,,,skipped,,,,,,,Requires parameters: ['q'],,,,,,false,True,,,,,,,discovery,,,true,11,,,(q),,,(q),GraphArray,quantile,,,,,260,unknown
,,1,,,,True,['predicate'],,,,,"CompressedText(CompressedData { data: [70, 105, 108, 116, 101, 114, 32, 114, 111, 119, 115, 32, 117, 115, 105, 110, 103, 32, 97, 32, 113, 117, 101, 114, 121, 32, 101, 120, 112, 114, 101, 115, 115, 105, 111, 110, 32, 111, 114, 32, 80, 121, 116, 104, 111, 110, 32, 102, 117, 110, 99, 116, 105, 111, 110, 10, 10, 65, 114, 103, 115, 58, 10, 32, 32, 32, 32, 112, 114, 101, 100, 105, 99, 97, 116, 101, 58, 32, 69, 105, 116, 104, 101, 114, 32, 97, 32, 115, 116, 114, 105, 110, 103, 32, 113, 117, 101, 114, 121, 32, 101, 120, 112, 114, 101, 115, 115, 105, 111, 110, 32, 40, 101, 46, 103, 46, 32, 34, 97, 103, 101, 32, 62, 32, 50, 53, 34, 41, 32, 111, 114, 32, 97, 32, 80, 121, 116, 104, 111, 110, 32, 102, 117, 110, 99, 116, 105, 111, 110, 10, 10, 82, 101, 116, 117, 114, 110, 115, 58, 10, 32, 32, 32, 32, 80, 121, 78, 111, 100, 101, 115, 84, 97, 98, 108, 101, 58, 32, 65, 32, 110, 101, 119, 32, 116, 97, 98, 108, 101, 32, 119, 105, 116, 104, 32, 102, 105, 108, 116, 101], original_size: 200, algorithm: None })",False,"CompressedText(CompressedData { data: [78, 111, 100, 101, 115, 84, 97, 98, 108, 101, 91, 51, 32, 120, 32, 51, 93, 10, 66, 97, 115, 101, 84, 97, 98, 108, 101, 91, 51, 32, 120, 32, 51, 93, 10, 124, 32, 32, 32, 32, 32, 32, 32, 110, 97, 109, 101, 32, 124, 32, 32, 32, 32, 32, 32, 32, 116, 121, 112, 101, 32, 124, 32, 32, 32, 32, 110, 111, 100, 101, 95, 105, 100, 32, 124, 32, 10, 124, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 124, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 124, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 124, 10, 124, 32, 32, 32, 32, 32, 32, 71, 114, 97, 112, 104, 32, 124, 32, 32, 32, 32, 32, 32, 32, 99, 111, 114, 101, 32, 124, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 49, 32, 124, 32, 10, 124, 32, 32, 66, 97, 115, 101, 84, 97, 98, 108, 101, 32, 124, 32, 32, 32, 32, 32, 32, 116, 97, 98, 108, 101, 32, 124, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 50, 32, 124], original_size: 200, algorithm: None })",,,success_with_params,,,,,,2,,,,,,,true,True,test_execution,,,str,,,discovery,,,true,2,,,(predicate),,,(predicate: str),NodesTable,filter,,,"""{""""predicate"""": """"str""""}""",,32,NodesTable
,,1,,,,True,['path'],,,,,Export EdgesTable to Parquet file ,False,,,,skipped,,,,,,,Requires parameters: ['path'],,,,,,true,True,,,str,,,,discovery,,,true,3,,,(path),,,(path: str),EdgesTable,to_parquet,,,"""{""""path"""": """"str""""}""",,87,unknown
,,1,,,,True,['agg_functions'],,,,,Collapse subgraph to a single node with aggregated attributes,False,,,,skipped,,,,,,,Requires parameters: ['agg_functions'],,,,,,false,True,,,,,,,discovery,,,true,10,,,(agg_functions),,,(agg_functions),Subgraph,collapse_to_node,,,,,199,unknown
,,1,,,,True,['columns'],,,,,"CompressedText(CompressedData { data: [71, 114, 111, 117, 112, 32, 98, 121, 32, 99, 111, 108, 117, 109, 110, 115, 32, 97, 110, 100, 32, 114, 101, 116, 117, 114, 110, 32, 103, 114, 111, 117, 112, 101, 100, 32, 116, 97, 98, 108, 101, 115, 10, 10, 65, 114, 103, 115, 58, 10, 32, 32, 32, 32, 99, 111, 108, 117, 109, 110, 115, 58, 32, 76, 105, 115, 116, 32, 111, 102, 32, 99, 111, 108, 117, 109, 110, 32, 110, 97, 109, 101, 115, 32, 116, 111, 32, 103, 114, 111, 117, 112, 32, 98, 121, 10, 10, 82, 101, 116, 117, 114, 110, 115, 58, 10, 32, 32, 32, 32, 80, 121, 78, 111, 100, 101, 115, 84, 97, 98, 108, 101, 65, 114, 114, 97, 121, 58, 32, 65, 114, 114, 97, 121, 45, 108, 105, 107, 101, 32, 99, 111, 110, 116, 97, 105, 110, 101, 114, 32, 104, 111, 108, 100, 105, 110, 103, 32, 116, 104, 101, 32, 103, 114, 111, 117, 112, 101, 100, 32, 110, 111, 100, 101, 32, 116, 97, 98, 108, 101, 115], original_size: 181, algorithm: None })",False,,,,skipped,,,list,,,,Requires parameters: ['columns'],,,,,,true,True,,,,,,,discovery,,,true,2,,,(columns),,,(columns: list),NodesTable,group_by,,,"""{""""columns"""": """"list""""}""",,38,unknown
,,1,,,,True,"""['nodes', 'attrs']""",,int,,,Get bulk node attributes - delegates to PyGraphAttr,False,,,,skipped,,,,,,,"""Requires parameters: ['nodes', 'attrs']""",,,,,,true,True,,,,,,,discovery,,,true,6,,,"""(nodes, attrs)""",,,"""(nodes: int, attrs)""",Graph,get_node_attrs,,,"""{""""nodes"""": """"int""""}""",,145,unknown
,,1,,,,False,[],,,,,List all branches (FFI wrapper around core history system),False,"""[BranchInfo(name='main', head=0, current=true)]""",,,success,,,,,,21,,,,,,,false,True,test_execution,,,,,,discovery,,,true,6,,,(),,,(),Graph,branches,,,,,127,list
,,1,,,,True,['node_id'],,,,,Check if a node exists in the graph - DELEGATED,False,,,,skipped,,,,,,,Requires parameters: ['node_id'],,,,,,true,True,,,,,int,,discovery,,,true,6,,,(node_id),,,(node_id: int),Graph,has_node,,,"""{""""node_id"""": """"int""""}""",,151,unknown
,,1,,,,False,[],,,,,Get commit history (FFI wrapper around core history system),False,[],,,success,,,,,,21,,,,,,,false,True,test_execution,,,,,,discovery,,,true,6,,,(),,,(),Graph,commit_history,,,,,130,list
,,1,,,,True,['attr_name'],,,,,Get unique values for an attribute,False,,,,skipped,,,,,,,Requires parameters: ['attr_name'],,,,,,true,True,,,,,,,discovery,,,true,3,,,(attr_name),,,(attr_name: str),EdgesTable,unique_attr_values,,,"""{""""attr_name"""": """"str""""}""",str,88,unknown
,,1,,,,True,['node_id'],,,,,Check if a node exists in this subgraph,False,,,,skipped,,,,,,,Requires parameters: ['node_id'],,,,,,true,True,,,,,int,,discovery,,,true,10,,,(node_id),,,(node_id: int),Subgraph,has_node,,,"""{""""node_id"""": """"int""""}""",,218,unknown
,,1,,,,False,[],,,,,Node count property,False,3,,,success,,,,,,19,,,,,,,false,True,test_execution,,,,,,discovery,,,true,10,,,(),,,(),Subgraph,node_count,,,,,229,int
,,1,,,,True,['path'],,,,,Import BaseTable from Parquet file,False,,,,skipped,,,,,,,Requires parameters: ['path'],,,,,,true,True,,,str,,,,discovery,,,true,0,,,(path),,,(path: str),BaseTable,from_parquet,,,"""{""""path"""": """"str""""}""",,9,unknown
,,1,,,,True,['k'],,,,,Sample k nodes from this subgraph randomly,False,"CompressedText(CompressedData { data: [83, 117, 98, 103, 114, 97, 112, 104, 32, 119, 105, 116, 104, 32, 51, 32, 110, 111, 100, 101, 115, 32, 97, 110, 100, 32, 50, 32, 101, 100, 103, 101, 115, 10, 10, 69, 100, 103, 101, 115, 58, 10, 32, 32, 73, 68, 32, 32, 32, 32, 83, 111, 117, 114, 99, 101, 32, 226, 134, 146, 32, 84, 97, 114, 103, 101, 116, 10, 32, 32, 45, 45, 45, 45, 32, 32, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 10, 32, 32, 32, 32, 32, 49, 32, 32, 32, 32, 32, 32, 32, 49, 32, 226, 134, 146, 32, 50, 10, 32, 32, 32, 32, 32, 48, 32, 32, 32, 32, 32, 32, 32, 48, 32, 226, 134, 146, 32, 49], original_size: 133, algorithm: None })",,,success_with_params,,,,,,10,,,,,,,false,True,test_execution,,,,,,discovery,,,true,10,,,(k),,,(k),Subgraph,sample,,,,,232,Subgraph
,,1,,,,False,[],,,,,"CompressedText(CompressedData { data: [69, 110, 104, 97, 110, 99, 101, 100, 32, 99, 111, 108, 108, 97, 112, 115, 101, 32, 115, 117, 112, 112, 111, 114, 116, 105, 110, 103, 32, 116, 104, 114, 101, 101, 32, 115, 121, 110, 116, 97, 120, 32, 102, 111, 114, 109, 115, 32, 102, 111, 114, 32, 102, 108, 101, 120, 105, 98, 108, 101, 32, 97, 103, 103, 114, 101, 103, 97, 116, 105, 111, 110, 10, 10, 35, 32, 83, 117, 112, 112, 111, 114, 116, 101, 100, 32, 83, 121, 110, 116, 97, 120, 32, 70, 111, 114, 109, 115, 58, 10, 10, 35, 35, 32, 70, 111, 114, 109, 32, 49, 58, 32, 83, 105, 109, 112, 108, 101, 32, 40, 98, 97, 99, 107, 119, 97, 114, 100, 32, 99, 111, 109, 112, 97, 116, 105, 98, 108, 101, 41, 10, 96, 96, 96, 112, 121, 116, 104, 111, 110, 10, 115, 117, 98, 103, 114, 97, 112, 104, 46, 97, 100, 100, 95, 116, 111, 95, 103, 114, 97, 112, 104, 40, 123, 34, 97, 103, 101, 34, 58, 32, 34, 109, 101, 97, 110, 34, 44, 32, 34, 115, 97, 108, 97, 114, 121, 34, 58, 32, 34], original_size: 200, algorithm: None })",False,None,,,success,,,,,,16,,,,,,,false,True,test_execution,,,,,,discovery,,,true,10,,,(),,,(),Subgraph,parent_meta_node,,,,,231,NoneType
,,1,,,,False,[],,,,,Get number of columns,False,3,,,success,,,,,,19,,,,,,,false,True,test_execution,,,,,,discovery,,,true,2,,,(),,,(),NodesTable,ncols,,,,,42,int
,,1,,,,False,[],,,,,"""Get shape as (rows, cols)""",False,"""(2, 4)""",,,success,,,,,,20,,,,,,,false,True,test_execution,,,,,,discovery,,,true,3,,,(),,,(),EdgesTable,shape,,,,,78,tuple
,,1,,,,False,[],,,,,Get first n rows (default 5),False,"CompressedText(CompressedData { data: [78, 111, 100, 101, 115, 84, 97, 98, 108, 101, 91, 51, 32, 120, 32, 51, 93, 10, 66, 97, 115, 101, 84, 97, 98, 108, 101, 91, 51, 32, 120, 32, 51, 93, 10, 124, 32, 32, 32, 32, 32, 32, 32, 110, 97, 109, 101, 32, 124, 32, 32, 32, 32, 32, 32, 32, 116, 121, 112, 101, 32, 124, 32, 32, 32, 32, 110, 111, 100, 101, 95, 105, 100, 32, 124, 32, 10, 124, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 124, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 124, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 124, 10, 124, 32, 32, 32, 32, 32, 32, 71, 114, 97, 112, 104, 32, 124, 32, 32, 32, 32, 32, 32, 32, 99, 111, 114, 101, 32, 124, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 49, 32, 124, 32, 10, 124, 32, 32, 66, 97, 115, 101, 84, 97, 98, 108, 101, 32, 124, 32, 32, 32, 32, 32, 32, 116, 97, 98, 108, 101, 32, 124, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 50, 32, 124], original_size: 200, algorithm: None })",,,success,,,,,,2,,,,,,,false,True,test_execution,,,,,,discovery,,,true,2,,,(n=5),,,(n=5),NodesTable,head,,,,,39,NodesTable
,,1,,,,True,['column'],,,,,"CompressedText(CompressedData { data: [83, 111, 114, 116, 32, 116, 97, 98, 108, 101, 32, 98, 121, 32, 99, 111, 108, 117, 109, 110, 10, 10, 65, 114, 103, 115, 58, 10, 32, 32, 32, 32, 99, 111, 108, 117, 109, 110, 58, 32, 78, 97, 109, 101, 32, 111, 102, 32, 116, 104, 101, 32, 99, 111, 108, 117, 109, 110, 32, 116, 111, 32, 115, 111, 114, 116, 32, 98, 121, 10, 32, 32, 32, 32, 97, 115, 99, 101, 110, 100, 105, 110, 103, 58, 32, 73, 102, 32, 84, 114, 117, 101, 44, 32, 115, 111, 114, 116, 32, 105, 110, 32, 97, 115, 99, 101, 110, 100, 105, 110, 103, 32, 111, 114, 100, 101, 114, 59, 32, 105, 102, 32, 70, 97, 108, 115, 101, 44, 32, 100, 101, 115, 99, 101, 110, 100, 105, 110, 103, 10, 10, 82, 101, 116, 117, 114, 110, 115, 58, 10, 32, 32, 32, 32, 80, 121, 78, 111, 100, 101, 115, 84, 97, 98, 108, 101, 58, 32, 65, 32, 110, 101, 119, 32, 115, 111, 114, 116, 101, 100, 32, 116, 97, 98, 108, 101], original_size: 186, algorithm: None })",False,,,,skipped,,,,,,,Requires parameters: ['column'],,,,,,true,True,,,,,,,discovery,,,true,2,,list,"""(column, ascending=True)""",,,"""(column: list, ascending=True)""",NodesTable,sort_by,,,"""{""""column"""": """"list""""}""",,49,unknown
,,1,,,,True,['path'],,,,,Import NodesTable from JSON file (must contain node_id column),False,,,,skipped,,,,,,,Requires parameters: ['path'],,,,,,true,True,,,str,,,,discovery,,,true,2,,,(path),,,(path: str),NodesTable,from_json,,,"""{""""path"""": """"str""""}""",,36,unknown
,,1,,,,False,[],,,,,Get number of columns,False,4,,,success,,,,,,19,,,,,,,false,True,test_execution,,,,,,discovery,,,true,3,,,(),,,(),EdgesTable,ncols,,,,,74,int
,,1,,,,False,[],,,,,Calculate clustering coefficient for a node or entire subgraph,False,,,,error,,,,,,,Clustering coefficient not yet implemented in core - coming in future version,,,,,,false,True,,,,,,,discovery,,,true,10,,,(_node_id=None),,,(_node_id=None),Subgraph,clustering_coefficient,,,,,197,unknown
,,1,,,,True,['path'],,,,,Export EdgesTable to JSON file,False,None,,,success_with_params,,,,,,16,,,,,,,true,True,test_execution,,str,,,,discovery,,,true,3,,,(path),,,(path: str),EdgesTable,to_json,,,"""{""""path"""": """"str""""}""",,85,NoneType
,,1,,,,True,['attr_name'],,,,,Get unique values for an attribute,False,,,,skipped,,,,,,,Requires parameters: ['attr_name'],,,,,,true,True,,,,,,,discovery,,,true,2,,,(attr_name),,,(attr_name: str),NodesTable,unique_attr_values,,,"""{""""attr_name"""": """"str""""}""",str,55,unknown
,,1,,,,True,['path'],,,,,"""Import EdgesTable from JSON file (must contain edge_id, source, target columns)""",False,,,,skipped,,,,,,,Requires parameters: ['path'],,,,,,true,True,,,str,,,,discovery,,,true,3,,,(path),,,(path: str),EdgesTable,from_json,,,"""{""""path"""": """"str""""}""",,68,unknown
,,1,,,,True,['node_id'],,,,,Get neighbors of a node within the subgraph,False,,,,skipped,,,,,,,Requires parameters: ['node_id'],,,,,,true,True,,,,,int,,discovery,,,true,10,,,(node_id),,,(node_id: int),Subgraph,neighbors,,,"""{""""node_id"""": """"int""""}""",,228,unknown
,,1,,,,False,[],,,,,NEW: Enable fluent chaining with .iter() method,False,<builtins.BaseArrayIterator object at 0x10967d730>,,,success,,,,,,24,,,,,,,false,True,test_execution,,,,,,discovery,,,true,5,,,(),,,(),BaseArray,iter,,,,,113,BaseArrayIterator
,,1,,,,False,[],,,,,Check if the graph is connected (delegates to subgraph implementation),False,True,,,success,,,,,,13,,,,,,,false,True,test_execution,,,,,,discovery,,,true,6,,,(),,,(),Graph,is_connected,,,,,155,bool
,,1,,,,False,[],,,,,Get value counts (frequency of each unique value) as Python dict,False,"""{2: 1, 1: 1, 0: 1}""",,,success,,,,,,23,,,,,,,false,True,test_execution,,,,,,discovery,,,true,11,,,(),,,(),GraphArray,value_counts,,,,,270,dict
,,1,,,,False,[],,,,,"CompressedText(CompressedData { data: [77, 111, 100, 101, 114, 110, 32, 77, 101, 116, 97, 71, 114, 97, 112, 104, 32, 67, 111, 109, 112, 111, 115, 101, 114, 32, 65, 80, 73, 32, 45, 32, 67, 108, 101, 97, 110, 32, 105, 110, 116, 101, 114, 102, 97, 99, 101, 32, 102, 111, 114, 32, 109, 101, 116, 97, 45, 110, 111, 100, 101, 32, 99, 114, 101, 97, 116, 105, 111, 110, 10, 10, 84, 104, 105, 115, 32, 105, 115, 32, 116, 104, 101, 32, 110, 101, 119, 44, 32, 105, 110, 116, 117, 105, 116, 105, 118, 101, 32, 119, 97, 121, 32, 116, 111, 32, 99, 114, 101, 97, 116, 101, 32, 109, 101, 116, 97, 45, 110, 111, 100, 101, 115, 32, 119, 105, 116, 104, 32, 102, 108, 101, 120, 105, 98, 108, 101, 32, 99, 111, 110, 102, 105, 103, 117, 114, 97, 116, 105, 111, 110, 46, 10, 82, 101, 116, 117, 114, 110, 115, 32, 97, 32, 77, 101, 116, 97, 78, 111, 100, 101, 80, 108, 97, 110, 32, 116, 104, 97, 116, 32, 99, 97, 110, 32, 98, 101, 32, 112, 114, 101, 118, 105, 101, 119, 101, 100, 44, 32, 109], original_size: 200, algorithm: None })",False,"""MetaNode(id=3, degree=0, subgraph_id=Some(7283313709374817673)) """,,,success,,,,,,31,,,,,,,false,True,test_execution,,,,,,discovery,,,true,10,,,"CompressedText(CompressedData { data: [40, 110, 111, 100, 101, 95, 97, 103, 103, 115, 61, 78, 111, 110, 101, 44, 32, 101, 100, 103, 101, 95, 97, 103, 103, 115, 61, 78, 111, 110, 101, 44, 32, 101, 100, 103, 101, 95, 115, 116, 114, 97, 116, 101, 103, 121, 61, 39, 97, 103, 103, 114, 101, 103, 97, 116, 101, 39, 44, 32, 110, 111, 100, 101, 95, 115, 116, 114, 97, 116, 101, 103, 121, 61, 39, 101, 120, 116, 114, 97, 99, 116, 39, 44, 32, 112, 114, 101, 115, 101, 116, 61, 78, 111, 110, 101, 44, 32, 105, 110, 99, 108, 117, 100, 101, 95, 101, 100, 103, 101, 95, 99, 111, 117, 110, 116, 61, 84, 114, 117, 101, 44, 32, 109, 97, 114, 107, 95, 101, 110, 116, 105, 116, 121, 95, 116, 121, 112, 101, 61, 84, 114, 117, 101, 44, 32, 101, 110, 116, 105, 116, 121, 95, 116, 121, 112, 101, 61, 39, 109, 101, 116, 97, 39, 44, 32, 97, 108, 108, 111, 119, 95, 109, 105, 115, 115, 105, 110, 103, 95, 97, 116, 116, 114, 105, 98, 117, 116, 101, 115, 61, 84, 114, 117, 101, 41], original_size: 196, algorithm: None })",,,"CompressedText(CompressedData { data: [40, 110, 111, 100, 101, 95, 97, 103, 103, 115, 61, 78, 111, 110, 101, 44, 32, 101, 100, 103, 101, 95, 97, 103, 103, 115, 61, 78, 111, 110, 101, 44, 32, 101, 100, 103, 101, 95, 115, 116, 114, 97, 116, 101, 103, 121, 61, 39, 97, 103, 103, 114, 101, 103, 97, 116, 101, 39, 44, 32, 110, 111, 100, 101, 95, 115, 116, 114, 97, 116, 101, 103, 121, 61, 39, 101, 120, 116, 114, 97, 99, 116, 39, 44, 32, 112, 114, 101, 115, 101, 116, 61, 78, 111, 110, 101, 44, 32, 105, 110, 99, 108, 117, 100, 101, 95, 101, 100, 103, 101, 95, 99, 111, 117, 110, 116, 61, 84, 114, 117, 101, 44, 32, 109, 97, 114, 107, 95, 101, 110, 116, 105, 116, 121, 95, 116, 121, 112, 101, 61, 84, 114, 117, 101, 44, 32, 101, 110, 116, 105, 116, 121, 95, 116, 121, 112, 101, 61, 39, 109, 101, 116, 97, 39, 44, 32, 97, 108, 108, 111, 119, 95, 109, 105, 115, 115, 105, 110, 103, 95, 97, 116, 116, 114, 105, 98, 117, 116, 101, 115, 61, 84, 114, 117, 101, 41], original_size: 196, algorithm: None })",Subgraph,collapse,,,,,198,MetaNode
,,1,,,,False,[],,,,,Get number of columns (max of nodes and edges),False,7,,,success,,,,,,19,,,,,,,false,True,test_execution,,,,,,discovery,,,true,4,,,(),,,(),GraphTable,ncols,,,,,97,int
,,1,,,,False,[],,,,,Get graph statistics  ,False,"CompressedText(CompressedData { data: [123, 39, 117, 110, 105, 113, 117, 101, 95, 116, 97, 114, 103, 101, 116, 115, 39, 58, 32, 50, 44, 32, 39, 101, 100, 103, 101, 95, 99, 111, 108, 117, 109, 110, 115, 39, 58, 32, 52, 44, 32, 39, 116, 111, 116, 97, 108, 95, 110, 111, 100, 101, 115, 39, 58, 32, 51, 44, 32, 39, 110, 111, 100, 101, 95, 99, 111, 108, 117, 109, 110, 115, 39, 58, 32, 51, 44, 32, 39, 116, 111, 116, 97, 108, 95, 99, 111, 108, 117, 109, 110, 115, 39, 58, 32, 52, 44, 32, 39, 116, 111, 116, 97, 108, 95, 101, 100, 103, 101, 115, 39, 58, 32, 50, 44, 32, 39, 117, 110, 105, 113, 117, 101, 95, 115, 111, 117, 114, 99, 101, 115, 39, 58, 32, 50, 44, 32, 39, 115, 101, 108, 102, 95, 108, 111, 111, 112, 115, 39, 58, 32, 48, 125], original_size: 153, algorithm: None })",,,success,,,,,,23,,,,,,,false,True,test_execution,,,,,,discovery,,,true,4,,,(),,,(),GraphTable,stats,,,,,101,dict
,,1,,,,False,[],,,,,D.values() -> an object providing a view on D's values,False,"""dict_values([3, True, 'adjacency_matrix'])""",,,success,,,,,,40,,,,,,,false,True,test_execution,,,,,,discovery,,,true,12,,,signature_unavailable,,,signature_unavailable,Matrix,values,,,,,281,dict_values
,,1,,,,False,[],,,,,Get component sizes without materializing subgraphs,False,"""[(3, 2)]""",,,success,,,,,,21,,,,,,,false,True,test_execution,,,,,,discovery,,,true,9,,,(),,,(),ComponentsArray,sizes,,,,,191,list
,,1,,,,True,"""['mask', 'column_name', 'value']""",,,,,"CompressedText(CompressedData { data: [83, 101, 116, 32, 118, 97, 108, 117, 101, 115, 32, 102, 111, 114, 32, 109, 117, 108, 116, 105, 112, 108, 101, 32, 114, 111, 119, 115, 32, 105, 110, 32, 97, 32, 99, 111, 108, 117, 109, 110, 32, 117, 115, 105, 110, 103, 32, 97, 32, 98, 111, 111, 108, 101, 97, 110, 32, 109, 97, 115, 107, 10, 10, 65, 114, 103, 115, 58, 10, 32, 32, 32, 32, 109, 97, 115, 107, 58, 32, 76, 105, 115, 116, 32, 111, 102, 32, 98, 111, 111, 108, 101, 97, 110, 115, 32, 105, 110, 100, 105, 99, 97, 116, 105, 110, 103, 32, 119, 104, 105, 99, 104, 32, 114, 111, 119, 115, 32, 116, 111, 32, 117, 112, 100, 97, 116, 101, 10, 32, 32, 32, 32, 99, 111, 108, 117, 109, 110, 95, 110, 97, 109, 101, 58, 32, 78, 97, 109, 101, 32, 111, 102, 32, 116, 104, 101, 32, 99, 111, 108, 117, 109, 110, 32, 116, 111, 32, 117, 112, 100, 97, 116, 101, 10, 32, 32, 32, 32, 118, 97, 108, 117, 101, 58, 32, 86, 97, 108, 117, 101, 32, 116, 111, 32, 115, 101, 116, 32, 102, 111], original_size: 200, algorithm: None })",False,,,list,skipped,,,,,,,"""Requires parameters: ['mask', 'column_name', 'value']""",list,,,,,true,True,,,,,,,discovery,,,true,0,,,"""(mask, column_name, value)""",Any,,"""(mask: list, column_name: list, value: Any)""",BaseTable,set_values_by_mask,,,"""{""""mask"""": """"list"""", """"column_name"""": """"list"""", """"value"""": """"Any""""}""",,20,unknown
,,1,,,,False,[],,,,,Generate transition matrix - delegates to PyGraphMatrixHelper,False,,,,error,,,,,,,transition_matrix needs to be implemented in core first,,,,,,false,True,,,,,,,discovery,,,true,6,,,(),,,(),Graph,transition_matrix,,,,,175,unknown
,,1,,,,True,"""['start', 'end', 'column_name', 'value']""",,,,,"CompressedText(CompressedData { data: [83, 101, 116, 32, 118, 97, 108, 117, 101, 115, 32, 102, 111, 114, 32, 97, 32, 114, 97, 110, 103, 101, 32, 111, 102, 32, 114, 111, 119, 115, 32, 105, 110, 32, 97, 32, 99, 111, 108, 117, 109, 110, 10, 10, 65, 114, 103, 115, 58, 10, 32, 32, 32, 32, 115, 116, 97, 114, 116, 58, 32, 83, 116, 97, 114, 116, 105, 110, 103, 32, 114, 111, 119, 32, 105, 110, 100, 101, 120, 32, 40, 105, 110, 99, 108, 117, 115, 105, 118, 101, 41, 10, 32, 32, 32, 32, 101, 110, 100, 58, 32, 69, 110, 100, 105, 110, 103, 32, 114, 111, 119, 32, 105, 110, 100, 101, 120, 32, 40, 101, 120, 99, 108, 117, 115, 105, 118, 101, 41, 10, 32, 32, 32, 32, 115, 116, 101, 112, 58, 32, 83, 116, 101, 112, 32, 115, 105, 122, 101, 32, 40, 100, 101, 102, 97, 117, 108, 116, 32, 49, 32, 102, 111, 114, 32, 99, 111, 110, 115, 101, 99, 117, 116, 105, 118, 101, 32, 114, 111, 119, 115, 41, 10, 32, 32, 32, 32, 99, 111, 108, 117, 109, 110, 95, 110, 97, 109, 101, 58, 32], original_size: 200, algorithm: None })",False,,,,skipped,,,,,,,"""Requires parameters: ['start', 'end', 'column_name', 'value']""",list,,,,,true,True,,,,,,,discovery,,,true,0,,,"""(start, end, column_name, value, step=1)""",Any,,"""(start, end, column_name: list, value: Any, step=1)""",BaseTable,set_values_by_range,,,"""{""""column_name"""": """"list"""", """"value"""": """"Any""""}""",,21,unknown
,,1,,,,True,"""['tables', 'strategy']""",,,,,Merge with conflict resolution strategy,False,,,,skipped,,,,,,,"""Requires parameters: ['tables', 'strategy']""",,,,,,false,True,,,,,,,discovery,,,true,4,,,"""(tables, strategy)""",,,"""(tables, strategy)""",GraphTable,merge_with_strategy,,,,,96,unknown
,,1,,,,False,[],,,,,Convert to a new independent graph,False,"""Graph(nodes=0, edges=0)""",,,success,,,,,,6,,,,,,,false,True,test_execution,,,,,,discovery,,,true,10,,,(),,,(),Subgraph,to_graph,,,,,241,Graph
dict,,1,,,,True,['data'],,,,,"CompressedText(CompressedData { data: [67, 114, 101, 97, 116, 101, 32, 66, 97, 115, 101, 84, 97, 98, 108, 101, 32, 102, 114, 111, 109, 32, 97, 32, 80, 121, 116, 104, 111, 110, 32, 100, 105, 99, 116, 105, 111, 110, 97, 114, 121, 10, 10, 35, 32, 65, 114, 103, 117, 109, 101, 110, 116, 115, 10, 42, 32, 96, 100, 97, 116, 97, 96, 32, 45, 32, 68, 105, 99, 116, 105, 111, 110, 97, 114, 121, 32, 109, 97, 112, 112, 105, 110, 103, 32, 99, 111, 108, 117, 109, 110, 32, 110, 97, 109, 101, 115, 32, 116, 111, 32, 108, 105, 115, 116, 115, 32, 111, 102, 32, 118, 97, 108, 117, 101, 115, 10, 10, 35, 32, 69, 120, 97, 109, 112, 108, 101, 115, 10, 96, 96, 96, 112, 121, 116, 104, 111, 110, 10, 100, 97, 116, 97, 32, 61, 32, 123, 10, 32, 32, 32, 32, 39, 105, 100, 39, 58, 32, 91, 49, 44, 32, 50, 44, 32, 51, 93, 44, 10, 32, 32, 32, 32, 39, 110, 97, 109, 101, 39, 58, 32, 91, 39, 65, 108, 105, 99, 101, 39, 44, 32, 39, 66, 111, 98, 39, 44, 32, 39, 67], original_size: 200, algorithm: None })",False,,,,skipped,,,,,,,Requires parameters: ['data'],,,,,,true,True,,,,,,,discovery,,,true,0,,,(data),,,(data: dict),BaseTable,from_dict,,,"""{""""data"""": """"dict""""}""",,7,unknown
,,1,,,,True,['edge'],,,int,,Remove a single edge from the graph,False,,,,skipped,,,,,,,Requires parameters: ['edge'],,,,,,true,True,,,,,,,discovery,,,true,6,,,(edge),,,(edge: int),Graph,remove_edge,,,"""{""""edge"""": """"int""""}""",,162,unknown
,,1,,,,True,"""['node_id', 'attr_name']""",,,,,Get a single node attribute value,False,,,,skipped,,,,,,,"""Requires parameters: ['node_id', 'attr_name']""",,,,,,true,True,,,,,int,,discovery,,,true,10,,,"""(node_id, attr_name)""",,,"""(node_id: int, attr_name: str)""",Subgraph,get_node_attribute,,,"""{""""node_id"""": """"int"""", """"attr_name"""": """"str""""}""",str,214,unknown
,,1,,,,True,['center_nodes'],int,,,,Get neighborhood sampling - delegates to PyGraphAnalysis helper,False,"""NeighborhoodResult(1 neighborhoods, largest_size=3, time=0.00ms)""",,,success_with_params,,,,,,27,,,,,,,true,True,test_execution,,,,,,discovery,,,true,6,,,"""(center_nodes, radius=None, max_nodes=None)""",,,"""(center_nodes: int, radius=None, max_nodes=None)""",Graph,neighborhood,,,"""{""""center_nodes"""": """"int""""}""",,157,NeighborhoodResult
,,1,,,,False,[],,,,,Convert to regular Python list (materializes all components),False,"""[Subgraph(nodes=3, edges=2)]""",,,success,,,,,,21,,,,,,,false,True,test_execution,,,,,,discovery,,,true,9,,,(),,,(),ComponentsArray,to_list,,,,,193,list
,,1,,,,True,['uid_key'],,,,,Get node mapping for a specific attribute (FFI wrapper around core operations),False,,,,skipped,,,,,,,Requires parameters: ['uid_key'],,,,,,false,True,,,,,,,discovery,,,true,6,,,"""(uid_key, return_inverse=False)""",,,"""(uid_key, return_inverse=False)""",Graph,get_node_mapping,,,,,146,unknown
,,1,,,,True,['start'],,,,,DFS traversal - returns subgraph result,False,,,,skipped,,,,,,,Requires parameters: ['start'],,,,,,false,True,,,,,,,discovery,,,true,10,,,"""(start, max_depth=None)""",,,"""(start, max_depth=None)""",Subgraph,dfs,,,,,206,unknown
,,1,,,,True,['path'],,,,,Import NodesTable from Parquet file (must contain node_id column),False,,,,skipped,,,,,,,Requires parameters: ['path'],,,,,,true,True,,,str,,,,discovery,,,true,2,,,(path),,,(path: str),NodesTable,from_parquet,,,"""{""""path"""": """"str""""}""",,37,unknown
,,1,,,,True,['start'],,,,,BFS traversal - delegates to PyGraphAnalysis helper,False,,,,skipped,,,,,,,Requires parameters: ['start'],,,,,,false,True,,,,,,,discovery,,,true,6,,,"""(start, max_depth=None, inplace=None, attr_name=None)""",,,"""(start, max_depth=None, inplace=None, attr_name=None)""",Graph,bfs,,,,,126,unknown
,,1,,,,True,['_other'],,,,,"""Set operations - merge, intersect, subtract (placeholders)""",False,,,,skipped,,,,,,,Requires parameters: ['_other'],,,,,,false,True,,,,,,,discovery,,,true,10,,,(_other),,,(_other),Subgraph,merge_with,,,,,225,unknown
,,1,,,,True,['path'],,,,,"""Import EdgesTable from Parquet file (must contain edge_id, source, target columns)""",False,,,,skipped,,,,,,,Requires parameters: ['path'],,,,,,true,True,,,str,,,,discovery,,,true,3,,,(path),,,(path: str),EdgesTable,from_parquet,,,"""{""""path"""": """"str""""}""",,69,unknown
,,1,,,,True,['key'],,,,,"""Return the value for key if key is in the dictionary, else default.""",False,,,,skipped,,,,,,,Requires parameters: ['key'],,,,,,false,True,,,,,,,discovery,,,true,12,,,"""(key, default=None, /)""",,,"""(key, default=None, /)""",Matrix,get,,,,,274,unknown
