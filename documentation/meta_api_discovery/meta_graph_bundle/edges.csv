doc,edge_id,enhanced_signature,is_property,method_full_name,name,object_type,parameter_types,parameters_count,relationship,requires_parameters,return_type,signature,source,source_object,source_type,target
"Convert table to NodesAccessor by extracting node IDs from the table",212,"()",false,"GraphTable.to_nodes","to_nodes","GraphTable","{}",0,"GraphTable -> NodesAccessor","[]","NodesAccessor","()",33,"GraphTable","GraphTable",20
"Find the minimum value",300,"()",false,"NumArray.min","min","NumArray","{}",0,"NumArray -> Unknown","[]","Unknown","()",26,"NumArray","NumArray",21
"Direct delegation: Apply table() to each component and return PyTableArray",467,"()",false,"ComponentsArray.table","table","ComponentsArray","{}",0,"ComponentsArray -> TableArray","[]","TableArray","()",14,"ComponentsArray","ComponentsArray",4
"Get last element  ",297,"()",false,"NumArray.last","last","NumArray","{}",0,"NumArray -> Unknown","[]","Unknown","()",26,"NumArray","NumArray",21
"Calculate standard deviation",303,"()",false,"NumArray.std","std","NumArray","{}",0,"NumArray -> Unknown","[]","Unknown","()",26,"NumArray","NumArray",21
"Get edge IDs as a NumArray for numerical operations
Implements: g.edges.ids()",191,"()",false,"EdgesAccessor.ids","ids","EdgesAccessor","{}",0,"EdgesAccessor -> NumArray","[]","NumArray","()",9,"EdgesAccessor","EdgesAccessor",26
"Placeholder for scalar operations",433,"(scalar)",false,"GraphMatrix.scalar_multiply","scalar_multiply","GraphMatrix","{}",1,"GraphMatrix -> Unknown","[""scalar""]","Unknown","(scalar)",15,"GraphMatrix","GraphMatrix",21
"Create a zero matrix with specified dimensions and type",461,"(rows, cols, dtype=None)",false,"GraphMatrix.zeros","zeros","GraphMatrix","{}",3,"GraphMatrix -> Matrix","[""rows"", ""cols""]","Matrix","(rows, cols, dtype=None)",15,"GraphMatrix","GraphMatrix",2
"Get a single node attribute value",344,"(node_id, attr_name)",false,"Subgraph.get_node_attribute","get_node_attribute","Subgraph","{}",2,"Subgraph -> Unknown","[""node_id"", ""attr_name""]","Unknown","(node_id, attr_name)",6,"Subgraph","Subgraph",21
"Convert to pandas DataFrame",242,"()",false,"NodesTable.to_pandas","to_pandas","NodesTable","{}",0,"NodesTable -> Unknown","[]","Unknown","()",11,"NodesTable","NodesTable",21
"Get degree matrix from adjacency matrix",449,"()",false,"GraphMatrix.to_degree_matrix","to_degree_matrix","GraphMatrix","{}",0,"GraphMatrix -> Matrix","[]","Matrix","()",15,"GraphMatrix","GraphMatrix",2
"Get bulk node attributes - delegates to PyGraphAttr",26,"(nodes, attrs)",false,"Graph.get_node_attrs","get_node_attrs","Graph","{}",2,"Graph -> GraphAttr","[""nodes"", ""attrs""]","GraphAttr","(nodes, attrs)",5,"Graph","Graph",17
compressed_text,143,"()",false,"BranchName.isspace","isspace","BranchName","{}",0,"BranchName -> str","[]","str","()",22,"BranchName","BranchName",7
compressed_text,195,"(attr_name=None)",false,"EdgesAccessor.weight_matrix","weight_matrix","EdgesAccessor","{}",1,"EdgesAccessor -> Matrix","[]","Matrix","(attr_name=None)",9,"EdgesAccessor","EdgesAccessor",2
"Convert to Python list",320,"()",false,"TableArray.to_list","to_list","TableArray","{}",0,"TableArray -> list","[]","list","()",4,"TableArray","TableArray",8
compressed_text,66,"()",false,"AttrName.isdecimal","isdecimal","AttrName","{}",0,"AttrName -> str","[]","str","()",10,"AttrName","AttrName",7
"Check if subgraph contains a specific node (alias for has_node)",333,"(node_id)",false,"Subgraph.contains_node","contains_node","Subgraph","{}",1,"Subgraph -> Subgraph","[""node_id""]","Subgraph","(node_id)",6,"Subgraph","Subgraph",6
compressed_text,372,"()",false,"Subgraph.to_edges","to_edges","Subgraph","{}",0,"Subgraph -> Subgraph","[]","Subgraph","()",6,"Subgraph","Subgraph",6
compressed_text,394,"(data)",false,"GraphMatrix.from_data","from_data","GraphMatrix","{}",1,"GraphMatrix -> Matrix","[""data""]","Matrix","(data)",15,"GraphMatrix","GraphMatrix",2
"Get all attribute keys for a node - delegates to PyGraphAttr",41,"(node_id)",false,"Graph.node_attribute_keys","node_attribute_keys","Graph","{}",1,"Graph -> GraphAttr","[""node_id""]","GraphAttr","(node_id)",5,"Graph","Graph",17
compressed_text,375,"()",false,"Subgraph.to_networkx","to_networkx","Subgraph","{}",0,"Subgraph -> Graph","[]","Graph","()",6,"Subgraph","Subgraph",5
"Calculate variance",307,"()",false,"NumArray.var","var","NumArray","{}",0,"NumArray -> Unknown","[]","Unknown","()",26,"NumArray","NumArray",21
compressed_text,172,"()",false,"NodeId.bit_length","bit_length","NodeId","{}",0,"NodeId -> float","[]","float","()",3,"NodeId","NodeId",1
compressed_text,175,"()",false,"StateId.as_integer_ratio","as_integer_ratio","StateId","{}",0,"StateId -> int","[]","int","()",19,"StateId","StateId",32
"Set multiple edge attributes (bulk operation) - delegates to accessor  ",365,"(attrs_dict)",false,"Subgraph.set_edge_attrs","set_edge_attrs","Subgraph","{}",1,"Subgraph -> Unknown","[""attrs_dict""]","Unknown","(attrs_dict)",6,"Subgraph","Subgraph",21
compressed_text,145,"()",false,"BranchName.isupper","isupper","BranchName","{}",0,"BranchName -> str","[]","str","()",22,"BranchName","BranchName",7
compressed_text,134,"()",false,"BranchName.isalnum","isalnum","BranchName","{}",0,"BranchName -> str","[]","str","()",22,"BranchName","BranchName",7
compressed_text,152,"(suffix)",false,"BranchName.removesuffix","removesuffix","BranchName","{}",1,"BranchName -> str","[""suffix""]","str","(suffix, /)",22,"BranchName","BranchName",7
"Check if the array is empty",310,"()",false,"SubgraphArray.is_empty","is_empty","SubgraphArray","{}",0,"SubgraphArray -> list","[]","list","()",30,"SubgraphArray","SubgraphArray",8
"Calculate density of this subgraph",335,"()",false,"Subgraph.density","density","Subgraph","{}",0,"Subgraph -> Subgraph","[]","Subgraph","()",6,"Subgraph","Subgraph",6
"Get table iterator for chaining",230,"()",false,"NodesTable.iter","iter","NodesTable","{}",0,"NodesTable -> Unknown","[]","Unknown","()",11,"NodesTable","NodesTable",21
"Add multiple edges at once",1,"(edges, node_mapping=None, uid_key=None, source=None, target=None, warm_cache=None)",false,"Graph.add_edges","add_edges","Graph","{}",6,"Graph -> Unknown","[""edges""]","Unknown","(edges, node_mapping=None, uid_key=None, source=None, target=None, warm_cache=None)",5,"Graph","Graph",21
"Merge with conflict resolution strategy",203,"(tables, strategy)",false,"GraphTable.merge_with_strategy","merge_with_strategy","GraphTable","{}",2,"GraphTable -> Unknown","[""tables"", ""strategy""]","Unknown","(tables, strategy)",33,"GraphTable","GraphTable",21
"Convert subgraph nodes to a table - pure delegation to core GraphTable",371,"()",false,"Subgraph.table","table","Subgraph","{}",0,"Subgraph -> Subgraph","[]","Subgraph","()",6,"Subgraph","Subgraph",6
"",20,"(edge)",false,"Graph.edge_endpoints","edge_endpoints","Graph","{}",1,"Graph -> Unknown","[""edge""]","Unknown","(edge)",5,"Graph","Graph",21
"Get first n rows (default 5)",260,"(n=5)",false,"EdgesTable.head","head","EdgesTable","{}",1,"EdgesTable -> Unknown","[]","Unknown","(n=5)",13,"EdgesTable","EdgesTable",21
compressed_text,69,"()",false,"AttrName.islower","islower","AttrName","{}",0,"AttrName -> str","[]","str","()",10,"AttrName","AttrName",7
compressed_text,61,"(encoding=utf-8, errors=strict)",false,"AttrName.encode","encode","AttrName","{}",2,"AttrName -> str","[]","str","(encoding='utf-8', errors='strict')",10,"AttrName","AttrName",7
"Create an identity matrix with specified size",403,"(size)",false,"GraphMatrix.identity","identity","GraphMatrix","{}",1,"GraphMatrix -> Matrix","[""size""]","Matrix","(size)",15,"GraphMatrix","GraphMatrix",2
compressed_text,450,"()",false,"GraphMatrix.to_dict","to_dict","GraphMatrix","{}",0,"GraphMatrix -> dict","[]","dict","()",15,"GraphMatrix","GraphMatrix",0
compressed_text,392,"()",false,"GraphMatrix.flatten","flatten","GraphMatrix","{}",0,"GraphMatrix -> NumArray","[]","NumArray","()",15,"GraphMatrix","GraphMatrix",26
"Apply table() to each NodesAccessor and return TableArray",290,"()",false,"NodesArray.table","table","NodesArray","{}",0,"NodesArray -> TableArray","[]","TableArray","()",28,"NodesArray","NodesArray",4
"ReLU activation applied to matrix
Implements: matrix.relu()",428,"()",false,"GraphMatrix.relu","relu","GraphMatrix","{}",0,"GraphMatrix -> Matrix","[]","Matrix","()",15,"GraphMatrix","GraphMatrix",2
compressed_text,73,"()",false,"AttrName.istitle","istitle","AttrName","{}",0,"AttrName -> str","[]","str","()",10,"AttrName","AttrName",7
compressed_text,120,"(start, end, column_name, value, step=1)",false,"BaseTable.set_values_by_range","set_values_by_range","BaseTable","{}",5,"BaseTable -> Unknown","[""start"", ""end"", ""column_name"", ""value""]","Unknown","(start, end, column_name, value, step=1)",23,"BaseTable","BaseTable",21
"Get connected components within this subgraph (lazy array)",331,"()",false,"Subgraph.connected_components","connected_components","Subgraph","{}",0,"Subgraph -> list","[]","list","()",6,"Subgraph","Subgraph",8
compressed_text,181,"()",false,"NodesAccessor.all","all","NodesAccessor","{}",0,"NodesAccessor -> Subgraph","[]","Subgraph","()",20,"NodesAccessor","NodesAccessor",6
"Get entire row as BaseArray (mixed types) or NumArray (if all numerical)",402,"(row)",false,"GraphMatrix.get_row","get_row","GraphMatrix","{}",1,"GraphMatrix -> BaseArray","[""row""]","BaseArray","(row)",15,"GraphMatrix","GraphMatrix",27
compressed_text,86,"(chars=None)",false,"AttrName.rstrip","rstrip","AttrName","{}",1,"AttrName -> str","[]","str","(chars=None, /)",10,"AttrName","AttrName",7
compressed_text,149,"(chars=None)",false,"BranchName.lstrip","lstrip","BranchName","{}",1,"BranchName -> str","[]","str","(chars=None, /)",22,"BranchName","BranchName",7
"Determinant calculation (for square matrices)",385,"()",false,"GraphMatrix.determinant","determinant","GraphMatrix","{}",0,"GraphMatrix -> Unknown","[]","Unknown","()",15,"GraphMatrix","GraphMatrix",21
"Get first n rows (primarily from nodes table, default 5)",199,"(n=5)",false,"GraphTable.head","head","GraphTable","{}",1,"GraphTable -> Unknown","[]","Unknown","(n=5)",33,"GraphTable","GraphTable",21
"Calculate the mean (average)",299,"()",false,"NumArray.mean","mean","NumArray","{}",0,"NumArray -> Unknown","[]","Unknown","()",26,"NumArray","NumArray",21
compressed_text,136,"()",false,"BranchName.isascii","isascii","BranchName","{}",0,"BranchName -> str","[]","str","()",22,"BranchName","BranchName",7
"Filter all tables using a query - placeholder method",317,"(query)",false,"TableArray.filter","filter","TableArray","{}",1,"TableArray -> Unknown","[""query""]","Unknown","(query)",4,"TableArray","TableArray",21
compressed_text,334,"(nodes=None, full_graph=False)",false,"Subgraph.degree","degree","Subgraph","{}",2,"Subgraph -> list","[]","list","(nodes=None, *, full_graph=False)",6,"Subgraph","Subgraph",8
compressed_text,453,"(eps=None, k=None)",false,"GraphMatrix.to_normalized_laplacian","to_normalized_laplacian","GraphMatrix","{}",2,"GraphMatrix -> Matrix","[]","Matrix","(eps=None, k=None)",15,"GraphMatrix","GraphMatrix",2
compressed_text,128,"(other)",false,"BaseTable.union","union","BaseTable","{}",1,"BaseTable -> Unknown","[""other""]","Unknown","(other)",23,"BaseTable","BaseTable",21
compressed_text,108,"(columns)",false,"BaseTable.group_by","group_by","BaseTable","{}",1,"BaseTable -> list","[""columns""]","list","(columns)",23,"BaseTable","BaseTable",8
"Export EdgesTable to CSV file",276,"(path)",false,"EdgesTable.to_csv","to_csv","EdgesTable","{}",1,"EdgesTable -> EdgesTable","[""path""]","EdgesTable","(path)",13,"EdgesTable","EdgesTable",13
"Apply table() to all subgraphs and return PyTableArray",313,"()",false,"SubgraphArray.table","table","SubgraphArray","{}",0,"SubgraphArray -> TableArray","[]","TableArray","()",30,"SubgraphArray","SubgraphArray",4
"Get column as numeric array if possible (returns NumArray/IntArray or error)",106,"(column_name)",false,"BaseTable.get_column_numeric","get_column_numeric","BaseTable","{}",1,"BaseTable -> list","[""column_name""]","list","(column_name)",23,"BaseTable","BaseTable",8
"Get rich display representation with EdgesTable type",268,"(config=None)",false,"EdgesTable.rich_display","rich_display","EdgesTable","{}",1,"EdgesTable -> EdgesTable","[]","EdgesTable","(config=None)",13,"EdgesTable","EdgesTable",13
"ELU (Exponential Linear Unit) activation function",389,"(alpha=None)",false,"GraphMatrix.elu","elu","GraphMatrix","{}",1,"GraphMatrix -> Unknown","[]","Unknown","(alpha=None)",15,"GraphMatrix","GraphMatrix",21
"Create a preset configuration for publication-ready outputs",180,"(width=None, height=None)",false,"VizConfig.publication","publication","VizConfig","{}",2,"VizConfig -> Unknown","[]","Unknown","(width=None, height=None)",25,"VizConfig","VizConfig",21
"Global minimum value in the matrix",417,"()",false,"GraphMatrix.min","min","GraphMatrix","{}",0,"GraphMatrix -> Matrix","[]","Matrix","()",15,"GraphMatrix","GraphMatrix",2
"Mean along specified axis (0=rows, 1=columns)",416,"(axis)",false,"GraphMatrix.mean_axis","mean_axis","GraphMatrix","{}",1,"GraphMatrix -> Unknown","[""axis""]","Unknown","(axis)",15,"GraphMatrix","GraphMatrix",21
"Filter NodesAccessor objects using a Python predicate function",282,"(predicate)",false,"NodesArray.filter","filter","NodesArray","{}",1,"NodesArray -> NodesAccessor","[""predicate""]","NodesAccessor","(predicate)",28,"NodesArray","NodesArray",20
"Convert to Python list",305,"()",false,"NumArray.to_list","to_list","NumArray","{}",0,"NumArray -> list","[]","list","()",26,"NumArray","NumArray",8
"Group nodes by attribute value and compute aggregates (public method for benchmarks)",28,"(attribute, aggregation_attr, operation)",false,"Graph.group_by","group_by","Graph","{}",3,"Graph -> Unknown","[""attribute"", ""aggregation_attr"", ""operation""]","Unknown","(attribute, aggregation_attr, operation)",5,"Graph","Graph",21
compressed_text,190,"(attr_name)",false,"EdgesAccessor.group_by","group_by","EdgesAccessor","{}",1,"EdgesAccessor -> list","[""attr_name""]","list","(attr_name)",9,"EdgesAccessor","EdgesAccessor",8
compressed_text,70,"()",false,"AttrName.isnumeric","isnumeric","AttrName","{}",0,"AttrName -> str","[]","str","()",10,"AttrName","AttrName",7
"Collect all tables into a Python list (for compatibility with iterator patterns)",316,"()",false,"TableArray.collect","collect","TableArray","{}",0,"TableArray -> list","[]","list","()",4,"TableArray","TableArray",8
"Iterate over rows - returns iterator of BaseArrays or NumArrays",408,"()",false,"GraphMatrix.iter_rows","iter_rows","GraphMatrix","{}",0,"GraphMatrix -> Unknown","[]","Unknown","()",15,"GraphMatrix","GraphMatrix",21
"SVD decomposition: A = U * Σ * V^T
Returns tuple of (U, singular_values, V_transpose)",445,"()",false,"GraphMatrix.svd","svd","GraphMatrix","{}",0,"GraphMatrix -> Unknown","[]","Unknown","()",15,"GraphMatrix","GraphMatrix",21
"Get node mapping for a specific attribute (FFI wrapper around core operations)",27,"(uid_key, return_inverse=False)",false,"Graph.get_node_mapping","get_node_mapping","Graph","{}",2,"Graph -> Unknown","[""uid_key""]","Unknown","(uid_key, return_inverse=False)",5,"Graph","Graph",21
compressed_text,133,"(tabsize=8)",false,"BranchName.expandtabs","expandtabs","BranchName","{}",1,"BranchName -> Unknown","[]","Unknown","(tabsize=8)",22,"BranchName","BranchName",21
"Convert to pandas DataFrame",278,"()",false,"EdgesTable.to_pandas","to_pandas","EdgesTable","{}",0,"EdgesTable -> Unknown","[]","Unknown","()",13,"EdgesTable","EdgesTable",21
"Filter NodesAccessor objects by node count threshold",283,"(min_size)",false,"NodesArray.filter_by_size","filter_by_size","NodesArray","{}",1,"NodesArray -> NodesAccessor","[""min_size""]","NodesAccessor","(min_size)",28,"NodesArray","NodesArray",20
"Get largest component without materializing others",463,"()",false,"ComponentsArray.largest_component","largest_component","ComponentsArray","{}",0,"ComponentsArray -> Unknown","[]","Unknown","()",14,"ComponentsArray","ComponentsArray",21
compressed_text,118,"(row, column_name, value)",false,"BaseTable.set_value","set_value","BaseTable","{}",3,"BaseTable -> Unknown","[""row"", ""column_name"", ""value""]","Unknown","(row, column_name, value)",23,"BaseTable","BaseTable",21
"Convert subgraph edges to a table - pure delegation to core GraphTable",339,"()",false,"Subgraph.edges_table","edges_table","Subgraph","{}",0,"Subgraph -> Subgraph","[]","Subgraph","()",6,"Subgraph","Subgraph",6
compressed_text,169,"(bytes, byteorder, signed=False)",false,"EdgeId.from_bytes","from_bytes","EdgeId","{}",3,"EdgeId -> list","[""bytes"", ""byteorder""]","list","(bytes, byteorder, *, signed=False)",12,"EdgeId","EdgeId",8
"Get the first NodesAccessor",284,"()",false,"NodesArray.first","first","NodesArray","{}",0,"NodesArray -> NodesAccessor","[]","NodesAccessor","()",28,"NodesArray","NodesArray",20
"Convert uppercase characters to lowercase and lowercase characters to uppercase.",90,"()",false,"AttrName.swapcase","swapcase","AttrName","{}",0,"AttrName -> Unknown","[]","Unknown","()",10,"AttrName","AttrName",21
"Create an iterator for method chaining",287,"()",false,"NodesArray.iter","iter","NodesArray","{}",0,"NodesArray -> Unknown","[]","Unknown","()",28,"NodesArray","NodesArray",21
"Get statistics about the NodesAccessor collection",289,"()",false,"NodesArray.stats","stats","NodesArray","{}",0,"NodesArray -> NodesAccessor","[]","NodesAccessor","()",28,"NodesArray","NodesArray",20
"Enable or disable gradient tracking for this matrix",430,"(requires_grad)",false,"GraphMatrix.requires_grad_","requires_grad_","GraphMatrix","{}",1,"GraphMatrix -> Matrix","[""requires_grad""]","Matrix","(requires_grad)",15,"GraphMatrix","GraphMatrix",2
"Get column as raw BaseArray (always returns BaseArray regardless of type)",107,"(column_name)",false,"BaseTable.get_column_raw","get_column_raw","BaseTable","{}",1,"BaseTable -> BaseArray","[""column_name""]","BaseArray","(column_name)",23,"BaseTable","BaseTable",27
"Get in-degree of nodes within subgraph",352,"(nodes=None, full_graph=False)",false,"Subgraph.in_degree","in_degree","Subgraph","{}",2,"Subgraph -> Subgraph","[]","Subgraph","(nodes=None, full_graph=False)",6,"Subgraph","Subgraph",6
"Get edges as tuples (edge_id, source, target)",246,"()",false,"EdgesTable.as_tuples","as_tuples","EdgesTable","{}",0,"EdgesTable -> Unknown","[]","Unknown","()",13,"EdgesTable","EdgesTable",21
compressed_text,72,"()",false,"AttrName.isspace","isspace","AttrName","{}",0,"AttrName -> str","[]","str","()",10,"AttrName","AttrName",7
"",369,"(_other)",false,"Subgraph.subtract_from","subtract_from","Subgraph","{}",1,"Subgraph -> Unknown","[""_other""]","Unknown","(_other)",6,"Subgraph","Subgraph",21
compressed_text,150,"(sep)",false,"BranchName.partition","partition","BranchName","{}",1,"BranchName -> str","[""sep""]","str","(sep, /)",22,"BranchName","BranchName",7
"Get text summary of subgraph",370,"()",false,"Subgraph.summary","summary","Subgraph","{}",0,"Subgraph -> Subgraph","[]","Subgraph","()",6,"Subgraph","Subgraph",6
"Concatenate matrices along specified axis",382,"(other, axis)",false,"GraphMatrix.concatenate","concatenate","GraphMatrix","{}",2,"GraphMatrix -> Unknown","[""other"", ""axis""]","Unknown","(other, axis)",15,"GraphMatrix","GraphMatrix",21
compressed_text,235,"(columns)",false,"NodesTable.select","select","NodesTable","{}",1,"NodesTable -> list","[""columns""]","list","(columns)",11,"NodesTable","NodesTable",8
"Element-wise natural logarithm",410,"()",false,"GraphMatrix.log","log","GraphMatrix","{}",0,"GraphMatrix -> Unknown","[]","Unknown","()",15,"GraphMatrix","GraphMatrix",21
"Element-wise exponential (e^x)",390,"()",false,"GraphMatrix.exp","exp","GraphMatrix","{}",0,"GraphMatrix -> Unknown","[]","Unknown","()",15,"GraphMatrix","GraphMatrix",21
"Export BaseTable to JSON file",125,"(path)",false,"BaseTable.to_json","to_json","BaseTable","{}",1,"BaseTable -> BaseTable","[""path""]","BaseTable","(path)",23,"BaseTable","BaseTable",23
"Convert graph to attribute matrix - delegates to PyGraphMatrixHelper",54,"()",false,"Graph.to_matrix","to_matrix","Graph","{}",0,"Graph -> Graph","[]","Graph","()",5,"Graph","Graph",5
compressed_text,121,"(start, end)",false,"BaseTable.slice","slice","BaseTable","{}",2,"BaseTable -> BaseTable","[""start"", ""end""]","BaseTable","(start, end)",23,"BaseTable","BaseTable",23
"Get first n rows (default 5)",225,"(n=5)",false,"NodesTable.head","head","NodesTable","{}",1,"NodesTable -> Unknown","[]","Unknown","(n=5)",11,"NodesTable","NodesTable",21
"Create NodesTable from a Python dictionary (must contain 'node_id' column)",221,"(data)",false,"NodesTable.from_dict","from_dict","NodesTable","{}",1,"NodesTable -> dict","[""data""]","dict","(data)",11,"NodesTable","NodesTable",0
"Get shape as (rows, cols)",270,"()",false,"EdgesTable.shape","shape","EdgesTable","{}",0,"EdgesTable -> Unknown","[]","Unknown","()",13,"EdgesTable","EdgesTable",21
"Apply aggregation to all tables - placeholder method",315,"(agg_spec)",false,"TableArray.agg","agg","TableArray","{}",1,"TableArray -> Unknown","[""agg_spec""]","Unknown","(agg_spec)",4,"TableArray","TableArray",21
compressed_text,158,"(sep=None, maxsplit=-1)",false,"BranchName.split","split","BranchName","{}",2,"BranchName -> list","[]","list","(sep=None, maxsplit=-1)",22,"BranchName","BranchName",8
compressed_text,226,"()",false,"NodesTable.interactive","interactive","NodesTable","{}",0,"NodesTable -> str","[]","str","()",11,"NodesTable","NodesTable",7
"Return a copy of the string converted to uppercase.",164,"()",false,"BranchName.upper","upper","BranchName","{}",0,"BranchName -> str","[]","str","()",22,"BranchName","BranchName",7
compressed_text,162,"()",false,"BranchName.title","title","BranchName","{}",0,"BranchName -> str","[]","str","()",22,"BranchName","BranchName",7
compressed_text,411,"()",false,"GraphMatrix.lu_decomposition","lu_decomposition","GraphMatrix","{}",0,"GraphMatrix -> Unknown","[]","Unknown","()",15,"GraphMatrix","GraphMatrix",21
compressed_text,57,"()",false,"Graph.view","view","Graph","{}",0,"Graph -> Graph","[]","Graph","()",5,"Graph","Graph",5
compressed_text,58,"()",false,"AttrName.capitalize","capitalize","AttrName","{}",0,"AttrName -> str","[]","str","()",10,"AttrName","AttrName",7
"Convert to Python list",291,"()",false,"NodesArray.to_list","to_list","NodesArray","{}",0,"NodesArray -> list","[]","list","()",28,"NodesArray","NodesArray",8
compressed_text,97,"(updates)",false,"BaseTable.assign","assign","BaseTable","{}",1,"BaseTable -> dict","[""updates""]","dict","(updates)",23,"BaseTable","BaseTable",0
"Commit current state of the graph (FFI wrapper around core history system)",11,"(message, author)",false,"Graph.commit","commit","Graph","{}",2,"Graph -> Graph","[""message"", ""author""]","Graph","(message, author)",5,"Graph","Graph",5
"Check if a node exists in this subgraph",350,"(node_id)",false,"Subgraph.has_node","has_node","Subgraph","{}",1,"Subgraph -> Subgraph","[""node_id""]","Subgraph","(node_id)",6,"Subgraph","Subgraph",6
"Checkout a branch (FFI wrapper around core history system)",10,"(branch_name)",false,"Graph.checkout_branch","checkout_branch","Graph","{}",1,"Graph -> Unknown","[""branch_name""]","Unknown","(branch_name)",5,"Graph","Graph",21
"Check if the array is empty",286,"()",false,"NodesArray.is_empty","is_empty","NodesArray","{}",0,"NodesArray -> list","[]","list","()",28,"NodesArray","NodesArray",8
compressed_text,122,"(column, ascending=True)",false,"BaseTable.sort_by","sort_by","BaseTable","{}",2,"BaseTable -> BaseTable","[""column""]","BaseTable","(column, ascending=True)",23,"BaseTable","BaseTable",23
"Direct delegation: Apply filter to components",462,"(predicate)",false,"ComponentsArray.filter","filter","ComponentsArray","{}",1,"ComponentsArray -> Unknown","[""predicate""]","Unknown","(predicate)",14,"ComponentsArray","ComponentsArray",21
"Check if node exists - DELEGATED (same as has_node)",14,"(node)",false,"Graph.contains_node","contains_node","Graph","{}",1,"Graph -> Unknown","[""node""]","Unknown","(node)",5,"Graph","Graph",21
compressed_text,173,"(bytes, byteorder, signed=False)",false,"NodeId.from_bytes","from_bytes","NodeId","{}",3,"NodeId -> list","[""bytes"", ""byteorder""]","list","(bytes, byteorder, *, signed=False)",3,"NodeId","NodeId",8
"Convert uppercase characters to lowercase and lowercase characters to uppercase.",161,"()",false,"BranchName.swapcase","swapcase","BranchName","{}",0,"BranchName -> Unknown","[]","Unknown","()",22,"BranchName","BranchName",21
"Check if an edge exists in the graph - DELEGATED  ",30,"(edge_id)",false,"Graph.has_edge","has_edge","Graph","{}",1,"Graph -> Graph","[""edge_id""]","Graph","(edge_id)",5,"Graph","Graph",5
"Import BaseTable from Parquet file",105,"(path)",false,"BaseTable.from_parquet","from_parquet","BaseTable","{}",1,"BaseTable -> BaseTable","[""path""]","BaseTable","(path)",23,"BaseTable","BaseTable",23
"Return a copy of the string converted to uppercase.",93,"()",false,"AttrName.upper","upper","AttrName","{}",0,"AttrName -> str","[]","str","()",10,"AttrName","AttrName",7
"Get reference to underlying BaseTable",216,"()",false,"NodesTable.base_table","base_table","NodesTable","{}",0,"NodesTable -> BaseTable","[]","BaseTable","()",11,"NodesTable","NodesTable",23
"Get neighborhood sampling performance statistics",39,"()",false,"Graph.neighborhood_statistics","neighborhood_statistics","Graph","{}",0,"Graph -> Unknown","[]","Unknown","()",5,"Graph","Graph",21
compressed_text,245,"(attr_name, attributes)",false,"NodesTable.with_attributes","with_attributes","NodesTable","{}",2,"NodesTable -> dict","[""attr_name"", ""attributes""]","dict","(attr_name, attributes)",11,"NodesTable","NodesTable",0
compressed_text,323,"()",false,"Subgraph.adjacency_matrix","adjacency_matrix","Subgraph","{}",0,"Subgraph -> Subgraph","[]","Subgraph","()",6,"Subgraph","Subgraph",6
"Get reference to underlying BaseTable",248,"()",false,"EdgesTable.base_table","base_table","EdgesTable","{}",0,"EdgesTable -> BaseTable","[]","BaseTable","()",13,"EdgesTable","EdgesTable",23
"Get column by name as BaseArray (mixed types) or NumArray (if all numerical)",401,"(name)",false,"GraphMatrix.get_column_by_name","get_column_by_name","GraphMatrix","{}",1,"GraphMatrix -> BaseArray","[""name""]","BaseArray","(name)",15,"GraphMatrix","GraphMatrix",27
"Convert to regular Python list (materializes all components)",468,"()",false,"ComponentsArray.to_list","to_list","ComponentsArray","{}",0,"ComponentsArray -> list","[]","list","()",14,"ComponentsArray","ComponentsArray",8
"Get first n rows (default 5)",110,"(n=5)",false,"BaseTable.head","head","BaseTable","{}",1,"BaseTable -> Unknown","[]","Unknown","(n=5)",23,"BaseTable","BaseTable",21
compressed_text,131,"(width, fillchar= )",false,"BranchName.center","center","BranchName","{}",2,"BranchName -> str","[""width""]","str","(width, fillchar=' ', /)",22,"BranchName","BranchName",7
compressed_text,167,"()",false,"EdgeId.as_integer_ratio","as_integer_ratio","EdgeId","{}",0,"EdgeId -> int","[]","int","()",12,"EdgeId","EdgeId",32
"Stack matrices along specified axis",440,"(other, axis)",false,"GraphMatrix.stack","stack","GraphMatrix","{}",2,"GraphMatrix -> Unknown","[""other"", ""axis""]","Unknown","(other, axis)",15,"GraphMatrix","GraphMatrix",21
compressed_text,412,"(func)",false,"GraphMatrix.map","map","GraphMatrix","{}",1,"GraphMatrix -> Matrix","[""func""]","Matrix","(func)",15,"GraphMatrix","GraphMatrix",2
compressed_text,285,"(port=None, layout=None, theme=None, width=None, height=None)",false,"NodesArray.interactive","interactive","NodesArray","{}",5,"NodesArray -> float","[]","float","(port=None, layout=None, theme=None, width=None, height=None)",28,"NodesArray","NodesArray",1
"Get node IDs as an IntArray for integer operations
Implements: g.nodes.ids()",185,"()",false,"NodesAccessor.ids","ids","NodesAccessor","{}",0,"NodesAccessor -> int","[]","int","()",20,"NodesAccessor","NodesAccessor",32
compressed_text,83,"(width, fillchar= )",false,"AttrName.rjust","rjust","AttrName","{}",2,"AttrName -> str","[""width""]","str","(width, fillchar=' ', /)",10,"AttrName","AttrName",7
compressed_text,176,"()",false,"StateId.bit_length","bit_length","StateId","{}",0,"StateId -> float","[]","float","()",19,"StateId","StateId",1
"Matrix inverse (Phase 5 - placeholder for now)",406,"()",false,"GraphMatrix.inverse","inverse","GraphMatrix","{}",0,"GraphMatrix -> Matrix","[]","Matrix","()",15,"GraphMatrix","GraphMatrix",2
"Transpose the matrix",458,"()",false,"GraphMatrix.transpose","transpose","GraphMatrix","{}",0,"GraphMatrix -> Matrix","[]","Matrix","()",15,"GraphMatrix","GraphMatrix",2
"Sigmoid activation applied to matrix
Implements: matrix.sigmoid()",435,"()",false,"GraphMatrix.sigmoid","sigmoid","GraphMatrix","{}",0,"GraphMatrix -> Matrix","[]","Matrix","()",15,"GraphMatrix","GraphMatrix",2
"Auto-assign edge IDs for null values (useful for meta nodes)",247,"()",false,"EdgesTable.auto_assign_edge_ids","auto_assign_edge_ids","EdgesTable","{}",0,"EdgesTable -> Unknown","[]","Unknown","()",13,"EdgesTable","EdgesTable",21
"Set bulk edge attributes - delegates to PyGraphAttrMut",49,"(attrs_dict)",false,"Graph.set_edge_attrs","set_edge_attrs","Graph","{}",1,"Graph -> GraphAttrMut","[""attrs_dict""]","GraphAttrMut","(attrs_dict)",5,"Graph","Graph",16
"Get number of columns",266,"()",false,"EdgesTable.ncols","ncols","EdgesTable","{}",0,"EdgesTable -> float","[]","float","()",13,"EdgesTable","EdgesTable",1
"Get preview of matrix for display (first N rows/cols by default)",425,"(row_limit=None, col_limit=None)",false,"GraphMatrix.preview","preview","GraphMatrix","{}",2,"GraphMatrix -> Matrix","[]","Matrix","(row_limit=None, col_limit=None)",15,"GraphMatrix","GraphMatrix",2
compressed_text,21,"(filter)",false,"Graph.filter_edges","filter_edges","Graph","{}",1,"Graph -> str","[""filter""]","str","(filter)",5,"Graph","Graph",7
"Get a NodesTable representation of accessible nodes  
Implements: g.nodes.table()",188,"()",false,"NodesAccessor.table","table","NodesAccessor","{}",0,"NodesAccessor -> NodesTable","[]","NodesTable","()",20,"NodesAccessor","NodesAccessor",11
compressed_text,171,"()",false,"NodeId.as_integer_ratio","as_integer_ratio","NodeId","{}",0,"NodeId -> int","[]","int","()",3,"NodeId","NodeId",32
"Compute gradients via backpropagation",380,"()",false,"GraphMatrix.backward","backward","GraphMatrix","{}",0,"GraphMatrix -> Unknown","[]","Unknown","()",15,"GraphMatrix","GraphMatrix",21
compressed_text,114,"(other, on, how)",false,"BaseTable.join","join","BaseTable","{}",3,"BaseTable -> dict","[""other"", ""on"", ""how""]","dict","(other, on, how)",23,"BaseTable","BaseTable",0
"Create subgraph representing shortest path between two nodes",367,"(source, target)",false,"Subgraph.shortest_path_subgraph","shortest_path_subgraph","Subgraph","{}",2,"Subgraph -> Subgraph","[""source"", ""target""]","Subgraph","(source, target)",6,"Subgraph","Subgraph",6
compressed_text,263,"(port=None, layout=None, theme=None, width=None, height=None)",false,"EdgesTable.interactive_viz","interactive_viz","EdgesTable","{}",5,"EdgesTable -> float","[]","float","(port=None, layout=None, theme=None, width=None, height=None)",13,"EdgesTable","EdgesTable",1
compressed_text,100,"(columns)",false,"BaseTable.drop_columns","drop_columns","BaseTable","{}",1,"BaseTable -> list","[""columns""]","list","(columns)",23,"BaseTable","BaseTable",8
"Import NodesTable from JSON file (must contain node_id column)",222,"(path)",false,"NodesTable.from_json","from_json","NodesTable","{}",1,"NodesTable -> NodesTable","[""path""]","NodesTable","(path)",11,"NodesTable","NodesTable",11
"Get single cell value at (row, col)",399,"(row, col)",false,"GraphMatrix.get_cell","get_cell","GraphMatrix","{}",2,"GraphMatrix -> Unknown","[""row"", ""col""]","Unknown","(row, col)",15,"GraphMatrix","GraphMatrix",21
compressed_text,249,"(columns)",false,"EdgesTable.drop_columns","drop_columns","EdgesTable","{}",1,"EdgesTable -> list","[""columns""]","list","(columns)",13,"EdgesTable","EdgesTable",8
"Import NodesTable from Parquet file (must contain node_id column)",223,"(path)",false,"NodesTable.from_parquet","from_parquet","NodesTable","{}",1,"NodesTable -> NodesTable","[""path""]","NodesTable","(path)",11,"NodesTable","NodesTable",11
compressed_text,271,"(start, end)",false,"EdgesTable.slice","slice","EdgesTable","{}",2,"EdgesTable -> EdgesTable","[""start"", ""end""]","EdgesTable","(start, end)",13,"EdgesTable","EdgesTable",13
"Get total node count across all NodesAccessor objects",292,"()",false,"NodesArray.total_node_count","total_node_count","NodesArray","{}",0,"NodesArray -> NodesAccessor","[]","NodesAccessor","()",28,"NodesArray","NodesArray",20
compressed_text,272,"(column, ascending=True)",false,"EdgesTable.sort_by","sort_by","EdgesTable","{}",2,"EdgesTable -> EdgesTable","[""column""]","EdgesTable","(column, ascending=True)",13,"EdgesTable","EdgesTable",13
"Create matrix from graph attributes",396,"(_graph, _attrs, _entities)",false,"GraphMatrix.from_graph_attributes","from_graph_attributes","GraphMatrix","{}",3,"GraphMatrix -> Graph","[""_graph"", ""_attrs"", ""_entities""]","Graph","(_graph, _attrs, _entities)",15,"GraphMatrix","GraphMatrix",5
"Get rich display representation using Rust formatter",432,"(config=None)",false,"GraphMatrix.rich_display","rich_display","GraphMatrix","{}",1,"GraphMatrix -> Unknown","[]","Unknown","(config=None)",15,"GraphMatrix","GraphMatrix",21
compressed_text,160,"(chars=None)",false,"BranchName.strip","strip","BranchName","{}",1,"BranchName -> str","[]","str","(chars=None, /)",22,"BranchName","BranchName",7
compressed_text,74,"()",false,"AttrName.isupper","isupper","AttrName","{}",0,"AttrName -> str","[]","str","()",10,"AttrName","AttrName",7
"Convert to Python list",314,"()",false,"SubgraphArray.to_list","to_list","SubgraphArray","{}",0,"SubgraphArray -> list","[]","list","()",30,"SubgraphArray","SubgraphArray",8
"Check if edge exists between two nodes",348,"(source, target)",false,"Subgraph.has_edge_between","has_edge_between","Subgraph","{}",2,"Subgraph -> Unknown","[""source"", ""target""]","Unknown","(source, target)",6,"Subgraph","Subgraph",21
"Direct delegation: Apply sample(k) to each component and return PySubgraphArray",465,"(k)",false,"ComponentsArray.sample","sample","ComponentsArray","{}",1,"ComponentsArray -> SubgraphArray","[""k""]","SubgraphArray","(k)",14,"ComponentsArray","ComponentsArray",30
"Convert back to Graph",211,"()",false,"GraphTable.to_graph","to_graph","GraphTable","{}",0,"GraphTable -> Graph","[]","Graph","()",33,"GraphTable","GraphTable",5
"Calculate the sum",304,"()",false,"NumArray.sum","sum","NumArray","{}",0,"NumArray -> Unknown","[]","Unknown","()",26,"NumArray","NumArray",21
"Convert to pandas DataFrame",126,"()",false,"BaseTable.to_pandas","to_pandas","BaseTable","{}",0,"BaseTable -> Unknown","[]","Unknown","()",23,"BaseTable","BaseTable",21
"Import EdgesTable from CSV file (must contain edge_id, source, target columns)",255,"(path)",false,"EdgesTable.from_csv","from_csv","EdgesTable","{}",1,"EdgesTable -> EdgesTable","[""path""]","EdgesTable","(path)",13,"EdgesTable","EdgesTable",13
"Auto-assign edge IDs for null values (useful for meta nodes and imported data)",196,"()",false,"GraphTable.auto_assign_edge_ids","auto_assign_edge_ids","GraphTable","{}",0,"GraphTable -> Unknown","[]","Unknown","()",33,"GraphTable","GraphTable",21
"Get last n rows (primarily from nodes table, default 5) ",209,"(n=5)",false,"GraphTable.tail","tail","GraphTable","{}",1,"GraphTable -> Unknown","[]","Unknown","(n=5)",33,"GraphTable","GraphTable",21
compressed_text,217,"(columns)",false,"NodesTable.drop_columns","drop_columns","NodesTable","{}",1,"NodesTable -> list","[""columns""]","list","(columns)",11,"NodesTable","NodesTable",8
"Get number of columns",231,"()",false,"NodesTable.ncols","ncols","NodesTable","{}",0,"NodesTable -> float","[]","float","()",11,"NodesTable","NodesTable",1
"Get standard Laplacian matrix (D - A)",451,"()",false,"GraphMatrix.to_laplacian","to_laplacian","GraphMatrix","{}",0,"GraphMatrix -> Matrix","[]","Matrix","()",15,"GraphMatrix","GraphMatrix",2
compressed_text,142,"()",false,"BranchName.isprintable","isprintable","BranchName","{}",0,"BranchName -> str","[]","str","()",22,"BranchName","BranchName",7
"",3,"(node_id=None, kwargs)",false,"Graph.add_node","add_node","Graph","{}",2,"Graph -> Unknown","[""kwargs""]","Unknown","(node_id=None, **kwargs)",5,"Graph","Graph",21
"Generate dense HTML representation for small matrices",384,"()",false,"GraphMatrix.dense_html_repr","dense_html_repr","GraphMatrix","{}",0,"GraphMatrix -> Unknown","[]","Unknown","()",15,"GraphMatrix","GraphMatrix",21
"Return a version of the string suitable for caseless comparisons.",130,"()",false,"BranchName.casefold","casefold","BranchName","{}",0,"BranchName -> str","[]","str","()",22,"BranchName","BranchName",7
compressed_text,218,"(predicate)",false,"NodesTable.filter","filter","NodesTable","{}",1,"NodesTable -> str","[""predicate""]","str","(predicate)",11,"NodesTable","NodesTable",7
"Import NodesTable from CSV file (must contain node_id column)",220,"(path)",false,"NodesTable.from_csv","from_csv","NodesTable","{}",1,"NodesTable -> NodesTable","[""path""]","NodesTable","(path)",11,"NodesTable","NodesTable",11
"Return a version of the string suitable for caseless comparisons.",59,"()",false,"AttrName.casefold","casefold","AttrName","{}",0,"AttrName -> str","[]","str","()",10,"AttrName","AttrName",7
"Dropout operation for regularization",386,"(p, training=None)",false,"GraphMatrix.dropout","dropout","GraphMatrix","{}",2,"GraphMatrix -> Unknown","[""p""]","Unknown","(p, training=None)",15,"GraphMatrix","GraphMatrix",21
"Return a copy of the string converted to lowercase.",148,"()",false,"BranchName.lower","lower","BranchName","{}",0,"BranchName -> str","[]","str","()",22,"BranchName","BranchName",7
"Get neighbors of nodes - delegates to PyGraphAnalysis helper",40,"(nodes=None)",false,"Graph.neighbors","neighbors","Graph","{}",1,"Graph -> GraphAnalysis","[]","GraphAnalysis","(nodes=None)",5,"Graph","Graph",24
compressed_text,206,"(bundle_path)",false,"GraphTable.save_bundle","save_bundle","GraphTable","{}",1,"GraphTable -> GraphTable","[""bundle_path""]","GraphTable","(bundle_path)",33,"GraphTable","GraphTable",33
"DFS traversal - delegates to PyGraphAnalysis helper  ",17,"(start, max_depth=None, inplace=None, attr_name=None)",false,"Graph.dfs","dfs","Graph","{}",4,"Graph -> GraphAnalysis","[""start""]","GraphAnalysis","(start, max_depth=None, inplace=None, attr_name=None)",5,"Graph","Graph",24
compressed_text,82,"(old, new, count=-1)",false,"AttrName.replace","replace","AttrName","{}",3,"AttrName -> float","[""old"", ""new""]","float","(old, new, count=-1, /)",10,"AttrName","AttrName",1
"Calculate similarity between subgraphs using various metrics",325,"(other, metric=jaccard)",false,"Subgraph.calculate_similarity","calculate_similarity","Subgraph","{}",2,"Subgraph -> Unknown","[""other""]","Unknown","(other, metric='jaccard')",6,"Subgraph","Subgraph",21
"Standard deviation along specified axis (0=rows, 1=columns)",441,"(axis)",false,"GraphMatrix.std_axis","std_axis","GraphMatrix","{}",1,"GraphMatrix -> Unknown","[""axis""]","Unknown","(axis)",15,"GraphMatrix","GraphMatrix",21
"Check if column exists",109,"(name)",false,"BaseTable.has_column","has_column","BaseTable","{}",1,"BaseTable -> Unknown","[""name""]","Unknown","(name)",23,"BaseTable","BaseTable",21
"Get summary information without materializing data",444,"()",false,"GraphMatrix.summary","summary","GraphMatrix","{}",0,"GraphMatrix -> Unknown","[]","Unknown","()",15,"GraphMatrix","GraphMatrix",21
"Get all unique edge attribute names across the entire graph",6,"()",false,"Graph.all_edge_attribute_names","all_edge_attribute_names","Graph","{}",0,"Graph -> Graph","[]","Graph","()",5,"Graph","Graph",5
"Get single edge attribute - delegates to PyGraphAttr",23,"(edge, attr, default=None)",false,"Graph.get_edge_attr","get_edge_attr","Graph","{}",3,"Graph -> GraphAttr","[""edge"", ""attr""]","GraphAttr","(edge, attr, default=None)",5,"Graph","Graph",17
compressed_text,224,"(columns)",false,"NodesTable.group_by","group_by","NodesTable","{}",1,"NodesTable -> list","[""columns""]","list","(columns)",11,"NodesTable","NodesTable",8
"Create a ones matrix with specified dimensions",423,"(rows, cols, dtype=None)",false,"GraphMatrix.ones","ones","GraphMatrix","{}",3,"GraphMatrix -> Matrix","[""rows"", ""cols""]","Matrix","(rows, cols, dtype=None)",15,"GraphMatrix","GraphMatrix",2
"Count unique values",301,"()",false,"NumArray.nunique","nunique","NumArray","{}",0,"NumArray -> Unknown","[]","Unknown","()",26,"NumArray","NumArray",21
compressed_text,177,"(bytes, byteorder, signed=False)",false,"StateId.from_bytes","from_bytes","StateId","{}",3,"StateId -> list","[""bytes"", ""byteorder""]","list","(bytes, byteorder, *, signed=False)",19,"StateId","StateId",8
"Calculate the L1 norm (sum of absolute values) of the matrix",422,"()",false,"GraphMatrix.norm_l1","norm_l1","GraphMatrix","{}",0,"GraphMatrix -> Matrix","[]","Matrix","()",15,"GraphMatrix","GraphMatrix",2
"Maximum along specified axis (0=rows, 1=columns)",414,"(axis)",false,"GraphMatrix.max_axis","max_axis","GraphMatrix","{}",1,"GraphMatrix -> Unknown","[""axis""]","Unknown","(axis)",15,"GraphMatrix","GraphMatrix",21
"Export BaseTable to Parquet file ",127,"(path)",false,"BaseTable.to_parquet","to_parquet","BaseTable","{}",1,"BaseTable -> BaseTable","[""path""]","BaseTable","(path)",23,"BaseTable","BaseTable",23
"Get last n rows (default 5)",274,"(n=5)",false,"EdgesTable.tail","tail","EdgesTable","{}",1,"EdgesTable -> Unknown","[]","Unknown","(n=5)",13,"EdgesTable","EdgesTable",21
"Create matrix from BaseArray containing numeric values",393,"(base_array, rows, cols)",false,"GraphMatrix.from_base_array","from_base_array","GraphMatrix","{}",3,"GraphMatrix -> float","[""base_array"", ""rows"", ""cols""]","float","(base_array, rows, cols)",15,"GraphMatrix","GraphMatrix",1
"Get historical view at specific commit (FFI wrapper around core history system)",35,"(commit_id)",false,"Graph.historical_view","historical_view","Graph","{}",1,"Graph -> Commit","[""commit_id""]","Commit","(commit_id)",5,"Graph","Graph",18
"Get rich display representation with NodesTable type",234,"(config=None)",false,"NodesTable.rich_display","rich_display","NodesTable","{}",1,"NodesTable -> NodesTable","[]","NodesTable","(config=None)",11,"NodesTable","NodesTable",11
"Create a new branch (FFI wrapper around core history system)",15,"(branch_name)",false,"Graph.create_branch","create_branch","Graph","{}",1,"Graph -> Unknown","[""branch_name""]","Unknown","(branch_name)",5,"Graph","Graph",21
"Get single node attribute - delegates to PyGraphAttr",25,"(node, attr, default=None)",false,"Graph.get_node_attr","get_node_attr","Graph","{}",3,"Graph -> GraphAttr","[""node"", ""attr""]","GraphAttr","(node, attr, default=None)",5,"Graph","Graph",17
compressed_text,29,"(attribute, aggregation_attr, operation)",false,"Graph.group_nodes_by_attribute","group_nodes_by_attribute","Graph","{}",3,"Graph -> Graph","[""attribute"", ""aggregation_attr"", ""operation""]","Graph","(attribute, aggregation_attr, operation)",5,"Graph","Graph",5
"Convert matrix to nested Python list
Returns: [[row1], [row2], ...] format",452,"()",false,"GraphMatrix.to_list","to_list","GraphMatrix","{}",0,"GraphMatrix -> list","[]","list","()",15,"GraphMatrix","GraphMatrix",8
"List all branches (FFI wrapper around core history system)",9,"()",false,"Graph.branches","branches","Graph","{}",0,"Graph -> list","[]","list","()",5,"Graph","Graph",8
compressed_text,261,"()",false,"EdgesTable.interactive","interactive","EdgesTable","{}",0,"EdgesTable -> str","[]","str","()",13,"EdgesTable","EdgesTable",7
compressed_text,111,"(port=None, layout=None, theme=None, width=None, height=None)",false,"BaseTable.interactive_viz","interactive_viz","BaseTable","{}",5,"BaseTable -> float","[]","float","(port=None, layout=None, theme=None, width=None, height=None)",23,"BaseTable","BaseTable",1
"Create induced subgraph from list of nodes",353,"(nodes)",false,"Subgraph.induced_subgraph","induced_subgraph","Subgraph","{}",1,"Subgraph -> list","[""nodes""]","list","(nodes)",6,"Subgraph","Subgraph",8
"Return the entity type string",340,"()",false,"Subgraph.entity_type","entity_type","Subgraph","{}",0,"Subgraph -> str","[]","str","()",6,"Subgraph","Subgraph",7
"Get number of rows",233,"()",false,"NodesTable.nrows","nrows","NodesTable","{}",0,"NodesTable -> float","[]","float","()",11,"NodesTable","NodesTable",1
"Get all meta-nodes within this subgraph",358,"()",false,"Subgraph.meta_nodes","meta_nodes","Subgraph","{}",0,"Subgraph -> Subgraph","[]","Subgraph","()",6,"Subgraph","Subgraph",6
compressed_text,153,"(old, new, count=-1)",false,"BranchName.replace","replace","BranchName","{}",3,"BranchName -> float","[""old"", ""new""]","float","(old, new, count=-1, /)",22,"BranchName","BranchName",1
"Get unique values for an attribute",280,"(attr_name)",false,"EdgesTable.unique_attr_values","unique_attr_values","EdgesTable","{}",1,"EdgesTable -> Unknown","[""attr_name""]","Unknown","(attr_name)",13,"EdgesTable","EdgesTable",21
"Set multiple node attributes (bulk operation) - delegates to accessor",366,"(attrs_dict)",false,"Subgraph.set_node_attrs","set_node_attrs","Subgraph","{}",1,"Subgraph -> Unknown","[""attrs_dict""]","Unknown","(attrs_dict)",6,"Subgraph","Subgraph",21
"Combine all NodesAccessor objects into a single unified NodesAccessor",293,"()",false,"NodesArray.union","union","NodesArray","{}",0,"NodesArray -> NodesAccessor","[]","NodesAccessor","()",28,"NodesArray","NodesArray",20
compressed_text,419,"(other)",false,"GraphMatrix.multiply","multiply","GraphMatrix","{}",1,"GraphMatrix -> Matrix","[""other""]","Matrix","(other)",15,"GraphMatrix","GraphMatrix",2
"Leaky ReLU activation function",409,"(alpha=None)",false,"GraphMatrix.leaky_relu","leaky_relu","GraphMatrix","{}",1,"GraphMatrix -> Unknown","[]","Unknown","(alpha=None)",15,"GraphMatrix","GraphMatrix",21
"Get a GraphTable representation of this graph
Implements: g.table()",53,"()",false,"Graph.table","table","Graph","{}",0,"Graph -> Graph","[]","Graph","()",5,"Graph","Graph",5
"Eigenvalue decomposition: A * V = V * Λ
Returns tuple of (eigenvalues, eigenvectors) ",387,"()",false,"GraphMatrix.eigenvalue_decomposition","eigenvalue_decomposition","GraphMatrix","{}",0,"GraphMatrix -> Unknown","[]","Unknown","()",15,"GraphMatrix","GraphMatrix",21
"Get out-degree of nodes within subgraph",362,"(nodes=None, full_graph=False)",false,"Subgraph.out_degree","out_degree","Subgraph","{}",2,"Subgraph -> Subgraph","[]","Subgraph","(nodes=None, full_graph=False)",6,"Subgraph","Subgraph",6
"Convert to BaseTable (loses edge-specific typing)",264,"()",false,"EdgesTable.into_base_table","into_base_table","EdgesTable","{}",0,"EdgesTable -> BaseTable","[]","BaseTable","()",13,"EdgesTable","EdgesTable",23
compressed_text,187,"(attrs_dict)",false,"NodesAccessor.set_attrs","set_attrs","NodesAccessor","{}",1,"NodesAccessor -> Graph","[""attrs_dict""]","Graph","(attrs_dict)",20,"NodesAccessor","NodesAccessor",5
"Merge with another GraphTable",202,"(other, strategy)",false,"GraphTable.merge_with","merge_with","GraphTable","{}",2,"GraphTable -> GraphTable","[""other"", ""strategy""]","GraphTable","(other, strategy)",33,"GraphTable","GraphTable",33
compressed_text,87,"(sep=None, maxsplit=-1)",false,"AttrName.split","split","AttrName","{}",2,"AttrName -> list","[]","list","(sep=None, maxsplit=-1)",10,"AttrName","AttrName",8
"Import EdgesTable from Parquet file (must contain edge_id, source, target columns)",258,"(path)",false,"EdgesTable.from_parquet","from_parquet","EdgesTable","{}",1,"EdgesTable -> EdgesTable","[""path""]","EdgesTable","(path)",13,"EdgesTable","EdgesTable",13
"Check if the array is empty",318,"()",false,"TableArray.is_empty","is_empty","TableArray","{}",0,"TableArray -> list","[]","list","()",4,"TableArray","TableArray",8
"Filter edges by target nodes",254,"(target_nodes)",false,"EdgesTable.filter_by_targets","filter_by_targets","EdgesTable","{}",1,"EdgesTable -> Unknown","[""target_nodes""]","Unknown","(target_nodes)",13,"EdgesTable","EdgesTable",21
compressed_text,427,"()",false,"GraphMatrix.rank","rank","GraphMatrix","{}",0,"GraphMatrix -> float","[]","float","()",15,"GraphMatrix","GraphMatrix",1
compressed_text,92,"(table)",false,"AttrName.translate","translate","AttrName","{}",1,"AttrName -> dict","[""table""]","dict","(table, /)",10,"AttrName","AttrName",0
"Filter edges by source nodes",253,"(source_nodes)",false,"EdgesTable.filter_by_sources","filter_by_sources","EdgesTable","{}",1,"EdgesTable -> Unknown","[""source_nodes""]","Unknown","(source_nodes)",13,"EdgesTable","EdgesTable",21
compressed_text,156,"(sep=None, maxsplit=-1)",false,"BranchName.rsplit","rsplit","BranchName","{}",2,"BranchName -> list","[]","list","(sep=None, maxsplit=-1)",22,"BranchName","BranchName",8
"Get Laplacian matrix - delegates to PyGraphMatrixHelper",37,"(normalized=None)",false,"Graph.laplacian_matrix","laplacian_matrix","Graph","{}",1,"Graph -> Matrix","[]","Matrix","(normalized=None)",5,"Graph","Graph",2
compressed_text,159,"(keepends=False)",false,"BranchName.splitlines","splitlines","BranchName","{}",1,"BranchName -> list","[]","list","(keepends=False)",22,"BranchName","BranchName",8
"Check if a node exists in the graph - DELEGATED",32,"(node_id)",false,"Graph.has_node","has_node","Graph","{}",1,"Graph -> Graph","[""node_id""]","Graph","(node_id)",5,"Graph","Graph",5
compressed_text,154,"(width, fillchar= )",false,"BranchName.rjust","rjust","BranchName","{}",2,"BranchName -> str","[""width""]","str","(width, fillchar=' ', /)",22,"BranchName","BranchName",7
"Global sum of all elements in the matrix",442,"()",false,"GraphMatrix.sum","sum","GraphMatrix","{}",0,"GraphMatrix -> Matrix","[]","Matrix","()",15,"GraphMatrix","GraphMatrix",2
compressed_text,165,"(width)",false,"BranchName.zfill","zfill","BranchName","{}",1,"BranchName -> str","[""width""]","str","(width, /)",22,"BranchName","BranchName",7
"Check if node has specific attribute - delegates to PyGraphAttr",33,"(node_id, attr_name)",false,"Graph.has_node_attribute","has_node_attribute","Graph","{}",2,"Graph -> GraphAttr","[""node_id"", ""attr_name""]","GraphAttr","(node_id, attr_name)",5,"Graph","Graph",17
"Calculate transitivity of the subgraph",377,"()",false,"Subgraph.transitivity","transitivity","Subgraph","{}",0,"Subgraph -> Subgraph","[]","Subgraph","()",6,"Subgraph","Subgraph",6
compressed_text,328,compressed_text,false,"Subgraph.collapse","collapse","Subgraph","{}",9,"Subgraph -> dict","[]","dict",compressed_text,6,"Subgraph","Subgraph",0
compressed_text,91,"()",false,"AttrName.title","title","AttrName","{}",0,"AttrName -> str","[]","str","()",10,"AttrName","AttrName",7
"Collect all subgraphs into a Python list (for compatibility with iterator patterns)",308,"()",false,"SubgraphArray.collect","collect","SubgraphArray","{}",0,"SubgraphArray -> list","[]","list","()",30,"SubgraphArray","SubgraphArray",8
compressed_text,182,"()",false,"NodesAccessor.array","array","NodesAccessor","{}",0,"NodesAccessor -> list","[]","list","()",20,"NodesAccessor","NodesAccessor",8
"Get number of columns (max of nodes and edges)",204,"()",false,"GraphTable.ncols","ncols","GraphTable","{}",0,"GraphTable -> float","[]","float","()",33,"GraphTable","GraphTable",1
"Tanh activation applied to matrix
Implements: matrix.tanh()",446,"()",false,"GraphMatrix.tanh","tanh","GraphMatrix","{}",0,"GraphMatrix -> Matrix","[]","Matrix","()",15,"GraphMatrix","GraphMatrix",2
compressed_text,391,"(condition)",false,"GraphMatrix.filter","filter","GraphMatrix","{}",1,"GraphMatrix -> Matrix","[""condition""]","Matrix","(condition)",15,"GraphMatrix","GraphMatrix",2
compressed_text,112,"(other)",false,"BaseTable.intersect","intersect","BaseTable","{}",1,"BaseTable -> Unknown","[""other""]","Unknown","(other)",23,"BaseTable","BaseTable",21
"Create matrix from NumArray by reshaping to specified dimensions",395,"(num_array, rows, cols)",false,"GraphMatrix.from_flattened","from_flattened","GraphMatrix","{}",3,"GraphMatrix -> NumArray","[""num_array"", ""rows"", ""cols""]","NumArray","(num_array, rows, cols)",15,"GraphMatrix","GraphMatrix",26
"Create DisplayConfig with default values",166,"()",false,"DisplayConfig.default","default","DisplayConfig","{}",0,"DisplayConfig -> DisplayConfig","[]","DisplayConfig","()",29,"DisplayConfig","DisplayConfig",29
"Get last n rows (default 5)",123,"(n=5)",false,"BaseTable.tail","tail","BaseTable","{}",1,"BaseTable -> Unknown","[]","Unknown","(n=5)",23,"BaseTable","BaseTable",21
"Get shortest path - delegates to PyGraphAnalysis helper",52,"(source, target, weight_attribute=None, inplace=None, attr_name=None)",false,"Graph.shortest_path","shortest_path","Graph","{}",5,"Graph -> GraphAnalysis","[""source"", ""target""]","GraphAnalysis","(source, target, weight_attribute=None, inplace=None, attr_name=None)",5,"Graph","Graph",24
compressed_text,141,"()",false,"BranchName.isnumeric","isnumeric","BranchName","{}",0,"BranchName -> str","[]","str","()",22,"BranchName","BranchName",7
"Filter nodes and return new subgraph  ",342,"(filter)",false,"Subgraph.filter_nodes","filter_nodes","Subgraph","{}",1,"Subgraph -> Subgraph","[""filter""]","Subgraph","(filter)",6,"Subgraph","Subgraph",6
"Split matrix along specified axis",438,"(split_points, axis)",false,"GraphMatrix.split","split","GraphMatrix","{}",2,"GraphMatrix -> Matrix","[""split_points"", ""axis""]","Matrix","(split_points, axis)",15,"GraphMatrix","GraphMatrix",2
"Create federated GraphTable from multiple bundle paths",197,"(bundle_paths, domain_names=None)",false,"GraphTable.from_federated_bundles","from_federated_bundles","GraphTable","{}",2,"GraphTable -> GraphTable","[""bundle_paths""]","GraphTable","(bundle_paths, domain_names=None)",33,"GraphTable","GraphTable",33
"Get graph statistics  ",208,"()",false,"GraphTable.stats","stats","GraphTable","{}",0,"GraphTable -> Graph","[]","Graph","()",33,"GraphTable","GraphTable",5
"Set operations - merge, intersect, subtract (placeholders)",357,"(_other)",false,"Subgraph.merge_with","merge_with","Subgraph","{}",1,"Subgraph -> Unknown","[""_other""]","Unknown","(_other)",6,"Subgraph","Subgraph",21
compressed_text,184,"(attr_name)",false,"NodesAccessor.group_by","group_by","NodesAccessor","{}",1,"NodesAccessor -> list","[""attr_name""]","list","(attr_name)",20,"NodesAccessor","NodesAccessor",8
"Convert node attributes to matrix
Implements: g.nodes.matrix()",186,"()",false,"NodesAccessor.matrix","matrix","NodesAccessor","{}",0,"NodesAccessor -> Matrix","[]","Matrix","()",20,"NodesAccessor","NodesAccessor",2
"Import BaseTable from JSON file",104,"(path)",false,"BaseTable.from_json","from_json","BaseTable","{}",1,"BaseTable -> BaseTable","[""path""]","BaseTable","(path)",23,"BaseTable","BaseTable",23
"DFS traversal - returns subgraph result",336,"(start, max_depth=None)",false,"Subgraph.dfs","dfs","Subgraph","{}",2,"Subgraph -> Subgraph","[""start""]","Subgraph","(start, max_depth=None)",6,"Subgraph","Subgraph",6
"GELU activation applied to matrix
Implements: matrix.gelu()",397,"()",false,"GraphMatrix.gelu","gelu","GraphMatrix","{}",0,"GraphMatrix -> Matrix","[]","Matrix","()",15,"GraphMatrix","GraphMatrix",2
"Iterate over columns - returns iterator of BaseArrays or NumArrays",407,"()",false,"GraphMatrix.iter_columns","iter_columns","GraphMatrix","{}",0,"GraphMatrix -> Unknown","[]","Unknown","()",15,"GraphMatrix","GraphMatrix",21
"Check if edge exists - DELEGATED (same as has_edge)  ",13,"(edge)",false,"Graph.contains_edge","contains_edge","Graph","{}",1,"Graph -> Unknown","[""edge""]","Unknown","(edge)",5,"Graph","Graph",21
compressed_text,227,"()",false,"NodesTable.interactive_embed","interactive_embed","NodesTable","{}",0,"NodesTable -> str","[]","str","()",11,"NodesTable","NodesTable",7
"Get first element",295,"()",false,"NumArray.first","first","NumArray","{}",0,"NumArray -> Unknown","[]","Unknown","()",26,"NumArray","NumArray",21
compressed_text,137,"()",false,"BranchName.isdecimal","isdecimal","BranchName","{}",0,"BranchName -> str","[]","str","()",22,"BranchName","BranchName",7
"Solve linear system Ax = b",437,"(b)",false,"GraphMatrix.solve","solve","GraphMatrix","{}",1,"GraphMatrix -> Unknown","[""b""]","Unknown","(b)",15,"GraphMatrix","GraphMatrix",21
compressed_text,96,"(agg_specs)",false,"BaseTable.aggregate","aggregate","BaseTable","{}",1,"BaseTable -> dict","[""agg_specs""]","dict","(agg_specs)",23,"BaseTable","BaseTable",0
compressed_text,238,"(column, ascending=True)",false,"NodesTable.sort_by","sort_by","NodesTable","{}",2,"NodesTable -> NodesTable","[""column""]","NodesTable","(column, ascending=True)",11,"NodesTable","NodesTable",11
"Node count property",361,"()",false,"Subgraph.node_count","node_count","Subgraph","{}",0,"Subgraph -> Unknown","[]","Unknown","()",6,"Subgraph","Subgraph",21
compressed_text,79,"(sep)",false,"AttrName.partition","partition","AttrName","{}",1,"AttrName -> str","[""sep""]","str","(sep, /)",10,"AttrName","AttrName",7
compressed_text,67,"()",false,"AttrName.isdigit","isdigit","AttrName","{}",0,"AttrName -> str","[]","str","()",10,"AttrName","AttrName",7
"Get the number of edges in the graph - DELEGATED",19,"()",false,"Graph.edge_count","edge_count","Graph","{}",0,"Graph -> float","[]","float","()",5,"Graph","Graph",1
"Find the maximum value",298,"()",false,"NumArray.max","max","NumArray","{}",0,"NumArray -> Unknown","[]","Unknown","()",26,"NumArray","NumArray",21
compressed_text,132,"(encoding=utf-8, errors=strict)",false,"BranchName.encode","encode","BranchName","{}",2,"BranchName -> str","[]","str","(encoding='utf-8', errors='strict')",22,"BranchName","BranchName",7
compressed_text,157,"(chars=None)",false,"BranchName.rstrip","rstrip","BranchName","{}",1,"BranchName -> str","[]","str","(chars=None, /)",22,"BranchName","BranchName",7
"Convert this graph to a NetworkX graph.",55,"(directed: bool=False, include_attributes: bool=True)",false,"Graph.to_networkx","to_networkx","Graph","{""directed"": ""bool"", ""include_attributes"": ""bool""}",2,"Graph -> Graph","[]","Graph","(directed: bool = False, include_attributes: bool = True)",5,"Graph","Graph",5
"Set single cell value at (row, col)",434,"(row, col, value)",false,"GraphMatrix.set","set","GraphMatrix","{}",3,"GraphMatrix -> Unknown","[""row"", ""col"", ""value""]","Unknown","(row, col, value)",15,"GraphMatrix","GraphMatrix",21
"Convert matrix to BaseArray containing all values as AttrValues",448,"()",false,"GraphMatrix.to_base_array","to_base_array","GraphMatrix","{}",0,"GraphMatrix -> BaseArray","[]","BaseArray","()",15,"GraphMatrix","GraphMatrix",27
compressed_text,189,"()",false,"EdgesAccessor.all","all","EdgesAccessor","{}",0,"EdgesAccessor -> Subgraph","[]","Subgraph","()",9,"EdgesAccessor","EdgesAccessor",6
"Get table iterator for chaining",265,"()",false,"EdgesTable.iter","iter","EdgesTable","{}",0,"EdgesTable -> Unknown","[]","Unknown","()",13,"EdgesTable","EdgesTable",21
"Get adjacency list representation
Returns: Dict mapping node_id -> list of connected node_ids",322,"()",false,"Subgraph.adjacency_list","adjacency_list","Subgraph","{}",0,"Subgraph -> dict","[]","dict","()",6,"Subgraph","Subgraph",0
"Minimum along specified axis (0=rows, 1=columns)",418,"(axis)",false,"GraphMatrix.min_axis","min_axis","GraphMatrix","{}",1,"GraphMatrix -> Unknown","[""axis""]","Unknown","(axis)",15,"GraphMatrix","GraphMatrix",21
compressed_text,89,"(chars=None)",false,"AttrName.strip","strip","AttrName","{}",1,"AttrName -> str","[]","str","(chars=None, /)",10,"AttrName","AttrName",7
"Global maximum value in the matrix",413,"()",false,"GraphMatrix.max","max","GraphMatrix","{}",0,"GraphMatrix -> Matrix","[]","Matrix","()",15,"GraphMatrix","GraphMatrix",2
compressed_text,269,"(columns)",false,"EdgesTable.select","select","EdgesTable","{}",1,"EdgesTable -> list","[""columns""]","list","(columns)",13,"EdgesTable","EdgesTable",8
"Get all unique node attribute names across the entire graph",7,"()",false,"Graph.all_node_attribute_names","all_node_attribute_names","Graph","{}",0,"Graph -> Graph","[]","Graph","()",5,"Graph","Graph",5
compressed_text,119,"(mask, column_name, value)",false,"BaseTable.set_values_by_mask","set_values_by_mask","BaseTable","{}",3,"BaseTable -> list","[""mask"", ""column_name"", ""value""]","list","(mask, column_name, value)",23,"BaseTable","BaseTable",8
compressed_text,95,"(agg_specs)",false,"BaseTable.agg","agg","BaseTable","{}",1,"BaseTable -> dict","[""agg_specs""]","dict","(agg_specs)",23,"BaseTable","BaseTable",0
"Export NodesTable to CSV file",240,"(path)",false,"NodesTable.to_csv","to_csv","NodesTable","{}",1,"NodesTable -> NodesTable","[""path""]","NodesTable","(path)",11,"NodesTable","NodesTable",11
"Check if the array contains a specific NodesAccessor",281,"(item)",false,"NodesArray.contains","contains","NodesArray","{}",1,"NodesArray -> list","[""item""]","list","(item)",28,"NodesArray","NodesArray",8
"Create iterator for method chaining",319,"()",false,"TableArray.iter","iter","TableArray","{}",0,"TableArray -> Unknown","[]","Unknown","()",4,"TableArray","TableArray",21
compressed_text,155,"(sep)",false,"BranchName.rpartition","rpartition","BranchName","{}",1,"BranchName -> str","[""sep""]","str","(sep, /)",22,"BranchName","BranchName",7
"Convert to different numeric type",294,"(dtype)",false,"NumArray.astype","astype","NumArray","{}",1,"NumArray -> float","[""dtype""]","float","(dtype)",26,"NumArray","NumArray",1
"Filter edges and return new subgraph",341,"(filter)",false,"Subgraph.filter_edges","filter_edges","Subgraph","{}",1,"Subgraph -> Subgraph","[""filter""]","Subgraph","(filter)",6,"Subgraph","Subgraph",6
compressed_text,262,"()",false,"EdgesTable.interactive_embed","interactive_embed","EdgesTable","{}",0,"EdgesTable -> str","[]","str","()",13,"EdgesTable","EdgesTable",7
compressed_text,251,"(predicate)",false,"EdgesTable.filter","filter","EdgesTable","{}",1,"EdgesTable -> str","[""predicate""]","str","(predicate)",13,"EdgesTable","EdgesTable",7
compressed_text,321,"()",false,"Subgraph.adj","adj","Subgraph","{}",0,"Subgraph -> Matrix","[]","Matrix","()",6,"Subgraph","Subgraph",2
compressed_text,309,"(attr_name, element_type)",false,"SubgraphArray.group_by","group_by","SubgraphArray","{}",2,"SubgraphArray -> list","[""attr_name"", ""element_type""]","list","(attr_name, element_type)",30,"SubgraphArray","SubgraphArray",8
compressed_text,65,"()",false,"AttrName.isascii","isascii","AttrName","{}",0,"AttrName -> str","[]","str","()",10,"AttrName","AttrName",7
compressed_text,198,"(bundle_path)",false,"GraphTable.get_bundle_info","get_bundle_info","GraphTable","{}",1,"GraphTable -> dict","[""bundle_path""]","dict","(bundle_path)",33,"GraphTable","GraphTable",0
"Matrix Integration: Reshape NumArray into a GraphMatrix",302,"(rows, cols)",false,"NumArray.reshape","reshape","NumArray","{}",2,"NumArray -> NumArray","[""rows"", ""cols""]","NumArray","(rows, cols)",26,"NumArray","NumArray",26
"Merge multiple GraphTables into one",201,"(tables)",false,"GraphTable.merge","merge","GraphTable","{}",1,"GraphTable -> Unknown","[""tables""]","Unknown","(tables)",33,"GraphTable","GraphTable",21
compressed_text,345,"()",false,"Subgraph.graph_viz","graph_viz","Subgraph","{}",0,"Subgraph -> str","[]","str","()",6,"Subgraph","Subgraph",7
compressed_text,146,"(iterable)",false,"BranchName.join","join","BranchName","{}",1,"BranchName -> str","[""iterable""]","str","(iterable, /)",22,"BranchName","BranchName",7
"Check if this subgraph contains nodes that are meta-nodes",349,"()",false,"Subgraph.has_meta_nodes","has_meta_nodes","Subgraph","{}",0,"Subgraph -> Subgraph","[]","Subgraph","()",6,"Subgraph","Subgraph",6
compressed_text,431,"(new_rows, new_cols)",false,"GraphMatrix.reshape","reshape","GraphMatrix","{}",2,"GraphMatrix -> Matrix","[""new_rows"", ""new_cols""]","Matrix","(new_rows, new_cols)",15,"GraphMatrix","GraphMatrix",2
"Elementwise multiplication (Hadamard product)
Returns: new GraphMatrix with elementwise product",388,"(other)",false,"GraphMatrix.elementwise_multiply","elementwise_multiply","GraphMatrix","{}",1,"GraphMatrix -> GraphMatrix","[""other""]","GraphMatrix","(other)",15,"GraphMatrix","GraphMatrix",15
"Get table iterator for chaining",113,"()",false,"BaseTable.iter","iter","BaseTable","{}",0,"BaseTable -> Unknown","[]","Unknown","()",23,"BaseTable","BaseTable",21
compressed_text,103,"(data)",false,"BaseTable.from_dict","from_dict","BaseTable","{}",1,"BaseTable -> dict","[""data""]","dict","(data)",23,"BaseTable","BaseTable",0
compressed_text,228,"(port=None, layout=None, theme=None, width=None, height=None)",false,"NodesTable.interactive_viz","interactive_viz","NodesTable","{}",5,"NodesTable -> float","[]","float","(port=None, layout=None, theme=None, width=None, height=None)",11,"NodesTable","NodesTable",1
"Collapse subgraph to a single node with aggregated attributes",329,"(agg_functions)",false,"Subgraph.collapse_to_node","collapse_to_node","Subgraph","{}",1,"Subgraph -> Subgraph","[""agg_functions""]","Subgraph","(agg_functions)",6,"Subgraph","Subgraph",6
"Export EdgesTable to Parquet file ",279,"(path)",false,"EdgesTable.to_parquet","to_parquet","EdgesTable","{}",1,"EdgesTable -> EdgesTable","[""path""]","EdgesTable","(path)",13,"EdgesTable","EdgesTable",13
compressed_text,351,"(node1_id, node2_id)",false,"Subgraph.has_path","has_path","Subgraph","{}",2,"Subgraph -> Subgraph","[""node1_id"", ""node2_id""]","Subgraph","(node1_id, node2_id)",6,"Subgraph","Subgraph",6
"Element-wise square root",439,"()",false,"GraphMatrix.sqrt","sqrt","GraphMatrix","{}",0,"GraphMatrix -> Unknown","[]","Unknown","()",15,"GraphMatrix","GraphMatrix",21
"Convert to a new independent graph",373,"()",false,"Subgraph.to_graph","to_graph","Subgraph","{}",0,"Subgraph -> Graph","[]","Graph","()",6,"Subgraph","Subgraph",5
"Import EdgesTable from JSON file (must contain edge_id, source, target columns)",257,"(path)",false,"EdgesTable.from_json","from_json","EdgesTable","{}",1,"EdgesTable -> EdgesTable","[""path""]","EdgesTable","(path)",13,"EdgesTable","EdgesTable",13
compressed_text,456,"()",false,"GraphMatrix.to_table_for_streaming","to_table_for_streaming","GraphMatrix","{}",0,"GraphMatrix -> BaseTable","[]","BaseTable","()",15,"GraphMatrix","GraphMatrix",23
"Zero out all gradients in the computation graph",460,"()",false,"GraphMatrix.zero_grad","zero_grad","GraphMatrix","{}",0,"GraphMatrix -> Graph","[]","Graph","()",15,"GraphMatrix","GraphMatrix",5
"Sample k nodes from this subgraph randomly",364,"(k)",false,"Subgraph.sample","sample","Subgraph","{}",1,"Subgraph -> Subgraph","[""k""]","Subgraph","(k)",6,"Subgraph","Subgraph",6
compressed_text,64,"()",false,"AttrName.isalpha","isalpha","AttrName","{}",0,"AttrName -> str","[]","str","()",10,"AttrName","AttrName",7
"Get single cell value at (row, col) - public interface",398,"(row, col)",false,"GraphMatrix.get","get","GraphMatrix","{}",2,"GraphMatrix -> Unknown","[""row"", ""col""]","Unknown","(row, col)",15,"GraphMatrix","GraphMatrix",21
"Get number of rows",267,"()",false,"EdgesTable.nrows","nrows","EdgesTable","{}",0,"EdgesTable -> float","[]","float","()",13,"EdgesTable","EdgesTable",1
"Compute neighborhoods from this subgraph, returning a PyNeighborhoodResult",359,"(central_nodes, hops)",false,"Subgraph.neighborhood","neighborhood","Subgraph","{}",2,"Subgraph -> Subgraph","[""central_nodes"", ""hops""]","Subgraph","(central_nodes, hops)",6,"Subgraph","Subgraph",6
compressed_text,22,"(filter)",false,"Graph.filter_nodes","filter_nodes","Graph","{}",1,"Graph -> str","[""filter""]","str","(filter)",5,"Graph","Graph",7
compressed_text,429,"(repeats, axis)",false,"GraphMatrix.repeat","repeat","GraphMatrix","{}",2,"GraphMatrix -> float","[""repeats"", ""axis""]","float","(repeats, axis)",15,"GraphMatrix","GraphMatrix",1
compressed_text,183,"(node_id)",false,"NodesAccessor.get_meta_node","get_meta_node","NodesAccessor","{}",1,"NodesAccessor -> Subgraph","[""node_id""]","Subgraph","(node_id)",20,"NodesAccessor","NodesAccessor",6
"Filter nodes by attribute value",219,"(attr_name, value)",false,"NodesTable.filter_by_attr","filter_by_attr","NodesTable","{}",2,"NodesTable -> Unknown","[""attr_name"", ""value""]","Unknown","(attr_name, value)",11,"NodesTable","NodesTable",21
"Check if empty",296,"()",false,"NumArray.is_empty","is_empty","NumArray","{}",0,"NumArray -> Unknown","[]","Unknown","()",26,"NumArray","NumArray",21
"Get all attribute keys for an edge - delegates to PyGraphAttr",18,"(edge_id)",false,"Graph.edge_attribute_keys","edge_attribute_keys","Graph","{}",1,"Graph -> GraphAttr","[""edge_id""]","GraphAttr","(edge_id)",5,"Graph","Graph",17
"Direct delegation: Apply neighborhood() to each component and return PySubgraphArray",464,"()",false,"ComponentsArray.neighborhood","neighborhood","ComponentsArray","{}",0,"ComponentsArray -> SubgraphArray","[]","SubgraphArray","()",14,"ComponentsArray","ComponentsArray",30
compressed_text,84,"(sep)",false,"AttrName.rpartition","rpartition","AttrName","{}",1,"AttrName -> str","[""sep""]","str","(sep, /)",10,"AttrName","AttrName",7
"Get edge endpoints (source, target)",338,"(edge_id)",false,"Subgraph.edge_endpoints","edge_endpoints","Subgraph","{}",1,"Subgraph -> Unknown","[""edge_id""]","Unknown","(edge_id)",6,"Subgraph","Subgraph",21
"Check if an edge exists in this subgraph",347,"(edge_id)",false,"Subgraph.has_edge","has_edge","Subgraph","{}",1,"Subgraph -> Subgraph","[""edge_id""]","Subgraph","(edge_id)",6,"Subgraph","Subgraph",6
"Convert table to SubgraphArray by creating subgraphs from table rows",213,"()",false,"GraphTable.to_subgraphs","to_subgraphs","GraphTable","{}",0,"GraphTable -> SubgraphArray","[]","SubgraphArray","()",33,"GraphTable","GraphTable",30
"Return a copy of the string converted to lowercase.",77,"()",false,"AttrName.lower","lower","AttrName","{}",0,"AttrName -> str","[]","str","()",10,"AttrName","AttrName",7
compressed_text,237,"(start, end)",false,"NodesTable.slice","slice","NodesTable","{}",2,"NodesTable -> NodesTable","[""start"", ""end""]","NodesTable","(start, end)",11,"NodesTable","NodesTable",11
"Import BaseTable from CSV file",102,"(path)",false,"BaseTable.from_csv","from_csv","BaseTable","{}",1,"BaseTable -> BaseTable","[""path""]","BaseTable","(path)",23,"BaseTable","BaseTable",23
"Convert to BaseTable (loses node-specific typing)",229,"()",false,"NodesTable.into_base_table","into_base_table","NodesTable","{}",0,"NodesTable -> BaseTable","[]","BaseTable","()",11,"NodesTable","NodesTable",23
"Get rich display representation using Rust formatter",115,"(config=None)",false,"BaseTable.rich_display","rich_display","BaseTable","{}",1,"BaseTable -> Unknown","[]","Unknown","(config=None)",23,"BaseTable","BaseTable",21
"Get neighbors of a node within the subgraph",360,"(node_id)",false,"Subgraph.neighbors","neighbors","Subgraph","{}",1,"Subgraph -> Subgraph","[""node_id""]","Subgraph","(node_id)",6,"Subgraph","Subgraph",6
"Aggregate attribute values across nodes or edges",5,"(attribute, operation, target=None, _node_ids=None)",false,"Graph.aggregate","aggregate","Graph","{}",4,"Graph -> Unknown","[""attribute"", ""operation""]","Unknown","(attribute, operation, target=None, _node_ids=None)",5,"Graph","Graph",21
"BFS traversal - returns subgraph result",324,"(start, max_depth=None)",false,"Subgraph.bfs","bfs","Subgraph","{}",2,"Subgraph -> Subgraph","[""start""]","Subgraph","(start, max_depth=None)",6,"Subgraph","Subgraph",6
compressed_text,76,"(width, fillchar= )",false,"AttrName.ljust","ljust","AttrName","{}",2,"AttrName -> str","[""width""]","str","(width, fillchar=' ', /)",10,"AttrName","AttrName",7
compressed_text,60,"(width, fillchar= )",false,"AttrName.center","center","AttrName","{}",2,"AttrName -> str","[""width""]","str","(width, fillchar=' ', /)",10,"AttrName","AttrName",7
"Set bulk node attributes - delegates to PyGraphAttrMut",51,"(attrs_dict)",false,"Graph.set_node_attrs","set_node_attrs","Graph","{}",1,"Graph -> GraphAttrMut","[""attrs_dict""]","GraphAttrMut","(attrs_dict)",5,"Graph","Graph",16
"Set single node attribute - delegates to PyGraphAttrMut",50,"(node, attr, value)",false,"Graph.set_node_attr","set_node_attr","Graph","{}",3,"Graph -> GraphAttrMut","[""node"", ""attr"", ""value""]","GraphAttrMut","(node, attr, value)",5,"Graph","Graph",16
"Get commit history (FFI wrapper around core history system)",12,"()",false,"Graph.commit_history","commit_history","Graph","{}",0,"Graph -> Commit","[]","Commit","()",5,"Graph","Graph",18
compressed_text,81,"(suffix)",false,"AttrName.removesuffix","removesuffix","AttrName","{}",1,"AttrName -> str","[""suffix""]","str","(suffix, /)",10,"AttrName","AttrName",7
"Get the last NodesAccessor  ",288,"()",false,"NodesArray.last","last","NodesArray","{}",0,"NodesArray -> NodesAccessor","[]","NodesAccessor","()",28,"NodesArray","NodesArray",20
compressed_text,163,"(table)",false,"BranchName.translate","translate","BranchName","{}",1,"BranchName -> dict","[""table""]","dict","(table, /)",22,"BranchName","BranchName",0
"QR decomposition: A = Q * R
Returns tuple of (Q, R) where Q is orthogonal and R is upper triangular",426,"()",false,"GraphMatrix.qr_decomposition","qr_decomposition","GraphMatrix","{}",0,"GraphMatrix -> Unknown","[]","Unknown","()",15,"GraphMatrix","GraphMatrix",21
"Create iterator for method chaining",311,"()",false,"SubgraphArray.iter","iter","SubgraphArray","{}",0,"SubgraphArray -> Unknown","[]","Unknown","()",30,"SubgraphArray","SubgraphArray",21
compressed_text,405,"()",false,"GraphMatrix.interactive_embed","interactive_embed","GraphMatrix","{}",0,"GraphMatrix -> str","[]","str","()",15,"GraphMatrix","GraphMatrix",7
compressed_text,139,"()",false,"BranchName.isidentifier","isidentifier","BranchName","{}",0,"BranchName -> str","[]","str","()",22,"BranchName","BranchName",7
compressed_text,98,"(column_name)",false,"BaseTable.column","column","BaseTable","{}",1,"BaseTable -> BaseArray","[""column_name""]","BaseArray","(column_name)",23,"BaseTable","BaseTable",27
"Export EdgesTable to JSON file",277,"(path)",false,"EdgesTable.to_json","to_json","EdgesTable","{}",1,"EdgesTable -> EdgesTable","[""path""]","EdgesTable","(path)",13,"EdgesTable","EdgesTable",13
"Check if edge has specific attribute - delegates to PyGraphAttr",31,"(edge_id, attr_name)",false,"Graph.has_edge_attribute","has_edge_attribute","Graph","{}",2,"Graph -> GraphAttr","[""edge_id"", ""attr_name""]","GraphAttr","(edge_id, attr_name)",5,"Graph","Graph",17
compressed_text,99,"()",false,"BaseTable.column_info","column_info","BaseTable","{}",0,"BaseTable -> dict","[]","dict","()",23,"BaseTable","BaseTable",0
"Convert table to EdgesAccessor by extracting edge IDs from the table",210,"()",false,"GraphTable.to_edges","to_edges","GraphTable","{}",0,"GraphTable -> EdgesAccessor","[]","EdgesAccessor","()",33,"GraphTable","GraphTable",9
compressed_text,135,"()",false,"BranchName.isalpha","isalpha","BranchName","{}",0,"BranchName -> str","[]","str","()",22,"BranchName","BranchName",7
"Get an EdgesTable representation of accessible edges
Implements: g.edges.table()  ",194,"()",false,"EdgesAccessor.table","table","EdgesAccessor","{}",0,"EdgesAccessor -> EdgesTable","[]","EdgesTable","()",9,"EdgesAccessor","EdgesAccessor",13
compressed_text,376,"()",false,"Subgraph.to_nodes","to_nodes","Subgraph","{}",0,"Subgraph -> Subgraph","[]","Subgraph","()",6,"Subgraph","Subgraph",6
"Element-wise absolute value",378,"()",false,"GraphMatrix.abs","abs","GraphMatrix","{}",0,"GraphMatrix -> Unknown","[]","Unknown","()",15,"GraphMatrix","GraphMatrix",21
compressed_text,117,"(column_name, values)",false,"BaseTable.set_column","set_column","BaseTable","{}",2,"BaseTable -> list","[""column_name"", ""values""]","list","(column_name, values)",23,"BaseTable","BaseTable",8
compressed_text,85,"(sep=None, maxsplit=-1)",false,"AttrName.rsplit","rsplit","AttrName","{}",2,"AttrName -> list","[]","list","(sep=None, maxsplit=-1)",10,"AttrName","AttrName",8
"Get source node IDs",273,"()",false,"EdgesTable.sources","sources","EdgesTable","{}",0,"EdgesTable -> Unknown","[]","Unknown","()",13,"EdgesTable","EdgesTable",21
"Softmax activation applied to matrix
Implements: matrix.softmax(dim=1)",436,"(dim=1)",false,"GraphMatrix.softmax","softmax","GraphMatrix","{}",1,"GraphMatrix -> Matrix","[]","Matrix","(dim=1)",15,"GraphMatrix","GraphMatrix",2
"BFS traversal - delegates to PyGraphAnalysis helper",8,"(start, max_depth=None, inplace=None, attr_name=None)",false,"Graph.bfs","bfs","Graph","{}",4,"Graph -> GraphAnalysis","[""start""]","GraphAnalysis","(start, max_depth=None, inplace=None, attr_name=None)",5,"Graph","Graph",24
"Helper method to resolve string ID to NodeId using uid_key attribute",47,"(string_id, uid_key)",false,"Graph.resolve_string_id_to_node","resolve_string_id_to_node","Graph","{}",2,"Graph -> str","[""string_id"", ""uid_key""]","str","(string_id, uid_key)",5,"Graph","Graph",7
"Convert edge attributes to matrix
Implements: g.edges.matrix()",192,"()",false,"EdgesAccessor.matrix","matrix","EdgesAccessor","{}",0,"EdgesAccessor -> Matrix","[]","Matrix","()",9,"EdgesAccessor","EdgesAccessor",2
compressed_text,2,"(other)",false,"Graph.add_graph","add_graph","Graph","{}",1,"Graph -> Graph","[""other""]","Graph","(other)",5,"Graph","Graph",5
"Cholesky decomposition: A = L * L^T
Returns L (lower triangular) for positive definite matrices",381,"()",false,"GraphMatrix.cholesky_decomposition","cholesky_decomposition","GraphMatrix","{}",0,"GraphMatrix -> Unknown","[]","Unknown","()",15,"GraphMatrix","GraphMatrix",21
"Get last n rows (default 5)",239,"(n=5)",false,"NodesTable.tail","tail","NodesTable","{}",1,"NodesTable -> Unknown","[]","Unknown","(n=5)",11,"NodesTable","NodesTable",21
"Remove a single node from the graph",45,"(node)",false,"Graph.remove_node","remove_node","Graph","{}",1,"Graph -> Graph","[""node""]","Graph","(node)",5,"Graph","Graph",5
"Export NodesTable to Parquet file ",243,"(path)",false,"NodesTable.to_parquet","to_parquet","NodesTable","{}",1,"NodesTable -> NodesTable","[""path""]","NodesTable","(path)",11,"NodesTable","NodesTable",11
"Filter edges by attribute value",252,"(attr_name, value)",false,"EdgesTable.filter_by_attr","filter_by_attr","EdgesTable","{}",2,"EdgesTable -> Unknown","[""attr_name"", ""value""]","Unknown","(attr_name, value)",13,"EdgesTable","EdgesTable",21
"Calculate the L∞ norm (maximum absolute value) of the matrix",421,"()",false,"GraphMatrix.norm_inf","norm_inf","GraphMatrix","{}",0,"GraphMatrix -> Matrix","[]","Matrix","()",15,"GraphMatrix","GraphMatrix",2
"Get shape as (rows, cols)",236,"()",false,"NodesTable.shape","shape","NodesTable","{}",0,"NodesTable -> Unknown","[]","Unknown","()",11,"NodesTable","NodesTable",21
compressed_text,88,"(keepends=False)",false,"AttrName.splitlines","splitlines","AttrName","{}",1,"AttrName -> list","[]","list","(keepends=False)",10,"AttrName","AttrName",8
"Get unique values for an attribute",244,"(attr_name)",false,"NodesTable.unique_attr_values","unique_attr_values","NodesTable","{}",1,"NodesTable -> Unknown","[""attr_name""]","Unknown","(attr_name)",11,"NodesTable","NodesTable",21
"Remove a single edge from the graph",43,"(edge)",false,"Graph.remove_edge","remove_edge","Graph","{}",1,"Graph -> Graph","[""edge""]","Graph","(edge)",5,"Graph","Graph",5
"Apply sample(k) to all subgraphs",312,"(k)",false,"SubgraphArray.sample","sample","SubgraphArray","{}",1,"SubgraphArray -> Unknown","[""k""]","Unknown","(k)",30,"SubgraphArray","SubgraphArray",21
"Get column by index as BaseArray (mixed types) or NumArray (if all numerical)",400,"(col)",false,"GraphMatrix.get_column","get_column","GraphMatrix","{}",1,"GraphMatrix -> BaseArray","[""col""]","BaseArray","(col)",15,"GraphMatrix","GraphMatrix",27
compressed_text,75,"(iterable)",false,"AttrName.join","join","AttrName","{}",1,"AttrName -> str","[""iterable""]","str","(iterable, /)",10,"AttrName","AttrName",7
"Get bulk edge attributes - delegates to PyGraphAttr",24,"(edges, attrs)",false,"Graph.get_edge_attrs","get_edge_attrs","Graph","{}",2,"Graph -> GraphAttr","[""edges"", ""attrs""]","GraphAttr","(edges, attrs)",5,"Graph","Graph",17
"Generate transition matrix - delegates to PyGraphMatrixHelper",56,"()",false,"Graph.transition_matrix","transition_matrix","Graph","{}",0,"Graph -> Matrix","[]","Matrix","()",5,"Graph","Graph",2
"Calculate clustering coefficient for a node or entire subgraph",327,"(_node_id=None)",false,"Subgraph.clustering_coefficient","clustering_coefficient","Subgraph","{}",1,"Subgraph -> Subgraph","[]","Subgraph","(_node_id=None)",6,"Subgraph","Subgraph",6
"Check if subgraph is empty",356,"()",false,"Subgraph.is_empty","is_empty","Subgraph","{}",0,"Subgraph -> Subgraph","[]","Subgraph","()",6,"Subgraph","Subgraph",6
"Get the number of nodes in the graph - DELEGATED",42,"()",false,"Graph.node_count","node_count","Graph","{}",0,"Graph -> float","[]","float","()",5,"Graph","Graph",1
"Get component sizes without materializing subgraphs",466,"()",false,"ComponentsArray.sizes","sizes","ComponentsArray","{}",0,"ComponentsArray -> Unknown","[]","Unknown","()",14,"ComponentsArray","ComponentsArray",21
compressed_text,71,"()",false,"AttrName.isprintable","isprintable","AttrName","{}",0,"AttrName -> str","[]","str","()",10,"AttrName","AttrName",7
compressed_text,374,"()",false,"Subgraph.to_matrix","to_matrix","Subgraph","{}",0,"Subgraph -> Subgraph","[]","Subgraph","()",6,"Subgraph","Subgraph",6
compressed_text,404,"()",false,"GraphMatrix.interactive","interactive","GraphMatrix","{}",0,"GraphMatrix -> str","[]","str","()",15,"GraphMatrix","GraphMatrix",7
"",354,"(_other)",false,"Subgraph.intersect_with","intersect_with","Subgraph","{}",1,"Subgraph -> Unknown","[""_other""]","Unknown","(_other)",6,"Subgraph","Subgraph",21
compressed_text,363,"()",false,"Subgraph.parent_meta_node","parent_meta_node","Subgraph","{}",0,"Subgraph -> dict","[]","dict","()",6,"Subgraph","Subgraph",0
"Get edge IDs",250,"()",false,"EdgesTable.edge_ids","edge_ids","EdgesTable","{}",0,"EdgesTable -> Unknown","[]","Unknown","()",13,"EdgesTable","EdgesTable",21
"Remove multiple nodes from the graph",46,"(nodes)",false,"Graph.remove_nodes","remove_nodes","Graph","{}",1,"Graph -> Graph","[""nodes""]","Graph","(nodes)",5,"Graph","Graph",5
"Add a single edge to the graph with support for string IDs and attributes",0,"(source, target, uid_key=None, kwargs)",false,"Graph.add_edge","add_edge","Graph","{}",4,"Graph -> str","[""source"", ""target"", ""kwargs""]","str","(source, target, uid_key=None, **kwargs)",5,"Graph","Graph",7
compressed_text,259,"(columns)",false,"EdgesTable.group_by","group_by","EdgesTable","{}",1,"EdgesTable -> list","[""columns""]","list","(columns)",13,"EdgesTable","EdgesTable",8
"Remove multiple edges from the graph",44,"(edges)",false,"Graph.remove_edges","remove_edges","Graph","{}",1,"Graph -> Graph","[""edges""]","Graph","(edges)",5,"Graph","Graph",5
"Get target node IDs  ",275,"()",false,"EdgesTable.targets","targets","EdgesTable","{}",0,"EdgesTable -> Unknown","[]","Unknown","()",13,"EdgesTable","EdgesTable",21
"Create a dense materialized version of the matrix",383,"()",false,"GraphMatrix.dense","dense","GraphMatrix","{}",0,"GraphMatrix -> Matrix","[]","Matrix","()",15,"GraphMatrix","GraphMatrix",2
compressed_text,80,"(prefix)",false,"AttrName.removeprefix","removeprefix","AttrName","{}",1,"AttrName -> str","[""prefix""]","str","(prefix, /)",10,"AttrName","AttrName",7
compressed_text,193,"(attrs_dict)",false,"EdgesAccessor.set_attrs","set_attrs","EdgesAccessor","{}",1,"EdgesAccessor -> Graph","[""attrs_dict""]","Graph","(attrs_dict)",9,"EdgesAccessor","EdgesAccessor",5
compressed_text,379,"(func)",false,"GraphMatrix.apply","apply","GraphMatrix","{}",1,"GraphMatrix -> Matrix","[""func""]","Matrix","(func)",15,"GraphMatrix","GraphMatrix",2
"Create a preset configuration for interactive exploration",179,"(port=None)",false,"VizConfig.interactive","interactive","VizConfig","{}",1,"VizConfig -> Unknown","[]","Unknown","(port=None)",25,"VizConfig","VizConfig",21
"Check if there are uncommitted changes (FFI wrapper around core history system)",34,"()",false,"Graph.has_uncommitted_changes","has_uncommitted_changes","Graph","{}",0,"Graph -> Unknown","[]","Unknown","()",5,"Graph","Graph",21
"Get unique values as a new NumArray",306,"()",false,"NumArray.unique","unique","NumArray","{}",0,"NumArray -> NumArray","[]","NumArray","()",26,"NumArray","NumArray",26
compressed_text,101,"(predicate)",false,"BaseTable.filter","filter","BaseTable","{}",1,"BaseTable -> str","[""predicate""]","str","(predicate)",23,"BaseTable","BaseTable",7
compressed_text,174,"(length, byteorder, signed=False)",false,"NodeId.to_bytes","to_bytes","NodeId","{}",3,"NodeId -> list","[""length"", ""byteorder""]","list","(length, byteorder, *, signed=False)",3,"NodeId","NodeId",8
compressed_text,200,"(bundle_path)",false,"GraphTable.load_bundle","load_bundle","GraphTable","{}",1,"GraphTable -> Graph","[""bundle_path""]","Graph","(bundle_path)",33,"GraphTable","GraphTable",5
"Export NodesTable to JSON file",241,"(path)",false,"NodesTable.to_json","to_json","NodesTable","{}",1,"NodesTable -> NodesTable","[""path""]","NodesTable","(path)",11,"NodesTable","NodesTable",11
"Convert to NumPy array (when numpy available)
Uses .data property to materialize data",454,"()",false,"GraphMatrix.to_numpy","to_numpy","GraphMatrix","{}",0,"GraphMatrix -> list","[]","list","()",15,"GraphMatrix","GraphMatrix",8
compressed_text,63,"()",false,"AttrName.isalnum","isalnum","AttrName","{}",0,"AttrName -> str","[]","str","()",10,"AttrName","AttrName",7
compressed_text,178,"(length, byteorder, signed=False)",false,"StateId.to_bytes","to_bytes","StateId","{}",3,"StateId -> list","[""length"", ""byteorder""]","list","(length, byteorder, *, signed=False)",19,"StateId","StateId",8
"Get node IDs",232,"()",false,"NodesTable.node_ids","node_ids","NodesTable","{}",0,"NodesTable -> Unknown","[]","Unknown","()",11,"NodesTable","NodesTable",21
"Create EdgesTable from a Python dictionary (must contain 'edge_id', 'source', 'target' columns)",256,"(data)",false,"EdgesTable.from_dict","from_dict","EdgesTable","{}",1,"EdgesTable -> dict","[""data""]","dict","(data)",13,"EdgesTable","EdgesTable",0
compressed_text,168,"()",false,"EdgeId.bit_length","bit_length","EdgeId","{}",0,"EdgeId -> float","[]","float","()",12,"EdgeId","EdgeId",1
compressed_text,116,"(columns)",false,"BaseTable.select","select","BaseTable","{}",1,"BaseTable -> list","[""columns""]","list","(columns)",23,"BaseTable","BaseTable",8
compressed_text,151,"(prefix)",false,"BranchName.removeprefix","removeprefix","BranchName","{}",1,"BranchName -> str","[""prefix""]","str","(prefix, /)",22,"BranchName","BranchName",7
compressed_text,94,"(width)",false,"AttrName.zfill","zfill","AttrName","{}",1,"AttrName -> str","[""width""]","str","(width, /)",10,"AttrName","AttrName",7
"Check if the graph is connected (delegates to subgraph implementation)",36,"()",false,"Graph.is_connected","is_connected","Graph","{}",0,"Graph -> Graph","[]","Graph","()",5,"Graph","Graph",5
compressed_text,326,"()",false,"Subgraph.child_meta_nodes","child_meta_nodes","Subgraph","{}",0,"Subgraph -> list","[]","list","()",6,"Subgraph","Subgraph",8
"Calculate the Frobenius norm (Euclidean norm) of the matrix",420,"()",false,"GraphMatrix.norm","norm","GraphMatrix","{}",0,"GraphMatrix -> Matrix","[]","Matrix","()",15,"GraphMatrix","GraphMatrix",2
compressed_text,62,"(tabsize=8)",false,"AttrName.expandtabs","expandtabs","AttrName","{}",1,"AttrName -> Unknown","[]","Unknown","(tabsize=8)",10,"AttrName","AttrName",21
"Get neighborhood sampling - delegates to PyGraphAnalysis helper",38,"(center_nodes, radius=None, max_nodes=None)",false,"Graph.neighborhood","neighborhood","Graph","{}",3,"Graph -> GraphAnalysis","[""center_nodes""]","GraphAnalysis","(center_nodes, radius=None, max_nodes=None)",5,"Graph","Graph",24
"Get a single edge attribute value",343,"(edge_id, attr_name)",false,"Subgraph.get_edge_attribute","get_edge_attribute","Subgraph","{}",2,"Subgraph -> Unknown","[""edge_id"", ""attr_name""]","Unknown","(edge_id, attr_name)",6,"Subgraph","Subgraph",21
"Create subgraph from list of edges",368,"(edges)",false,"Subgraph.subgraph_from_edges","subgraph_from_edges","Subgraph","{}",1,"Subgraph -> list","[""edges""]","list","(edges)",6,"Subgraph","Subgraph",8
compressed_text,138,"()",false,"BranchName.isdigit","isdigit","BranchName","{}",0,"BranchName -> str","[]","str","()",22,"BranchName","BranchName",7
"Sum along specified axis (0=rows, 1=columns)",443,"(axis)",false,"GraphMatrix.sum_axis","sum_axis","GraphMatrix","{}",1,"GraphMatrix -> Unknown","[""axis""]","Unknown","(axis)",15,"GraphMatrix","GraphMatrix",21
"",4,"(data, uid_key=None)",false,"Graph.add_nodes","add_nodes","Graph","{}",2,"Graph -> Unknown","[""data""]","Unknown","(data, uid_key=None)",5,"Graph","Graph",21
"Calculate graph density (number of edges / number of possible edges) - PURE DELEGATION",16,"()",false,"Graph.density","density","Graph","{}",0,"Graph -> float","[]","float","()",5,"Graph","Graph",1
"Export BaseTable to CSV file",124,"(path)",false,"BaseTable.to_csv","to_csv","BaseTable","{}",1,"BaseTable -> BaseTable","[""path""]","BaseTable","(path)",23,"BaseTable","BaseTable",23
"Convert to Pandas DataFrame (when pandas available)",455,"()",false,"GraphMatrix.to_pandas","to_pandas","GraphMatrix","{}",0,"GraphMatrix -> Unknown","[]","Unknown","()",15,"GraphMatrix","GraphMatrix",21
"Get shape as (rows, cols)",207,"()",false,"GraphTable.shape","shape","GraphTable","{}",0,"GraphTable -> Unknown","[]","Unknown","()",33,"GraphTable","GraphTable",21
"Calculate the trace (sum of diagonal elements) - only for square matrices",457,"()",false,"GraphMatrix.trace","trace","GraphMatrix","{}",0,"GraphMatrix -> Unknown","[]","Unknown","()",15,"GraphMatrix","GraphMatrix",21
"Check if subgraph contains a specific edge (alias for has_edge)  ",332,"(edge_id)",false,"Subgraph.contains_edge","contains_edge","Subgraph","{}",1,"Subgraph -> Subgraph","[""edge_id""]","Subgraph","(edge_id)",6,"Subgraph","Subgraph",6
"Set single edge attribute - delegates to PyGraphAttrMut",48,"(edge, attr, value)",false,"Graph.set_edge_attr","set_edge_attr","Graph","{}",3,"Graph -> GraphAttrMut","[""edge"", ""attr"", ""value""]","GraphAttrMut","(edge, attr, value)",5,"Graph","Graph",16
compressed_text,215,"(bundle_path)",false,"GraphTable.verify_bundle","verify_bundle","GraphTable","{}",1,"GraphTable -> dict","[""bundle_path""]","dict","(bundle_path)",33,"GraphTable","GraphTable",0
compressed_text,346,"(attr_name, element_type)",false,"Subgraph.group_by","group_by","Subgraph","{}",2,"Subgraph -> list","[""attr_name"", ""element_type""]","list","(attr_name, element_type)",6,"Subgraph","Subgraph",8
compressed_text,78,"(chars=None)",false,"AttrName.lstrip","lstrip","AttrName","{}",1,"AttrName -> str","[]","str","(chars=None, /)",10,"AttrName","AttrName",7
"Variance along specified axis (0=rows, 1=columns)",459,"(axis)",false,"GraphMatrix.var_axis","var_axis","GraphMatrix","{}",1,"GraphMatrix -> Unknown","[""axis""]","Unknown","(axis)",15,"GraphMatrix","GraphMatrix",21
compressed_text,140,"()",false,"BranchName.islower","islower","BranchName","{}",0,"BranchName -> str","[]","str","()",22,"BranchName","BranchName",7
compressed_text,144,"()",false,"BranchName.istitle","istitle","BranchName","{}",0,"BranchName -> str","[]","str","()",22,"BranchName","BranchName",7
compressed_text,129,"()",false,"BranchName.capitalize","capitalize","BranchName","{}",0,"BranchName -> str","[]","str","()",22,"BranchName","BranchName",7
"Matrix power - raise matrix to integer power
Returns: new GraphMatrix that is self^n",424,"(n)",false,"GraphMatrix.power","power","GraphMatrix","{}",1,"GraphMatrix -> int","[""n""]","int","(n)",15,"GraphMatrix","GraphMatrix",32
"Validate the GraphTable and return report",214,"()",false,"GraphTable.validate","validate","GraphTable","{}",0,"GraphTable -> GraphTable","[]","GraphTable","()",33,"GraphTable","GraphTable",33
compressed_text,330,"(agg_functions, defaults=None)",false,"Subgraph.collapse_to_node_with_defaults","collapse_to_node_with_defaults","Subgraph","{}",2,"Subgraph -> dict","[""agg_functions""]","dict","(agg_functions, defaults=None)",6,"Subgraph","Subgraph",0
"Edge count property",337,"()",false,"Subgraph.edge_count","edge_count","Subgraph","{}",0,"Subgraph -> Unknown","[]","Unknown","()",6,"Subgraph","Subgraph",21
"Check if this subgraph is connected",355,"()",false,"Subgraph.is_connected","is_connected","Subgraph","{}",0,"Subgraph -> Subgraph","[]","Subgraph","()",6,"Subgraph","Subgraph",6
"Global mean of all elements in the matrix  ",415,"()",false,"GraphMatrix.mean","mean","GraphMatrix","{}",0,"GraphMatrix -> Matrix","[]","Matrix","()",15,"GraphMatrix","GraphMatrix",2
compressed_text,170,"(length, byteorder, signed=False)",false,"EdgeId.to_bytes","to_bytes","EdgeId","{}",3,"EdgeId -> list","[""length"", ""byteorder""]","list","(length, byteorder, *, signed=False)",12,"EdgeId","EdgeId",8
compressed_text,447,"(reps)",false,"GraphMatrix.tile","tile","GraphMatrix","{}",1,"GraphMatrix -> float","[""reps""]","float","(reps)",15,"GraphMatrix","GraphMatrix",1
compressed_text,147,"(width, fillchar= )",false,"BranchName.ljust","ljust","BranchName","{}",2,"BranchName -> str","[""width""]","str","(width, fillchar=' ', /)",22,"BranchName","BranchName",7
compressed_text,68,"()",false,"AttrName.isidentifier","isidentifier","AttrName","{}",0,"AttrName -> str","[]","str","()",10,"AttrName","AttrName",7
"Get number of total rows (nodes + edges)",205,"()",false,"GraphTable.nrows","nrows","GraphTable","{}",0,"GraphTable -> float","[]","float","()",33,"GraphTable","GraphTable",1