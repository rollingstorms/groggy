diff --git a/jupyter_viz_wrapper_demo.ipynb b/jupyter_viz_wrapper_demo.ipynb
index 18713fe4..4c03683a 100644
--- a/jupyter_viz_wrapper_demo.ipynb
+++ b/jupyter_viz_wrapper_demo.ipynb
@@ -469,138 +469,138 @@
      "name": "stderr",
      "output_type": "stream",
      "text": [
-      "🚀 DEBUG: VizAccessor.show() called with layout='circular' and kwargs: None\n",
-      "📊 DEBUG: DataSource ID: 0x16b97a940\n",
-      "📊 DEBUG: Final layout parameters: algorithm='circular', params={}\n",
+      "🚀 DEBUG: VizAccessor.show() called with layout='honeycomb' and kwargs: None\n",
+      "📊 DEBUG: DataSource ID: 0x16d33a940\n",
+      "📊 DEBUG: Final layout parameters: algorithm='honeycomb', params={}\n",
       "🆕 DEBUG: No existing server found - creating new server\n",
       "✅ DEBUG: Found user's GraphDataSource - implementing Phase 1 integration\n",
-      "⭕ DEBUG: Creating Circular layout: radius=None, start_angle=0\n",
+      "🔶 DEBUG: Creating Honeycomb layout: cell_size=40, energy_optimization=true, iterations=100\n",
       "🔧 DEBUG: Created DataSourceRealtimeAccessor\n",
       "🔧 DEBUG: DataSourceRealtimeAccessor creating initial snapshot\n",
       "🔧 DEBUG: Converting nodes - supports_graph_view: true\n",
       "📊 DEBUG: DataSource returned 34 graph nodes\n",
-      "🔧 DEBUG: Converting node '19' to id 19\n",
-      "🔧 DEBUG: Converting node '7' to id 7\n",
+      "🔧 DEBUG: Converting node '25' to id 25\n",
+      "🔧 DEBUG: Converting node '27' to id 27\n",
+      "🔧 DEBUG: Converting node '9' to id 9\n",
       "🔧 DEBUG: Converting node '33' to id 33\n",
-      "🔧 DEBUG: Converting node '11' to id 11\n",
-      "🔧 DEBUG: Converting node '1' to id 1\n",
-      "🔧 DEBUG: Converting node '0' to id 0\n",
       "🔧 DEBUG: Converting node '23' to id 23\n",
-      "🔧 DEBUG: Converting node '21' to id 21\n",
-      "🔧 DEBUG: Converting node '4' to id 4\n",
-      "🔧 DEBUG: Converting node '5' to id 5\n",
-      "🔧 DEBUG: Converting node '13' to id 13\n",
-      "🔧 DEBUG: Converting node '12' to id 12\n",
-      "🔧 DEBUG: Converting node '26' to id 26\n",
-      "🔧 DEBUG: Converting node '22' to id 22\n",
-      "🔧 DEBUG: Converting node '24' to id 24\n",
+      "🔧 DEBUG: Converting node '6' to id 6\n",
+      "🔧 DEBUG: Converting node '10' to id 10\n",
       "🔧 DEBUG: Converting node '2' to id 2\n",
-      "🔧 DEBUG: Converting node '18' to id 18\n",
-      "🔧 DEBUG: Converting node '32' to id 32\n",
-      "🔧 DEBUG: Converting node '3' to id 3\n",
-      "🔧 DEBUG: Converting node '27' to id 27\n",
+      "🔧 DEBUG: Converting node '4' to id 4\n",
       "🔧 DEBUG: Converting node '17' to id 17\n",
-      "🔧 DEBUG: Converting node '20' to id 20\n",
       "🔧 DEBUG: Converting node '8' to id 8\n",
-      "🔧 DEBUG: Converting node '9' to id 9\n",
+      "🔧 DEBUG: Converting node '26' to id 26\n",
+      "🔧 DEBUG: Converting node '12' to id 12\n",
+      "🔧 DEBUG: Converting node '21' to id 21\n",
+      "🔧 DEBUG: Converting node '31' to id 31\n",
+      "🔧 DEBUG: Converting node '11' to id 11\n",
+      "🔧 DEBUG: Converting node '16' to id 16\n",
+      "🔧 DEBUG: Converting node '24' to id 24\n",
+      "🔧 DEBUG: Converting node '5' to id 5\n",
       "🔧 DEBUG: Converting node '14' to id 14\n",
+      "🔧 DEBUG: Converting node '19' to id 19\n",
+      "🔧 DEBUG: Converting node '7' to id 7\n",
+      "🔧 DEBUG: Converting node '32' to id 32\n",
+      "🔧 DEBUG: Converting node '13' to id 13\n",
       "🔧 DEBUG: Converting node '28' to id 28\n",
-      "🔧 DEBUG: Converting node '10' to id 10\n",
-      "🔧 DEBUG: Converting node '31' to id 31\n",
-      "🔧 DEBUG: Converting node '15' to id 15\n",
       "🔧 DEBUG: Converting node '29' to id 29\n",
-      "🔧 DEBUG: Converting node '16' to id 16\n",
+      "🔧 DEBUG: Converting node '15' to id 15\n",
+      "🔧 DEBUG: Converting node '22' to id 22\n",
+      "🔧 DEBUG: Converting node '18' to id 18\n",
+      "🔧 DEBUG: Converting node '0' to id 0\n",
       "🔧 DEBUG: Converting node '30' to id 30\n",
-      "🔧 DEBUG: Converting node '6' to id 6\n",
-      "🔧 DEBUG: Converting node '25' to id 25\n",
+      "🔧 DEBUG: Converting node '20' to id 20\n",
+      "🔧 DEBUG: Converting node '3' to id 3\n",
+      "🔧 DEBUG: Converting node '1' to id 1\n",
       "✅ DEBUG: Converted 34 nodes for engine\n",
-      "��� DEBUG: Converting edges - supports_graph_view: true\n",
+      "🔧 DEBUG: Converting edges - supports_graph_view: true\n",
       "📊 DEBUG: DataSource returned 78 graph edges\n",
-      "🔧 DEBUG: Converting edge 0 '2' -> '27' to 2 -> 27\n",
-      "🔧 DEBUG: Converting edge 1 '0' -> '4' to 0 -> 4\n",
-      "🔧 DEBUG: Converting edge 2 '1' -> '21' to 1 -> 21\n",
-      "🔧 DEBUG: Converting edge 3 '23' -> '25' to 23 -> 25\n",
-      "🔧 DEBUG: Converting edge 4 '3' -> '13' to 3 -> 13\n",
-      "🔧 DEBUG: Converting edge 5 '20' -> '33' to 20 -> 33\n",
-      "🔧 DEBUG: Converting edge 6 '0' -> '17' to 0 -> 17\n",
-      "🔧 DEBUG: Converting edge 7 '2' -> '13' to 2 -> 13\n",
-      "🔧 DEBUG: Converting edge 8 '28' -> '33' to 28 -> 33\n",
-      "🔧 DEBUG: Converting edge 9 '26' -> '29' to 26 -> 29\n",
-      "🔧 DEBUG: Converting edge 10 '23' -> '29' to 23 -> 29\n",
-      "🔧 DEBUG: Converting edge 11 '0' -> '1' to 0 -> 1\n",
-      "🔧 DEBUG: Converting edge 12 '8' -> '33' to 8 -> 33\n",
-      "🔧 DEBUG: Converting edge 13 '18' -> '33' to 18 -> 33\n",
-      "🔧 DEBUG: Converting edge 14 '0' -> '8' to 0 -> 8\n",
-      "🔧 DEBUG: Converting edge 15 '30' -> '33' to 30 -> 33\n",
-      "🔧 DEBUG: Converting edge 16 '22' -> '32' to 22 -> 32\n",
-      "🔧 DEBUG: Converting edge 17 '1' -> '2' to 1 -> 2\n",
-      "🔧 DEBUG: Converting edge 18 '13' -> '33' to 13 -> 33\n",
-      "🔧 DEBUG: Converting edge 19 '1' -> '3' to 1 -> 3\n",
-      "🔧 DEBUG: Converting edge 20 '27' -> '33' to 27 -> 33\n",
-      "🔧 DEBUG: Converting edge 21 '23' -> '33' to 23 -> 33\n",
-      "🔧 DEBUG: Converting edge 22 '23' -> '32' to 23 -> 32\n",
-      "🔧 DEBUG: Converting edge 23 '0' -> '19' to 0 -> 19\n",
-      "🔧 DEBUG: Converting edge 24 '2' -> '32' to 2 -> 32\n",
-      "🔧 DEBUG: Converting edge 25 '14' -> '32' to 14 -> 32\n",
-      "🔧 DEBUG: Converting edge 26 '2' -> '28' to 2 -> 28\n",
-      "🔧 DEBUG: Converting edge 27 '5' -> '10' to 5 -> 10\n",
-      "🔧 DEBUG: Converting edge 28 '1' -> '19' to 1 -> 19\n",
-      "🔧 DEBUG: Converting edge 29 '8' -> '30' to 8 -> 30\n",
-      "🔧 DEBUG: Converting edge 30 '5' -> '16' to 5 -> 16\n",
-      "🔧 DEBUG: Converting edge 31 '4' -> '10' to 4 -> 10\n",
-      "🔧 DEBUG: Converting edge 32 '20' -> '32' to 20 -> 32\n",
-      "🔧 DEBUG: Converting edge 33 '3' -> '7' to 3 -> 7\n",
-      "🔧 DEBUG: Converting edge 34 '2' -> '7' to 2 -> 7\n",
-      "🔧 DEBUG: Converting edge 35 '9' -> '33' to 9 -> 33\n",
-      "🔧 DEBUG: Converting edge 36 '23' -> '27' to 23 -> 27\n",
-      "🔧 DEBUG: Converting edge 37 '0' -> '13' to 0 -> 13\n",
-      "🔧 DEBUG: Converting edge 38 '1' -> '7' to 1 -> 7\n",
-      "🔧 DEBUG: Converting edge 39 '0' -> '2' to 0 -> 2\n",
-      "🔧 DEBUG: Converting edge 40 '0' -> '7' to 0 -> 7\n",
-      "🔧 DEBUG: Converting edge 41 '0' -> '5' to 0 -> 5\n",
-      "🔧 DEBUG: Converting edge 42 '24' -> '31' to 24 -> 31\n",
-      "🔧 DEBUG: Converting edge 43 '19' -> '33' to 19 -> 33\n",
-      "🔧 DEBUG: Converting edge 44 '5' -> '6' to 5 -> 6\n",
-      "🔧 DEBUG: Converting edge 45 '25' -> '31' to 25 -> 31\n",
-      "🔧 DEBUG: Converting edge 46 '3' -> '12' to 3 -> 12\n",
-      "🔧 DEBUG: Converting edge 47 '0' -> '3' to 0 -> 3\n",
-      "🔧 DEBUG: Converting edge 48 '31' -> '32' to 31 -> 32\n",
-      "🔧 DEBUG: Converting edge 49 '24' -> '27' to 24 -> 27\n",
-      "🔧 DEBUG: Converting edge 50 '30' -> '32' to 30 -> 32\n",
-      "🔧 DEBUG: Converting edge 51 '14' -> '33' to 14 -> 33\n",
-      "🔧 DEBUG: Converting edge 52 '6' -> '16' to 6 -> 16\n",
-      "🔧 DEBUG: Converting edge 53 '24' -> '25' to 24 -> 25\n",
-      "🔧 DEBUG: Converting edge 54 '0' -> '31' to 0 -> 31\n",
-      "🔧 DEBUG: Converting edge 55 '0' -> '10' to 0 -> 10\n",
-      "🔧 DEBUG: Converting edge 56 '2' -> '3' to 2 -> 3\n",
-      "🔧 DEBUG: Converting edge 57 '18' -> '32' to 18 -> 32\n",
-      "🔧 DEBUG: Converting edge 58 '0' -> '6' to 0 -> 6\n",
-      "🔧 DEBUG: Converting edge 59 '4' -> '6' to 4 -> 6\n",
-      "🔧 DEBUG: Converting edge 60 '2' -> '9' to 2 -> 9\n",
-      "🔧 DEBUG: Converting edge 61 '32' -> '33' to 32 -> 33\n",
-      "🔧 DEBUG: Converting edge 62 '26' -> '33' to 26 -> 33\n",
-      "🔧 DEBUG: Converting edge 63 '22' -> '33' to 22 -> 33\n",
-      "🔧 DEBUG: Converting edge 64 '0' -> '21' to 0 -> 21\n",
-      "🔧 DEBUG: Converting edge 65 '15' -> '32' to 15 -> 32\n",
-      "🔧 DEBUG: Converting edge 66 '15' -> '33' to 15 -> 33\n",
-      "🔧 DEBUG: Converting edge 67 '0' -> '12' to 0 -> 12\n",
-      "🔧 DEBUG: Converting edge 68 '1' -> '30' to 1 -> 30\n",
-      "🔧 DEBUG: Converting edge 69 '1' -> '17' to 1 -> 17\n",
-      "🔧 DEBUG: Converting edge 70 '2' -> '8' to 2 -> 8\n",
-      "🔧 DEBUG: Converting edge 71 '29' -> '33' to 29 -> 33\n",
-      "🔧 DEBUG: Converting edge 72 '31' -> '33' to 31 -> 33\n",
-      "🔧 DEBUG: Converting edge 73 '1' -> '13' to 1 -> 13\n",
-      "🔧 DEBUG: Converting edge 74 '8' -> '32' to 8 -> 32\n",
-      "🔧 DEBUG: Converting edge 75 '0' -> '11' to 0 -> 11\n",
-      "🔧 DEBUG: Converting edge 76 '28' -> '31' to 28 -> 31\n",
-      "🔧 DEBUG: Converting edge 77 '29' -> '32' to 29 -> 32\n",
+      "🔧 DEBUG: Converting edge 0 '9' -> '33' to 9 -> 33\n",
+      "🔧 DEBUG: Converting edge 1 '31' -> '33' to 31 -> 33\n",
+      "🔧 DEBUG: Converting edge 2 '4' -> '6' to 4 -> 6\n",
+      "🔧 DEBUG: Converting edge 3 '0' -> '31' to 0 -> 31\n",
+      "🔧 DEBUG: Converting edge 4 '1' -> '19' to 1 -> 19\n",
+      "🔧 DEBUG: Converting edge 5 '2' -> '32' to 2 -> 32\n",
+      "🔧 DEBUG: Converting edge 6 '5' -> '6' to 5 -> 6\n",
+      "🔧 DEBUG: Converting edge 7 '0' -> '2' to 0 -> 2\n",
+      "🔧 DEBUG: Converting edge 8 '23' -> '29' to 23 -> 29\n",
+      "🔧 DEBUG: Converting edge 9 '15' -> '32' to 15 -> 32\n",
+      "🔧 DEBUG: Converting edge 10 '0' -> '1' to 0 -> 1\n",
+      "🔧 DEBUG: Converting edge 11 '28' -> '31' to 28 -> 31\n",
+      "🔧 DEBUG: Converting edge 12 '4' -> '10' to 4 -> 10\n",
+      "🔧 DEBUG: Converting edge 13 '29' -> '32' to 29 -> 32\n",
+      "🔧 DEBUG: Converting edge 14 '32' -> '33' to 32 -> 33\n",
+      "🔧 DEBUG: Converting edge 15 '2' -> '8' to 2 -> 8\n",
+      "🔧 DEBUG: Converting edge 16 '18' -> '33' to 18 -> 33\n",
+      "🔧 DEBUG: Converting edge 17 '27' -> '33' to 27 -> 33\n",
+      "🔧 DEBUG: Converting edge 18 '22' -> '32' to 22 -> 32\n",
+      "🔧 DEBUG: Converting edge 19 '31' -> '32' to 31 -> 32\n",
+      "🔧 DEBUG: Converting edge 20 '0' -> '10' to 0 -> 10\n",
+      "🔧 DEBUG: Converting edge 21 '0' -> '12' to 0 -> 12\n",
+      "🔧 DEBUG: Converting edge 22 '20' -> '32' to 20 -> 32\n",
+      "🔧 DEBUG: Converting edge 23 '18' -> '32' to 18 -> 32\n",
+      "🔧 DEBUG: Converting edge 24 '0' -> '21' to 0 -> 21\n",
+      "🔧 DEBUG: Converting edge 25 '2' -> '9' to 2 -> 9\n",
+      "🔧 DEBUG: Converting edge 26 '24' -> '25' to 24 -> 25\n",
+      "🔧 DEBUG: Converting edge 27 '2' -> '27' to 2 -> 27\n",
+      "🔧 DEBUG: Converting edge 28 '1' -> '3' to 1 -> 3\n",
+      "🔧 DEBUG: Converting edge 29 '0' -> '4' to 0 -> 4\n",
+      "🔧 DEBUG: Converting edge 30 '1' -> '17' to 1 -> 17\n",
+      "🔧 DEBUG: Converting edge 31 '26' -> '29' to 26 -> 29\n",
+      "🔧 DEBUG: Converting edge 32 '5' -> '10' to 5 -> 10\n",
+      "🔧 DEBUG: Converting edge 33 '14' -> '32' to 14 -> 32\n",
+      "🔧 DEBUG: Converting edge 34 '8' -> '32' to 8 -> 32\n",
+      "🔧 DEBUG: Converting edge 35 '3' -> '7' to 3 -> 7\n",
+      "🔧 DEBUG: Converting edge 36 '1' -> '2' to 1 -> 2\n",
+      "🔧 DEBUG: Converting edge 37 '1' -> '13' to 1 -> 13\n",
+      "🔧 DEBUG: Converting edge 38 '3' -> '12' to 3 -> 12\n",
+      "🔧 DEBUG: Converting edge 39 '3' -> '13' to 3 -> 13\n",
+      "🔧 DEBUG: Converting edge 40 '2' -> '7' to 2 -> 7\n",
+      "🔧 DEBUG: Converting edge 41 '23' -> '32' to 23 -> 32\n",
+      "🔧 DEBUG: Converting edge 42 '6' -> '16' to 6 -> 16\n",
+      "🔧 DEBUG: Converting edge 43 '0' -> '11' to 0 -> 11\n",
+      "🔧 DEBUG: Converting edge 44 '25' -> '31' to 25 -> 31\n",
+      "🔧 DEBUG: Converting edge 45 '0' -> '6' to 0 -> 6\n",
+      "🔧 DEBUG: Converting edge 46 '2' -> '3' to 2 -> 3\n",
+      "🔧 DEBUG: Converting edge 47 '22' -> '33' to 22 -> 33\n",
+      "🔧 DEBUG: Converting edge 48 '30' -> '33' to 30 -> 33\n",
+      "🔧 DEBUG: Converting edge 49 '28' -> '33' to 28 -> 33\n",
+      "🔧 DEBUG: Converting edge 50 '5' -> '16' to 5 -> 16\n",
+      "🔧 DEBUG: Converting edge 51 '8' -> '30' to 8 -> 30\n",
+      "🔧 DEBUG: Converting edge 52 '14' -> '33' to 14 -> 33\n",
+      "🔧 DEBUG: Converting edge 53 '0' -> '19' to 0 -> 19\n",
+      "🔧 DEBUG: Converting edge 54 '0' -> '13' to 0 -> 13\n",
+      "🔧 DEBUG: Converting edge 55 '23' -> '33' to 23 -> 33\n",
+      "🔧 DEBUG: Converting edge 56 '2' -> '13' to 2 -> 13\n",
+      "🔧 DEBUG: Converting edge 57 '0' -> '8' to 0 -> 8\n",
+      "🔧 DEBUG: Converting edge 58 '15' -> '33' to 15 -> 33\n",
+      "🔧 DEBUG: Converting edge 59 '1' -> '30' to 1 -> 30\n",
+      "🔧 DEBUG: Converting edge 60 '24' -> '27' to 24 -> 27\n",
+      "🔧 DEBUG: Converting edge 61 '0' -> '7' to 0 -> 7\n",
+      "🔧 DEBUG: Converting edge 62 '29' -> '33' to 29 -> 33\n",
+      "🔧 DEBUG: Converting edge 63 '30' -> '32' to 30 -> 32\n",
+      "🔧 DEBUG: Converting edge 64 '8' -> '33' to 8 -> 33\n",
+      "🔧 DEBUG: Converting edge 65 '26' -> '33' to 26 -> 33\n",
+      "🔧 DEBUG: Converting edge 66 '0' -> '17' to 0 -> 17\n",
+      "🔧 DEBUG: Converting edge 67 '1' -> '21' to 1 -> 21\n",
+      "🔧 DEBUG: Converting edge 68 '1' -> '7' to 1 -> 7\n",
+      "🔧 DEBUG: Converting edge 69 '13' -> '33' to 13 -> 33\n",
+      "🔧 DEBUG: Converting edge 70 '0' -> '5' to 0 -> 5\n",
+      "🔧 DEBUG: Converting edge 71 '23' -> '27' to 23 -> 27\n",
+      "🔧 DEBUG: Converting edge 72 '23' -> '25' to 23 -> 25\n",
+      "🔧 DEBUG: Converting edge 73 '2' -> '28' to 2 -> 28\n",
+      "🔧 DEBUG: Converting edge 74 '20' -> '33' to 20 -> 33\n",
+      "🔧 DEBUG: Converting edge 75 '24' -> '31' to 24 -> 31\n",
+      "🔧 DEBUG: Converting edge 76 '19' -> '33' to 19 -> 33\n",
+      "🔧 DEBUG: Converting edge 77 '0' -> '3' to 0 -> 3\n",
       "✅ DEBUG: Converted 78 edges for engine\n",
       "✅ DEBUG: Snapshot created - 34 nodes, 78 edges, 34 positions\n",
       "📊 DEBUG: Got snapshot: 34 nodes, 78 edges\n",
       "🚀 DEBUG: Starting Phase 2 realtime server with accessor\n",
       "🔍 DEBUG: Port 8080 is available\n",
       "🔍 DEBUG: Found available port: 8080 (searched from 8080)\n",
-      "📝 DEBUG: Registered server on port 8080 for data source 0x16b97a940\n",
+      "📝 DEBUG: Registered server on port 8080 for data source 0x16d33a940\n",
       "🚀 DEBUG: Starting realtime server using streaming server pattern\n",
       "🚀 DEBUG: Created realtime server on port 8080 with accessor\n",
       "✅ DEBUG: Realtime server created on port 8080\n",
@@ -608,126 +608,126 @@
       "🔧 DEBUG: DataSourceRealtimeAccessor creating initial snapshot\n",
       "🔧 DEBUG: Converting nodes - supports_graph_view: true\n",
       "📊 DEBUG: DataSource returned 34 graph nodes\n",
-      "🔧 DEBUG: Converting node '19' to id 19\n",
-      "🔧 DEBUG: Converting node '7' to id 7\n",
+      "🔧 DEBUG: Converting node '25' to id 25\n",
+      "🔧 DEBUG: Converting node '27' to id 27\n",
+      "🔧 DEBUG: Converting node '9' to id 9\n",
       "🔧 DEBUG: Converting node '33' to id 33\n",
-      "🔧 DEBUG: Converting node '11' to id 11\n",
-      "🔧 DEBUG: Converting node '1' to id 1\n",
-      "🔧 DEBUG: Converting node '0' to id 0\n",
       "🔧 DEBUG: Converting node '23' to id 23\n",
-      "🔧 DEBUG: Converting node '21' to id 21\n",
-      "🔧 DEBUG: Converting node '4' to id 4\n",
-      "🔧 DEBUG: Converting node '5' to id 5\n",
-      "🔧 DEBUG: Converting node '13' to id 13\n",
-      "🔧 DEBUG: Converting node '12' to id 12\n",
-      "🔧 DEBUG: Converting node '26' to id 26\n",
-      "🔧 DEBUG: Converting node '22' to id 22\n",
-      "🔧 DEBUG: Converting node '24' to id 24\n",
+      "🔧 DEBUG: Converting node '6' to id 6\n",
+      "🔧 DEBUG: Converting node '10' to id 10\n",
       "🔧 DEBUG: Converting node '2' to id 2\n",
-      "🔧 DEBUG: Converting node '18' to id 18\n",
-      "🔧 DEBUG: Converting node '32' to id 32\n",
-      "🔧 DEBUG: Converting node '3' to id 3\n",
-      "🔧 DEBUG: Converting node '27' to id 27\n",
+      "🔧 DEBUG: Converting node '4' to id 4\n",
       "🔧 DEBUG: Converting node '17' to id 17\n",
-      "🔧 DEBUG: Converting node '20' to id 20\n",
       "🔧 DEBUG: Converting node '8' to id 8\n",
-      "🔧 DEBUG: Converting node '9' to id 9\n",
+      "🔧 DEBUG: Converting node '26' to id 26\n",
+      "🔧 DEBUG: Converting node '12' to id 12\n",
+      "🔧 DEBUG: Converting node '21' to id 21\n",
+      "🔧 DEBUG: Converting node '31' to id 31\n",
+      "🔧 DEBUG: Converting node '11' to id 11\n",
+      "🔧 DEBUG: Converting node '16' to id 16\n",
+      "🔧 DEBUG: Converting node '24' to id 24\n",
+      "🔧 DEBUG: Converting node '5' to id 5\n",
       "🔧 DEBUG: Converting node '14' to id 14\n",
+      "🔧 DEBUG: Converting node '19' to id 19\n",
+      "🔧 DEBUG: Converting node '7' to id 7\n",
+      "🔧 DEBUG: Converting node '32' to id 32\n",
+      "🔧 DEBUG: Converting node '13' to id 13\n",
       "🔧 DEBUG: Converting node '28' to id 28\n",
-      "🔧 DEBUG: Converting node '10' to id 10\n",
-      "🔧 DEBUG: Converting node '31' to id 31\n",
-      "🔧 DEBUG: Converting node '15' to id 15\n",
       "🔧 DEBUG: Converting node '29' to id 29\n",
-      "🔧 DEBUG: Converting node '16' to id 16\n",
+      "🔧 DEBUG: Converting node '15' to id 15\n",
+      "🔧 DEBUG: Converting node '22' to id 22\n",
+      "🔧 DEBUG: Converting node '18' to id 18\n",
+      "🔧 DEBUG: Converting node '0' to id 0\n",
       "🔧 DEBUG: Converting node '30' to id 30\n",
-      "🔧 DEBUG: Converting node '6' to id 6\n",
-      "🔧 DEBUG: Converting node '25' to id 25\n",
+      "🔧 DEBUG: Converting node '20' to id 20\n",
+      "🔧 DEBUG: Converting node '3' to id 3\n",
+      "🔧 DEBUG: Converting node '1' to id 1\n",
       "✅ DEBUG: Converted 34 nodes for engine\n",
       "🔧 DEBUG: Converting edges - supports_graph_view: true\n",
       "📊 DEBUG: DataSource returned 78 graph edges\n",
-      "🔧 DEBUG: Converting edge 0 '2' -> '27' to 2 -> 27\n",
-      "🔧 DEBUG: Converting edge 1 '0' -> '4' to 0 -> 4\n",
-      "🔧 DEBUG: Converting edge 2 '1' -> '21' to 1 -> 21\n",
-      "🔧 DEBUG: Converting edge 3 '23' -> '25' to 23 -> 25\n",
-      "🔧 DEBUG: Converting edge 4 '3' -> '13' to 3 -> 13\n",
-      "🔧 DEBUG: Converting edge 5 '20' -> '33' to 20 -> 33\n",
-      "🔧 DEBUG: Converting edge 6 '0' -> '17' to 0 -> 17\n",
-      "🔧 DEBUG: Converting edge 7 '2' -> '13' to 2 -> 13\n",
-      "🔧 DEBUG: Converting edge 8 '28' -> '33' to 28 -> 33\n",
-      "🔧 DEBUG: Converting edge 9 '26' -> '29' to 26 -> 29\n",
-      "🔧 DEBUG: Converting edge 10 '23' -> '29' to 23 -> 29\n",
-      "🔧 DEBUG: Converting edge 11 '0' -> '1' to 0 -> 1\n",
-      "🔧 DEBUG: Converting edge 12 '8' -> '33' to 8 -> 33\n",
-      "🔧 DEBUG: Converting edge 13 '18' -> '33' to 18 -> 33\n",
-      "🔧 DEBUG: Converting edge 14 '0' -> '8' to 0 -> 8\n",
-      "🔧 DEBUG: Converting edge 15 '30' -> '33' to 30 -> 33\n",
-      "🔧 DEBUG: Converting edge 16 '22' -> '32' to 22 -> 32\n",
-      "🔧 DEBUG: Converting edge 17 '1' -> '2' to 1 -> 2\n",
-      "🔧 DEBUG: Converting edge 18 '13' -> '33' to 13 -> 33\n",
-      "🔧 DEBUG: Converting edge 19 '1' -> '3' to 1 -> 3\n",
-      "🔧 DEBUG: Converting edge 20 '27' -> '33' to 27 -> 33\n",
-      "🔧 DEBUG: Converting edge 21 '23' -> '33' to 23 -> 33\n",
-      "🔧 DEBUG: Converting edge 22 '23' -> '32' to 23 -> 32\n",
-      "🔧 DEBUG: Converting edge 23 '0' -> '19' to 0 -> 19\n",
-      "🔧 DEBUG: Converting edge 24 '2' -> '32' to 2 -> 32\n",
-      "🔧 DEBUG: Converting edge 25 '14' -> '32' to 14 -> 32\n",
-      "🔧 DEBUG: Converting edge 26 '2' -> '28' to 2 -> 28\n",
-      "🔧 DEBUG: Converting edge 27 '5' -> '10' to 5 -> 10\n",
-      "🔧 DEBUG: Converting edge 28 '1' -> '19' to 1 -> 19\n",
-      "🔧 DEBUG: Converting edge 29 '8' -> '30' to 8 -> 30\n",
-      "🔧 DEBUG: Converting edge 30 '5' -> '16' to 5 -> 16\n",
-      "🔧 DEBUG: Converting edge 31 '4' -> '10' to 4 -> 10\n",
-      "🔧 DEBUG: Converting edge 32 '20' -> '32' to 20 -> 32\n",
-      "🔧 DEBUG: Converting edge 33 '3' -> '7' to 3 -> 7\n",
-      "🔧 DEBUG: Converting edge 34 '2' -> '7' to 2 -> 7\n",
-      "🔧 DEBUG: Converting edge 35 '9' -> '33' to 9 -> 33\n",
-      "🔧 DEBUG: Converting edge 36 '23' -> '27' to 23 -> 27\n",
-      "🔧 DEBUG: Converting edge 37 '0' -> '13' to 0 -> 13\n",
-      "🔧 DEBUG: Converting edge 38 '1' -> '7' to 1 -> 7\n",
-      "🔧 DEBUG: Converting edge 39 '0' -> '2' to 0 -> 2\n",
-      "🔧 DEBUG: Converting edge 40 '0' -> '7' to 0 -> 7\n",
-      "🔧 DEBUG: Converting edge 41 '0' -> '5' to 0 -> 5\n",
-      "🔧 DEBUG: Converting edge 42 '24' -> '31' to 24 -> 31\n",
-      "🔧 DEBUG: Converting edge 43 '19' -> '33' to 19 -> 33\n",
-      "🔧 DEBUG: Converting edge 44 '5' -> '6' to 5 -> 6\n",
-      "🔧 DEBUG: Converting edge 45 '25' -> '31' to 25 -> 31\n",
-      "🔧 DEBUG: Converting edge 46 '3' -> '12' to 3 -> 12\n",
-      "🔧 DEBUG: Converting edge 47 '0' -> '3' to 0 -> 3\n",
-      "🔧 DEBUG: Converting edge 48 '31' -> '32' to 31 -> 32\n",
-      "🔧 DEBUG: Converting edge 49 '24' -> '27' to 24 -> 27\n",
-      "🔧 DEBUG: Converting edge 50 '30' -> '32' to 30 -> 32\n",
-      "🔧 DEBUG: Converting edge 51 '14' -> '33' to 14 -> 33\n",
-      "🔧 DEBUG: Converting edge 52 '6' -> '16' to 6 -> 16\n",
-      "🔧 DEBUG: Converting edge 53 '24' -> '25' to 24 -> 25\n",
-      "🔧 DEBUG: Converting edge 54 '0' -> '31' to 0 -> 31\n",
-      "🔧 DEBUG: Converting edge 55 '0' -> '10' to 0 -> 10\n",
-      "🔧 DEBUG: Converting edge 56 '2' -> '3' to 2 -> 3\n",
-      "🔧 DEBUG: Converting edge 57 '18' -> '32' to 18 -> 32\n",
-      "🔧 DEBUG: Converting edge 58 '0' -> '6' to 0 -> 6\n",
-      "🔧 DEBUG: Converting edge 59 '4' -> '6' to 4 -> 6\n",
-      "🔧 DEBUG: Converting edge 60 '2' -> '9' to 2 -> 9\n",
-      "🔧 DEBUG: Converting edge 61 '32' -> '33' to 32 -> 33\n",
-      "🔧 DEBUG: Converting edge 62 '26' -> '33' to 26 -> 33\n",
-      "🔧 DEBUG: Converting edge 63 '22' -> '33' to 22 -> 33\n",
-      "🔧 DEBUG: Converting edge 64 '0' -> '21' to 0 -> 21\n",
-      "🔧 DEBUG: Converting edge 65 '15' -> '32' to 15 -> 32\n",
-      "🔧 DEBUG: Converting edge 66 '15' -> '33' to 15 -> 33\n",
-      "🔧 DEBUG: Converting edge 67 '0' -> '12' to 0 -> 12\n",
-      "🔧 DEBUG: Converting edge 68 '1' -> '30' to 1 -> 30\n",
-      "🔧 DEBUG: Converting edge 69 '1' -> '17' to 1 -> 17\n",
-      "🔧 DEBUG: Converting edge 70 '2' -> '8' to 2 -> 8\n",
-      "🔧 DEBUG: Converting edge 71 '29' -> '33' to 29 -> 33\n",
-      "🔧 DEBUG: Converting edge 72 '31' -> '33' to 31 -> 33\n",
-      "🔧 DEBUG: Converting edge 73 '1' -> '13' to 1 -> 13\n",
-      "🔧 DEBUG: Converting edge 74 '8' -> '32' to 8 -> 32\n",
-      "🔧 DEBUG: Converting edge 75 '0' -> '11' to 0 -> 11\n",
-      "🔧 DEBUG: Converting edge 76 '28' -> '31' to 28 -> 31\n",
-      "🔧 DEBUG: Converting edge 77 '29' -> '32' to 29 -> 32\n",
+      "🔧 DEBUG: Converting edge 0 '9' -> '33' to 9 -> 33\n",
+      "🔧 DEBUG: Converting edge 1 '31' -> '33' to 31 -> 33\n",
+      "🔧 DEBUG: Converting edge 2 '4' -> '6' to 4 -> 6\n",
+      "🔧 DEBUG: Converting edge 3 '0' -> '31' to 0 -> 31\n",
+      "🔧 DEBUG: Converting edge 4 '1' -> '19' to 1 -> 19\n",
+      "🔧 DEBUG: Converting edge 5 '2' -> '32' to 2 -> 32\n",
+      "🔧 DEBUG: Converting edge 6 '5' -> '6' to 5 -> 6\n",
+      "🔧 DEBUG: Converting edge 7 '0' -> '2' to 0 -> 2\n",
+      "🔧 DEBUG: Converting edge 8 '23' -> '29' to 23 -> 29\n",
+      "🔧 DEBUG: Converting edge 9 '15' -> '32' to 15 -> 32\n",
+      "🔧 DEBUG: Converting edge 10 '0' -> '1' to 0 -> 1\n",
+      "🔧 DEBUG: Converting edge 11 '28' -> '31' to 28 -> 31\n",
+      "🔧 DEBUG: Converting edge 12 '4' -> '10' to 4 -> 10\n",
+      "🔧 DEBUG: Converting edge 13 '29' -> '32' to 29 -> 32\n",
+      "🔧 DEBUG: Converting edge 14 '32' -> '33' to 32 -> 33\n",
+      "🔧 DEBUG: Converting edge 15 '2' -> '8' to 2 -> 8\n",
+      "🔧 DEBUG: Converting edge 16 '18' -> '33' to 18 -> 33\n",
+      "🔧 DEBUG: Converting edge 17 '27' -> '33' to 27 -> 33\n",
+      "🔧 DEBUG: Converting edge 18 '22' -> '32' to 22 -> 32\n",
+      "🔧 DEBUG: Converting edge 19 '31' -> '32' to 31 -> 32\n",
+      "🔧 DEBUG: Converting edge 20 '0' -> '10' to 0 -> 10\n",
+      "🔧 DEBUG: Converting edge 21 '0' -> '12' to 0 -> 12\n",
+      "🔧 DEBUG: Converting edge 22 '20' -> '32' to 20 -> 32\n",
+      "🔧 DEBUG: Converting edge 23 '18' -> '32' to 18 -> 32\n",
+      "🔧 DEBUG: Converting edge 24 '0' -> '21' to 0 -> 21\n",
+      "🔧 DEBUG: Converting edge 25 '2' -> '9' to 2 -> 9\n",
+      "🔧 DEBUG: Converting edge 26 '24' -> '25' to 24 -> 25\n",
+      "🔧 DEBUG: Converting edge 27 '2' -> '27' to 2 -> 27\n",
+      "🔧 DEBUG: Converting edge 28 '1' -> '3' to 1 -> 3\n",
+      "🔧 DEBUG: Converting edge 29 '0' -> '4' to 0 -> 4\n",
+      "🔧 DEBUG: Converting edge 30 '1' -> '17' to 1 -> 17\n",
+      "🔧 DEBUG: Converting edge 31 '26' -> '29' to 26 -> 29\n",
+      "🔧 DEBUG: Converting edge 32 '5' -> '10' to 5 -> 10\n",
+      "🔧 DEBUG: Converting edge 33 '14' -> '32' to 14 -> 32\n",
+      "🔧 DEBUG: Converting edge 34 '8' -> '32' to 8 -> 32\n",
+      "🔧 DEBUG: Converting edge 35 '3' -> '7' to 3 -> 7\n",
+      "🔧 DEBUG: Converting edge 36 '1' -> '2' to 1 -> 2\n",
+      "🔧 DEBUG: Converting edge 37 '1' -> '13' to 1 -> 13\n",
+      "🔧 DEBUG: Converting edge 38 '3' -> '12' to 3 -> 12\n",
+      "🔧 DEBUG: Converting edge 39 '3' -> '13' to 3 -> 13\n",
+      "🔧 DEBUG: Converting edge 40 '2' -> '7' to 2 -> 7\n",
+      "🔧 DEBUG: Converting edge 41 '23' -> '32' to 23 -> 32\n",
+      "🔧 DEBUG: Converting edge 42 '6' -> '16' to 6 -> 16\n",
+      "🔧 DEBUG: Converting edge 43 '0' -> '11' to 0 -> 11\n",
+      "🔧 DEBUG: Converting edge 44 '25' -> '31' to 25 -> 31\n",
+      "🔧 DEBUG: Converting edge 45 '0' -> '6' to 0 -> 6\n",
+      "🔧 DEBUG: Converting edge 46 '2' -> '3' to 2 -> 3\n",
+      "🔧 DEBUG: Converting edge 47 '22' -> '33' to 22 -> 33\n",
+      "🔧 DEBUG: Converting edge 48 '30' -> '33' to 30 -> 33\n",
+      "🔧 DEBUG: Converting edge 49 '28' -> '33' to 28 -> 33\n",
+      "🔧 DEBUG: Converting edge 50 '5' -> '16' to 5 -> 16\n",
+      "🔧 DEBUG: Converting edge 51 '8' -> '30' to 8 -> 30\n",
+      "🔧 DEBUG: Converting edge 52 '14' -> '33' to 14 -> 33\n",
+      "🔧 DEBUG: Converting edge 53 '0' -> '19' to 0 -> 19\n",
+      "🔧 DEBUG: Converting edge 54 '0' -> '13' to 0 -> 13\n",
+      "🔧 DEBUG: Converting edge 55 '23' -> '33' to 23 -> 33\n",
+      "🔧 DEBUG: Converting edge 56 '2' -> '13' to 2 -> 13\n",
+      "🔧 DEBUG: Converting edge 57 '0' -> '8' to 0 -> 8\n",
+      "🔧 DEBUG: Converting edge 58 '15' -> '33' to 15 -> 33\n",
+      "🔧 DEBUG: Converting edge 59 '1' -> '30' to 1 -> 30\n",
+      "🔧 DEBUG: Converting edge 60 '24' -> '27' to 24 -> 27\n",
+      "🔧 DEBUG: Converting edge 61 '0' -> '7' to 0 -> 7\n",
+      "🔧 DEBUG: Converting edge 62 '29' -> '33' to 29 -> 33\n",
+      "🔧 DEBUG: Converting edge 63 '30' -> '32' to 30 -> 32\n",
+      "🔧 DEBUG: Converting edge 64 '8' -> '33' to 8 -> 33\n",
+      "🔧 DEBUG: Converting edge 65 '26' -> '33' to 26 -> 33\n",
+      "🔧 DEBUG: Converting edge 66 '0' -> '17' to 0 -> 17\n",
+      "🔧 DEBUG: Converting edge 67 '1' -> '21' to 1 -> 21\n",
+      "🔧 DEBUG: Converting edge 68 '1' -> '7' to 1 -> 7\n",
+      "🔧 DEBUG: Converting edge 69 '13' -> '33' to 13 -> 33\n",
+      "🔧 DEBUG: Converting edge 70 '0' -> '5' to 0 -> 5\n",
+      "🔧 DEBUG: Converting edge 71 '23' -> '27' to 23 -> 27\n",
+      "🔧 DEBUG: Converting edge 72 '23' -> '25' to 23 -> 25\n",
+      "🔧 DEBUG: Converting edge 73 '2' -> '28' to 2 -> 28\n",
+      "🔧 DEBUG: Converting edge 74 '20' -> '33' to 20 -> 33\n",
+      "🔧 DEBUG: Converting edge 75 '24' -> '31' to 24 -> 31\n",
+      "🔧 DEBUG: Converting edge 76 '19' -> '33' to 19 -> 33\n",
+      "🔧 DEBUG: Converting edge 77 '0' -> '3' to 0 -> 3\n",
       "✅ DEBUG: Converted 78 edges for engine\n",
       "✅ DEBUG: Snapshot created - 34 nodes, 78 edges, 34 positions\n",
       "📊 DEBUG: Loaded initial snapshot with 34 nodes, 78 edges\n",
       "🚀 DEBUG: Engine loading snapshot with 34 nodes, 78 edges\n",
-      "📋 DEBUG: EngineSyncManager queuing snapshot at Instant { tv_sec: 2819929, tv_nsec: 391598458 }\n",
+      "📋 DEBUG: EngineSyncManager queuing snapshot at Instant { tv_sec: 2822339, tv_nsec: 896302458 }\n",
       "📍 DEBUG: Built node index mapping for 34 nodes\n",
       "✅ DEBUG: Engine snapshot loaded successfully\n",
       "✅ DEBUG: Engine initialized with snapshot\n",
@@ -747,7 +747,7 @@
        "    <div style=\"font-size: 12px; color: #666; margin-top: 5px;\">\n",
        "        🍯 <strong>Realtime Server</strong> on port 8080 | 🎮 Static Files + WebSocket + Canvas + Interactive controls\n",
        "        <div style=\"margin-top: 3px;\">\n",
-       "            ✅ File-based UI (HTML/JS/CSS) with /realtime/config endpoint | ✅ Layout parameters: circular\n",
+       "            ✅ File-based UI (HTML/JS/CSS) with /realtime/config endpoint | ✅ Layout parameters: honeycomb\n",
        "        </div>\n",
        "    </div>\n",
        "</div>"
@@ -768,113 +768,7 @@
     }
    ],
    "source": [
-    "g.viz.show(layout='circular')"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 4,
-   "id": "d0ae011b-cb48-47d1-b76f-9ca4e538aeb8",
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "🔄 DEBUG: VizAccessor.update() called\n",
-      "📡 DEBUG: Found active server on port 8080 for this viz instance\n",
-      "📝 DEBUG: Processing layout parameters from kwargs...\n",
-      "  🔧 Parameter: charge=-50\n",
-      "  🔧 Parameter: distance=200\n",
-      "📊 DEBUG: Final layout parameters: algorithm='force_directed', params={\"charge\": \"-50\", \"distance\": \"200\"}\n",
-      "🎯 DEBUG: Updating server with layout: force_directed, params: {\"charge\": \"-50\", \"distance\": \"200\"}\n",
-      "📡 DEBUG: Sending ChangeLayout control message to server on port 8080\n",
-      "🔗 DEBUG: Connecting to WebSocket: ws://127.0.0.1:8080/realtime/ws\n",
-      "🔗 DEBUG: New connection from 127.0.0.1:64920\n",
-      "📋 DEBUG: Request: GET /realtime/ws HTTP/1.1\n",
-      "🔌 DEBUG: WebSocket upgrade request from 127.0.0.1:64920\n",
-      "🔗 DEBUG: New WebSocket stream from 127.0.0.1:64920\n",
-      "👤 DEBUG: Assigned client ID: 0\n",
-      "📊 DEBUG: Sending initial snapshot to client 0\n",
-      "✅ DEBUG: WebSocket connected successfully\n",
-      "📡 DEBUG: Sending WebSocket message: {\"payload\":{\"ChangeLayout\":{\"algorithm\":\"force_directed\",\"params\":{\"charge\":\"-50\",\"distance\":\"200\"}}},\"type\":\"control\",\"version\":1}\n",
-      "✅ DEBUG: ChangeLayout control message sent successfully\n",
-      "📨 DEBUG: Received from client 0: {\"payload\":{\"ChangeLayout\":{\"algorithm\":\"force_directed\",\"params\":{\"charge\":\"-50\",\"distance\":\"200\"}}},\"type\":\"control\",\"version\":1}\n",
-      "🎮 DEBUG: Control message: ChangeLayout { algorithm: \"force_directed\", params: {\"charge\": \"-50\", \"distance\": \"200\"} }\n",
-      "🎮 DEBUG: Processing control message from client 0: ChangeLayout { algorithm: \"force_directed\", params: {\"charge\": \"-50\", \"distance\": \"200\"} }\n",
-      "🎮 DEBUG: Processing control message from client 0: ChangeLayout { algorithm: \"force_directed\", params: {\"charge\": \"-50\", \"distance\": \"200\"} }\n",
-      "📐 DEBUG: Processing layout change: force_directed\n",
-      "🎮 DEBUG: DataSourceRealtimeAccessor received control: ChangeLayout { algorithm: \"force_directed\", params: {\"charge\": \"-50\", \"distance\": \"200\"} }\n",
-      "🎯 DEBUG: Layout control received for force_directed with params {\"charge\": \"-50\", \"distance\": \"200\"}\n",
-      "✅ DEBUG: Control message acknowledged by accessor (engine will emit updates)\n",
-      "📐 DEBUG: Forwarding ChangeLayout to engine: algorithm=force_directed\n",
-      "🔄 DEBUG: Engine applying update: LayoutChanged { algorithm: \"force_directed\", params: {\"charge\": \"-50\", \"distance\": \"200\"} }\n",
-      "�� DEBUG: Applying control update immediately (bypass SyncManager)\n",
-      "📐 DEBUG: Layout changed to: force_directed with params {\"charge\": \"-50\", \"distance\": \"200\"}\n",
-      "🎮 DEBUG: Active interaction controller set to pan-2d\n",
-      "📦 DEBUG: Broadcasting UpdateEnvelope frame 1 (positions: 0)\n",
-      "📐 DEBUG: Starting projection-only recomputation\n",
-      "🔄 DEBUG: No cached embedding found, computing new embedding first\n",
-      "📡 DEBUG: Forwarding engine update to WebSocket clients: UpdateEnvelope(UpdateEnvelope { timestamp_ms: 1758760779470, frame_id: 1, params_changed: None, graph_patch: None, positions: None, ui: None, view_changed: Some(Object {\"view_2d\": Object {\"rotation\": Number(0.0), \"x\": Number(0.0), \"y\": Number(0.0), \"zoom\": Number(1.0)}}) })\n",
-      "📡 DEBUG: Broadcasting update to 1 clients\n",
-      "📐 DEBUG: Applying layout algorithm: force_directed with params {\"charge\": \"-50\", \"distance\": \"200\"}\n",
-      "⚡ DEBUG: Using force-directed layout\n",
-      "⚡ DEBUG: Computing force-directed layout positions with params {\"charge\": \"-50\", \"distance\": \"200\"}\n",
-      "⚡ DEBUG: Force-directed params: iterations=150, charge=-50, distance=200\n",
-      "⚡ DEBUG: Generated 34 force-directed positions\n",
-      "📦 DEBUG: Broadcasting UpdateEnvelope frame 2 (positions: 34)\n",
-      "✅ DEBUG: Projection-only recomputation completed in 0.10ms\n",
-      "📡 DEBUG: Forwarding engine update to WebSocket clients: UpdateEnvelope(UpdateEnvelope { timestamp_ms: 1758760779475, frame_id: 2, params_changed: Some({\"layout\": Object {\"algorithm\": String(\"force_directed\"), \"params\": Object {\"charge\": String(\"-50\"), \"distance\": String(\"200\")}}}), graph_patch: None, positions: Some(PositionsPayload { positions: [NodePosition { node_id: 1, coords: [433.0216050997186, 421.2652158563803] }, NodePosition { node_id: 26, coords: [185.4994190879413, 451.6232731832455] }, NodePosition { node_id: 17, coords: [129.95657285407717, 194.71356742452883] }, NodePosition { node_id: 13, coords: [258.95055148918755, 444.2738464759228] }, NodePosition { node_id: 27, coords: [132.15499870721592, 234.9765000863125] }, NodePosition { node_id: 30, coords: [402.0260562875537, 236.82814045471724] }, NodePosition { node_id: 4, coords: [310.14951954096324, 409.5307593924538] }, NodePosition { node_id: 32, coords: [160.0, 300.0] }, NodePosition { node_id: 23, coords: [398.0624382708384, 496.9359240981137] }, NodePosition { node_id: 7, coords: [417.9567719620682, 322.04994213798847] }, NodePosition { node_id: 11, coords: [436.03474171673827, 384.22914606037693] }, NodePosition { node_id: 18, coords: [182.04322803793178, 322.04994213798847] }, NodePosition { node_id: 28, coords: [286.1597460805047, 150.6398735557448] }, NodePosition { node_id: 33, coords: [430.54611211660983, 350.5738332662014] }, NodePosition { node_id: 19, coords: [400.0, 300.0] }, NodePosition { node_id: 14, coords: [264.4238112906292, 174.96266638753355] }, NodePosition { node_id: 24, coords: [104.45005878218879, 421.0793974617919] }, NodePosition { node_id: 2, coords: [206.75277705956444, 336.1241666187153] }, NodePosition { node_id: 20, coords: [137.418038211455, 151.78695839775742] }, NodePosition { node_id: 22, coords: [144.80812738366154, 441.476085165777] }, NodePosition { node_id: 8, coords: [155.36768726897827, 108.47586545274265] }, NodePosition { node_id: 10, coords: [315.68562110876144, 130.72519002984413] }, NodePosition { node_id: 31, coords: [351.9959681136957, 117.25312779716438] }, NodePosition { node_id: 15, coords: [393.60505471307295, 112.01570881543685] }, NodePosition { node_id: 29, coords: [438.6059663672289, 116.45603772554486] }, NodePosition { node_id: 12, coords: [224.22447951798858, 452.1777595303606] }, NodePosition { node_id: 6, coords: [430.54611211660983, 249.42616673379857] }, NodePosition { node_id: 25, coords: [457.2756959494243, 270.6000771493488] }, NodePosition { node_id: 16, coords: [373.90089172206586, 232.6304356353442] }, NodePosition { node_id: 21, coords: [365.67911761729994, 530.8381543614765] }, NodePosition { node_id: 5, coords: [288.00511326977073, 429.4454429183545] }, NodePosition { node_id: 9, coords: [250.9687808645807, 201.53203795094316] }, NodePosition { node_id: 0, coords: [420.5269272758513, 459.6034454560479] }, NodePosition { node_id: 3, coords: [142.7243040505757, 270.6000771493488] }], layout: Some(\"force_directed\"), params: Some({\"charge\": \"-50\", \"distance\": \"200\"}) }), ui: None, view_changed: None })\n",
-      "📡 DEBUG: Broadcasting update to 1 clients\n",
-      "🔗 DEBUG: New connection from 127.0.0.1:64921\n",
-      "📡 DEBUG: Forwarding engine update to WebSocket clients: PositionsBatch([NodePosition { node_id: 1, coords: [433.0216050997186, 421.2652158563803] }, NodePosition { node_id: 26, coords: [185.4994190879413, 451.6232731832455] }, NodePosition { node_id: 17, coords: [129.95657285407717, 194.71356742452883] }, NodePosition { node_id: 13, coords: [258.95055148918755, 444.2738464759228] }, NodePosition { node_id: 27, coords: [132.15499870721592, 234.9765000863125] }, NodePosition { node_id: 30, coords: [402.0260562875537, 236.82814045471724] }, NodePosition { node_id: 4, coords: [310.14951954096324, 409.5307593924538] }, NodePosition { node_id: 32, coords: [160.0, 300.0] }, NodePosition { node_id: 23, coords: [398.0624382708384, 496.9359240981137] }, NodePosition { node_id: 7, coords: [417.9567719620682, 322.04994213798847] }, NodePosition { node_id: 11, coords: [436.03474171673827, 384.22914606037693] }, NodePosition { node_id: 18, coords: [182.04322803793178, 322.04994213798847] }, NodePosition { node_id: 28, coords: [286.1597460805047, 150.6398735557448] }, NodePosition { node_id: 33, coords: [430.54611211660983, 350.5738332662014] }, NodePosition { node_id: 19, coords: [400.0, 300.0] }, NodePosition { node_id: 14, coords: [264.4238112906292, 174.96266638753355] }, NodePosition { node_id: 24, coords: [104.45005878218879, 421.0793974617919] }, NodePosition { node_id: 2, coords: [206.75277705956444, 336.1241666187153] }, NodePosition { node_id: 20, coords: [137.418038211455, 151.78695839775742] }, NodePosition { node_id: 22, coords: [144.80812738366154, 441.476085165777] }, NodePosition { node_id: 8, coords: [155.36768726897827, 108.47586545274265] }, NodePosition { node_id: 10, coords: [315.68562110876144, 130.72519002984413] }, NodePosition { node_id: 31, coords: [351.9959681136957, 117.25312779716438] }, NodePosition { node_id: 15, coords: [393.60505471307295, 112.01570881543685] }, NodePosition { node_id: 29, coords: [438.6059663672289, 116.45603772554486] }, NodePosition { node_id: 12, coords: [224.22447951798858, 452.1777595303606] }, NodePosition { node_id: 6, coords: [430.54611211660983, 249.42616673379857] }, NodePosition { node_id: 25, coords: [457.2756959494243, 270.6000771493488] }, NodePosition { node_id: 16, coords: [373.90089172206586, 232.6304356353442] }, NodePosition { node_id: 21, coords: [365.67911761729994, 530.8381543614765] }, NodePosition { node_id: 5, coords: [288.00511326977073, 429.4454429183545] }, NodePosition { node_id: 9, coords: [250.9687808645807, 201.53203795094316] }, NodePosition { node_id: 0, coords: [420.5269272758513, 459.6034454560479] }, NodePosition { node_id: 3, coords: [142.7243040505757, 270.6000771493488] }])\n",
-      "📡 DEBUG: Broadcasting update to 1 clients\n",
-      "📡 DEBUG: Forwarding engine update to WebSocket clients: LayoutChanged { algorithm: \"force_directed\", params: {\"charge\": \"-50\", \"distance\": \"200\"} }\n",
-      "📡 DEBUG: Broadcasting update to 1 clients\n",
-      "📡 DEBUG: Forwarding engine update to WebSocket clients: LayoutChanged { algorithm: \"force_directed\", params: {\"charge\": \"-50\", \"distance\": \"200\"} }\n",
-      "📡 DEBUG: Broadcasting update to 1 clients\n",
-      "📋 DEBUG: Request: GET /realtime/ HTTP/1.1\n",
-      "🌐 DEBUG: Serving static HTML page to 127.0.0.1:64921\n",
-      "✅ DEBUG: Static HTML page served to 127.0.0.1:64921\n",
-      "🔗 DEBUG: New connection from 127.0.0.1:64922\n",
-      "📋 DEBUG: Request: GET /static/styles.css HTTP/1.1\n",
-      "📁 DEBUG: Serving static file /static/styles.css to 127.0.0.1:64922\n",
-      "✅ DEBUG: Static file styles.css served to 127.0.0.1:64922\n",
-      "🔗 DEBUG: New connection from 127.0.0.1:64923\n",
-      "📋 DEBUG: Request: GET /static/app.js HTTP/1.1\n",
-      "📁 DEBUG: Serving static file /static/app.js to 127.0.0.1:64923\n",
-      "✅ DEBUG: Static file app.js served to 127.0.0.1:64923\n",
-      "🔗 DEBUG: New connection from 127.0.0.1:64924\n",
-      "📋 DEBUG: Request: GET /realtime/config HTTP/1.1\n",
-      "🔧 DEBUG: Serving config endpoint to 127.0.0.1:64924\n",
-      "✅ DEBUG: Config served to 127.0.0.1:64924\n",
-      "🔗 DEBUG: New connection from 127.0.0.1:64925\n",
-      "📋 DEBUG: Request: GET /realtime/ws HTTP/1.1\n",
-      "🔌 DEBUG: WebSocket upgrade request from 127.0.0.1:64925\n",
-      "🔗 DEBUG: New WebSocket stream from 127.0.0.1:64925\n",
-      "👤 DEBUG: Assigned client ID: 1\n",
-      "📊 DEBUG: Sending initial snapshot to client 1\n",
-      "📨 DEBUG: Received from client 1: {\"type\":\"control\",\"version\":1,\"payload\":{\"SetInteractionController\":{\"mode\":\"honeycomb-nd\"}}}\n",
-      "🎮 DEBUG: Control message: SetInteractionController { mode: \"honeycomb-nd\" }\n",
-      "🎮 DEBUG: Processing control message from client 1: SetInteractionController { mode: \"honeycomb-nd\" }\n",
-      "🎮 DEBUG: Processing control message from client 1: SetInteractionController { mode: \"honeycomb-nd\" }\n",
-      "🎮 DEBUG: Requested controller mode honeycomb-nd\n",
-      "🎮 DEBUG: DataSourceRealtimeAccessor received control: SetInteractionController { mode: \"honeycomb-nd\" }\n",
-      "⚠️  DEBUG: Accessor received unsupported control message: SetInteractionController { mode: \"honeycomb-nd\" }\n",
-      "✅ DEBUG: Control message acknowledged by accessor (engine will emit updates)\n",
-      "🎮 DEBUG: Switching interaction controller to honeycomb-nd\n",
-      "🎮 DEBUG: Active interaction controller set to honeycomb-nd\n",
-      "🔌 DEBUG: Client 0 sent close\n",
-      "🔌 DEBUG: Client 0 disconnected\n",
-      "🔄 DEBUG: Server update successful - layout parameters sent\n",
-      "✅ DEBUG: Visualization parameters updated successfully\n"
-     ]
-    }
-   ],
-   "source": [
-    "# g.viz.update(charge=-500, iterations=200)  # Stronger repulsion\n",
-    "# g.viz.update(layout='circular', radius=250)  # Switch to circular\n",
-    "g.viz.update(layout='force_directed', charge=-50, distance=200)  # Weak clustering"
+    "g.viz.show(layout='honeycomb')"
    ]
   },
   {
diff --git a/src/viz/projection/mod.rs b/src/viz/projection/mod.rs
index 395431e8..bcd772f2 100644
--- a/src/viz/projection/mod.rs
+++ b/src/viz/projection/mod.rs
@@ -279,7 +279,7 @@ impl Default for HoneycombConfig {
             snap_to_centers: true,
             grid_padding: 20.0,
             max_grid_size: None,
-            target_avg_occupancy: 4.0,
+            target_avg_occupancy: 1.0,  // One node per hexagonal cell for optimal clarity
             min_cell_size: 6.0,
         }
     }
diff --git a/src/viz/realtime/engine.rs b/src/viz/realtime/engine.rs
index 329064a2..6547e3da 100644
--- a/src/viz/realtime/engine.rs
+++ b/src/viz/realtime/engine.rs
@@ -16,7 +16,7 @@ use crate::viz::realtime::accessor::{
 };
 use crate::viz::realtime::engine_sync::EngineSyncManager;
 use crate::viz::realtime::interaction::{
-    CanvasDragPolicy, GlobeController, HoneycombController, InteractionController, NodeDragEvent,
+    CanvasDragPolicy, GlobeController, HoneycombController, InteractionCommand, InteractionController, NodeDragEvent,
     NodeDragPolicy, PanController, PointerEvent, ViewState2D, ViewState3D, WheelEvent,
 };
 use crate::viz::streaming::data_source::Position;
@@ -290,7 +290,7 @@ impl RealTimeVizEngine {
             state.current_layout_algorithm.clone()
         };
         self.configure_controller_for_layout(&initial_layout);
-        self.broadcast_view_state()?;
+        self.broadcast_view_state().await?;
 
         // Initialize performance monitoring
         self.performance_monitor.start()?;
@@ -483,17 +483,19 @@ impl RealTimeVizEngine {
 
             ControlCommand::SetInteractionController { mode } => {
                 self.set_interaction_controller(&mode);
-                self.broadcast_view_state()?;
+                self.broadcast_view_state().await?;
             }
 
             ControlCommand::Pointer { event } => {
-                self.active_controller.on_pointer(event);
-                self.broadcast_view_state()?;
+                let commands = self.active_controller.on_pointer(event);
+                self.process_interaction_commands(commands).await?;
+                self.broadcast_view_state().await?;
             }
 
             ControlCommand::Wheel { event } => {
-                self.active_controller.on_wheel(event);
-                self.broadcast_view_state()?;
+                let commands = self.active_controller.on_wheel(event);
+                self.process_interaction_commands(commands).await?;
+                self.broadcast_view_state().await?;
             }
 
             ControlCommand::NodeDrag { event } => {
@@ -509,13 +511,13 @@ impl RealTimeVizEngine {
                     "🔁 DEBUG: Received RotateEmbedding command axis=({}, {}) radians={}",
                     axis_i, axis_j, radians
                 );
-                // TODO: Integrate with N-D embedding rotation pipeline
+                self.apply_nd_rotation(axis_i, axis_j, radians).await?;
             }
 
             ControlCommand::SetViewRotation { radians } => {
                 eprintln!("🔁 DEBUG: SetViewRotation {}", radians);
                 // Controllers that support this should interpret via Pointer/Wheel events.
-                self.broadcast_view_state()?;
+                self.broadcast_view_state().await?;
             }
 
             _ => {
@@ -1110,12 +1112,287 @@ impl RealTimeVizEngine {
             map
         };
 
+        // Broadcast recomputation result
         self.broadcast_envelope(Some(params_changed), None, None, true)?;
 
-        eprintln!(
-            "✅ DEBUG: Projection-only recomputation completed in {:.2}ms",
-            projection_time.as_secs_f64() * 1000.0
-        );
+        eprintln!("📐 DEBUG: Projection recomputation completed in {:.2}ms", projection_time.as_secs_f64() * 1000.0);
+        Ok(())
+    }
+
+    async fn trigger_view_aware_projection(&mut self, view: ViewState3D) -> GraphResult<()> {
+        eprintln!("🌐 DEBUG: Starting view-aware projection with 3D transform");
+
+        // Check if we have a cached embedding to reuse
+        let existing_embedding = {
+            let state = self.state.lock().unwrap();
+            state.embedding.clone()
+        };
+
+        let embedding = match existing_embedding {
+            Some(embedding) => {
+                eprintln!("♻️  DEBUG: Reusing cached embedding for view-aware projection");
+                embedding
+            }
+            None => {
+                eprintln!("🔄 DEBUG: No cached embedding found, computing new embedding first");
+                // If no embedding exists, we need to compute it first
+                let graph = self.graph.lock().unwrap();
+                let embedding = graph.compute_embedding(&self.config.embedding_config)?;
+                drop(graph);
+
+                // Cache the embedding for future projection-only updates
+                {
+                    let mut state = self.state.lock().unwrap();
+                    state.embedding = Some(embedding.clone());
+                }
+                embedding
+            }
+        };
+
+        let projection_start = Instant::now();
+
+        // Apply 3D view transform to embedding before 2D projection
+        let transformed_embedding = self.apply_3d_view_transform(&embedding, &view)?;
+
+        // Phase 2: Project transformed 3D points to 2D coordinates
+        let positions = self.apply_layout_algorithm(&transformed_embedding)?;
+
+        let projection_time = projection_start.elapsed();
+
+        // Update state with new positions and timing
+        {
+            let mut state = self.state.lock().unwrap();
+            state.positions = positions;
+            state.performance.last_projection_time_ms = projection_time.as_secs_f64() * 1000.0;
+            state.last_update = Instant::now();
+            state.needs_position_update = true;
+        }
+
+        // Broadcast the updated positions and view state
+        let view_json = json!({
+            "view_3d": {
+                "center": view.center,
+                "distance": view.distance,
+                "quat": view.quat,
+            }
+        });
+        self.broadcast_envelope(None, None, Some(view_json), true)?;
+
+        Ok(())
+    }
+
+    fn apply_3d_view_transform(&self, embedding: &GraphMatrix, view: &ViewState3D) -> GraphResult<GraphMatrix> {
+        use crate::viz::realtime::interaction::math::{Quat, Vec3};
+
+        eprintln!("🔄 DEBUG: Applying 3D view transform - center: {:?}, distance: {}, quat: {:?}",
+                  view.center, view.distance, view.quat);
+
+        // Create quaternion from view state
+        let quat = Quat {
+            w: view.quat[0],
+            x: view.quat[1],
+            y: view.quat[2],
+            z: view.quat[3],
+        };
+
+        // Get embedding dimensions and data
+        let (n_nodes, n_dims) = embedding.shape();
+        // Create a vector to hold the embedding data
+        let mut embedding_data = Vec::with_capacity(n_nodes * n_dims);
+        for row in 0..n_nodes {
+            for col in 0..n_dims {
+                embedding_data.push(embedding.get(row, col).unwrap_or(0.0));
+            }
+        }
+
+        // For 3D transformations, we need at least 3 dimensions
+        // If embedding has fewer than 3 dims, pad with zeros
+        // If it has more, we'll transform the first 3 dimensions
+        let dims_to_transform = std::cmp::min(n_dims, 3);
+
+        let mut transformed_data = embedding_data.clone();
+
+        // Transform each point
+        for node_idx in 0..n_nodes {
+            // Extract 3D point (pad with zeros if needed)
+            let mut point = Vec3::new(0.0, 0.0, 0.0);
+
+            if dims_to_transform >= 1 {
+                point.x = embedding_data[node_idx * n_dims];
+            }
+            if dims_to_transform >= 2 {
+                point.y = embedding_data[node_idx * n_dims + 1];
+            }
+            if dims_to_transform >= 3 {
+                point.z = embedding_data[node_idx * n_dims + 2];
+            }
+
+            // Apply 3D transformation:
+            // 1. Translate by view center
+            point = point.add(Vec3::new(view.center[0], view.center[1], view.center[2]));
+
+            // 2. Apply quaternion rotation
+            point = quat.rotate_vec3(point);
+
+            // 3. Scale by distance (for zoom effect)
+            let distance_scale = view.distance / 600.0; // normalize around default distance
+            point = point.mul(distance_scale);
+
+            // Store transformed coordinates back
+            if dims_to_transform >= 1 {
+                transformed_data[node_idx * n_dims] = point.x;
+            }
+            if dims_to_transform >= 2 {
+                transformed_data[node_idx * n_dims + 1] = point.y;
+            }
+            if dims_to_transform >= 3 {
+                transformed_data[node_idx * n_dims + 2] = point.z;
+            }
+        }
+
+        // Create new GraphMatrix with transformed data
+        Ok(GraphMatrix::from_row_major_data(transformed_data, n_nodes, n_dims, None)?)
+    }
+
+    async fn apply_nd_rotation(&mut self, axis_i: usize, axis_j: usize, radians: f64) -> GraphResult<()> {
+        eprintln!("🔄 DEBUG: Applying N-D rotation {} radians between axes {} and {}",
+                  radians, axis_i, axis_j);
+
+        // Get the current embedding
+        let existing_embedding = {
+            let state = self.state.lock().unwrap();
+            state.embedding.clone()
+        };
+
+        let embedding = match existing_embedding {
+            Some(embedding) => embedding,
+            None => {
+                eprintln!("⚠️  WARNING: No embedding found for N-D rotation, computing new one");
+                let graph = self.graph.lock().unwrap();
+                let embedding = graph.compute_embedding(&self.config.embedding_config)?;
+                drop(graph);
+
+                // Cache the embedding for future operations
+                {
+                    let mut state = self.state.lock().unwrap();
+                    state.embedding = Some(embedding.clone());
+                }
+                embedding
+            }
+        };
+
+        // Apply N-D rotation to embedding
+        let rotated_embedding = self.rotate_embedding_nd(&embedding, axis_i, axis_j, radians)?;
+
+        // Update the cached embedding with rotated version
+        {
+            let mut state = self.state.lock().unwrap();
+            state.embedding = Some(rotated_embedding.clone());
+        }
+
+        // Trigger projection recomputation with the rotated embedding
+        self.trigger_projection_recomputation().await?;
+
+        eprintln!("✅ DEBUG: N-D rotation completed and projection updated");
+        Ok(())
+    }
+
+    fn rotate_embedding_nd(&self, embedding: &GraphMatrix, axis_i: usize, axis_j: usize, radians: f64) -> GraphResult<GraphMatrix> {
+        let (n_nodes, n_dims) = embedding.shape();
+
+        // Validate axes
+        if axis_i >= n_dims || axis_j >= n_dims || axis_i == axis_j {
+            return Err(GraphError::InvalidInput(format!(
+                "Invalid rotation axes: axis_i={}, axis_j={}, dims={}",
+                axis_i, axis_j, n_dims
+            )));
+        }
+
+        // Create a vector to hold the embedding data
+        let mut embedding_data = Vec::with_capacity(n_nodes * n_dims);
+        for row in 0..n_nodes {
+            for col in 0..n_dims {
+                embedding_data.push(embedding.get(row, col).unwrap_or(0.0));
+            }
+        }
+        let mut rotated_data = embedding_data.clone();
+
+        // Precompute rotation values
+        let cos_theta = radians.cos();
+        let sin_theta = radians.sin();
+
+        // Apply 2D rotation in the specified plane for each point
+        for node_idx in 0..n_nodes {
+            let base_idx = node_idx * n_dims;
+
+            // Get coordinates for the two axes
+            let xi = embedding_data[base_idx + axis_i];
+            let xj = embedding_data[base_idx + axis_j];
+
+            // Apply 2D rotation matrix
+            let new_xi = xi * cos_theta - xj * sin_theta;
+            let new_xj = xi * sin_theta + xj * cos_theta;
+
+            // Store rotated coordinates
+            rotated_data[base_idx + axis_i] = new_xi;
+            rotated_data[base_idx + axis_j] = new_xj;
+        }
+
+        Ok(GraphMatrix::from_row_major_data(rotated_data, n_nodes, n_dims, None)?)
+    }
+
+    async fn process_interaction_commands(&mut self, commands: Vec<InteractionCommand>) -> GraphResult<()> {
+        for command in commands {
+            match command {
+                InteractionCommand::RotateEmbedding { axis_i, axis_j, radians } => {
+                    eprintln!("📬 DEBUG: Processing RotateEmbedding command from controller: axes ({}, {}), radians={}",
+                             axis_i, axis_j, radians);
+                    self.apply_nd_rotation(axis_i, axis_j, radians).await?;
+                }
+                InteractionCommand::TriggerRecomputation => {
+                    eprintln!("📬 DEBUG: Processing TriggerRecomputation command from controller");
+                    self.trigger_projection_recomputation().await?;
+                }
+                InteractionCommand::UpdateAutoScale { target_occupancy, min_cell_size } => {
+                    eprintln!("📬 DEBUG: Processing UpdateAutoScale command from controller: occupancy={}, cell_size={}",
+                             target_occupancy, min_cell_size);
+                    // Update honeycomb controller configuration
+                    if let Some(honeycomb) = self.active_controller.as_any().downcast_mut::<HoneycombController>() {
+                        honeycomb.configure_auto_scaling(target_occupancy, min_cell_size, true);
+                    }
+                }
+                InteractionCommand::ExposeAutoScaleControls { target_occupancy, min_cell_size, enabled } => {
+                    eprintln!("🎛️  DEBUG: Exposing auto-scale controls in UI: occupancy={}, cell_size={}, enabled={}",
+                             target_occupancy, min_cell_size, enabled);
+
+                    // Create UI control exposure message
+                    let controls_json = json!({
+                        "auto_scale_controls": {
+                            "target_occupancy": {
+                                "value": target_occupancy,
+                                "min": 0.5,
+                                "max": 2.0,
+                                "step": 0.1,
+                                "label": "Target Occupancy",
+                                "description": "Target nodes per honeycomb cell (1.0 = one node per cell, optimal)"
+                            },
+                            "min_cell_size": {
+                                "value": min_cell_size,
+                                "min": 8.0,
+                                "max": 60.0,
+                                "step": 2.0,
+                                "label": "Min Cell Size",
+                                "description": "Minimum size of honeycomb cells in pixels"
+                            },
+                            "enabled": enabled
+                        }
+                    });
+
+                    // Broadcast the control exposure to clients
+                    self.broadcast_envelope(None, None, Some(controls_json), false)?;
+                }
+            }
+        }
         Ok(())
     }
 
@@ -1462,7 +1739,7 @@ impl RealTimeVizEngine {
                 );
 
                 self.configure_controller_for_layout(&algorithm);
-                self.broadcast_view_state()?;
+                self.broadcast_view_state().await?;
 
                 // Update the current layout algorithm and params in state
                 {
@@ -1497,7 +1774,7 @@ impl RealTimeVizEngine {
         Ok(())
     }
 
-    fn broadcast_view_state(&mut self) -> GraphResult<()> {
+    async fn broadcast_view_state(&mut self) -> GraphResult<()> {
         if let Some(view) = self.active_controller.view_3d() {
             let view_json = json!({
                 "view_3d": {
@@ -1506,7 +1783,16 @@ impl RealTimeVizEngine {
                     "quat": view.quat,
                 }
             });
-            self.broadcast_envelope(None, None, Some(view_json), false)?;
+
+            // For 3D controllers, re-project embedding with view transform to show visible orbiting
+            if self.active_controller.name() == "globe-3d" {
+                eprintln!("🌐 DEBUG: Globe controller view changed, triggering re-projection for orbiting");
+                // Trigger view-aware projection that applies 3D transform before 2D projection
+                self.trigger_view_aware_projection(view.clone()).await?;
+            } else {
+                // For non-globe 3D controllers, just broadcast view state
+                self.broadcast_envelope(None, None, Some(view_json), false)?;
+            }
         } else if let Some(view) = self.active_controller.view_2d() {
             let view_json = json!({
                 "view_2d": {
@@ -1544,6 +1830,33 @@ impl RealTimeVizEngine {
             "🎮 DEBUG: Active interaction controller set to {}",
             self.active_controller.name()
         );
+
+        // Activate the controller and get any commands it wants to send
+        let embedding_dims = {
+            let state = self.state.lock().unwrap();
+            state.embedding.as_ref().map(|emb| emb.shape().1)
+        };
+
+        let activation_commands = self.active_controller.on_activate(embedding_dims);
+
+        // Process activation commands (like exposing auto-scale controls)
+        if !activation_commands.is_empty() {
+            eprintln!("🔧 DEBUG: Processing {} activation commands from controller",
+                     activation_commands.len());
+            // We need to spawn a task to process async commands, but for now just log them
+            for cmd in activation_commands {
+                match cmd {
+                    InteractionCommand::ExposeAutoScaleControls { target_occupancy, min_cell_size, enabled } => {
+                        eprintln!("🎛️  DEBUG: Controller requesting auto-scale UI exposure: occupancy={}, cell_size={}, enabled={}",
+                                 target_occupancy, min_cell_size, enabled);
+                        // TODO: Process this command properly in an async context
+                    }
+                    _ => {
+                        eprintln!("🔧 DEBUG: Other activation command: {:?}", cmd);
+                    }
+                }
+            }
+        }
     }
 
     fn configure_controller_for_layout(&mut self, algorithm: &str) {
@@ -1614,20 +1927,54 @@ impl RealTimeVizEngine {
 
         let nodes = rows.max(1) as f64;
         let config = &self.config.projection_config.honeycomb_config;
-        let target_avg = config.target_avg_occupancy.max(0.1);
-        let desired_cells = (nodes / target_avg).max(1.0);
 
-        let aspect = (width / height).clamp(0.2, 5.0);
-        let width_cells = (desired_cells * aspect).sqrt().max(1.0);
-        let height_cells = (desired_cells / width_cells).max(1.0);
+        // For optimal honeycomb layout, we want exactly one node per hex cell
+        // Calculate the number of cells needed for the given number of nodes
+        let target_occupancy = config.target_avg_occupancy.max(0.1);
+        let total_cells_needed = if target_occupancy >= 1.0 {
+            // One node per cell (optimal case)
+            nodes
+        } else {
+            // Multiple nodes per cell (fallback)
+            nodes / target_occupancy
+        };
+
+        // Calculate honeycomb grid dimensions
+        // For a hexagonal packing, we need to account for the hexagonal geometry
+        let aspect_ratio = (width / height).clamp(0.5, 2.0);
+
+        // Estimate the number of rings needed for a spiral pattern
+        // A spiral with n rings contains approximately 3*n*(n+1)+1 cells
+        let rings_needed = if total_cells_needed <= 1.0 {
+            1
+        } else {
+            // Solve: 3*n*(n+1)+1 = total_cells_needed for n
+            let approx_rings = ((-3.0 + (9.0 + 12.0 * (total_cells_needed - 1.0)).sqrt()) / 6.0).ceil() as usize;
+            approx_rings.max(1)
+        };
+
+        // Calculate the bounding box of a honeycomb spiral with the needed rings
+        let hex_width = rings_needed as f64 * 2.0 * (3.0f64).sqrt();  // Width in hex units
+        let hex_height = rings_needed as f64 * 3.0;                    // Height in hex units
+
+        // Calculate cell size to fit the honeycomb pattern within the data bounds
+        let cell_size_for_width = width / hex_width;
+        let cell_size_for_height = height / hex_height;
+
+        // Use the smaller size to ensure the pattern fits
+        let mut optimal_cell_size = cell_size_for_width.min(cell_size_for_height);
+
+        // Apply minimum cell size constraint
+        optimal_cell_size = optimal_cell_size.max(config.min_cell_size);
 
-        let cell_x = width / (width_cells * (3.0f64).sqrt());
-        let cell_y = height / (height_cells * 1.5);
-        let mut cell = cell_x.min(cell_y);
-        cell = cell.max(config.min_cell_size);
+        eprintln!("🔧 DEBUG: Honeycomb auto-scale calculation:");
+        eprintln!("   - Nodes: {}, Target occupancy: {}", nodes, target_occupancy);
+        eprintln!("   - Data bounds: {}x{}", width, height);
+        eprintln!("   - Estimated rings: {}, Hex dimensions: {}x{}", rings_needed, hex_width, hex_height);
+        eprintln!("   - Calculated cell size: {}", optimal_cell_size);
 
-        if cell.is_finite() {
-            Some(cell)
+        if optimal_cell_size.is_finite() && optimal_cell_size > 0.0 {
+            Some(optimal_cell_size)
         } else {
             None
         }
diff --git a/src/viz/realtime/interaction/globe_controller.rs b/src/viz/realtime/interaction/globe_controller.rs
index da7872dd..736f2386 100644
--- a/src/viz/realtime/interaction/globe_controller.rs
+++ b/src/viz/realtime/interaction/globe_controller.rs
@@ -1,7 +1,8 @@
 use super::math::{clamp, Quat, Vec3};
 use super::{
-    InteractionController, NodeDragEvent, PointerEvent, PointerPhase, ViewState3D, WheelEvent,
+    InteractionCommand, InteractionController, NodeDragEvent, PointerEvent, PointerPhase, ViewState3D, WheelEvent,
 };
+use std::any::Any;
 
 pub struct GlobeController {
     view: ViewState3D,
@@ -95,7 +96,7 @@ impl InteractionController for GlobeController {
         "globe-3d"
     }
 
-    fn on_pointer(&mut self, ev: PointerEvent) {
+    fn on_pointer(&mut self, ev: PointerEvent) -> Vec<InteractionCommand> {
         match ev.phase {
             PointerPhase::Start => {
                 self.dragging = true;
@@ -111,18 +112,30 @@ impl InteractionController for GlobeController {
             PointerPhase::End => self.dragging = false,
             _ => {}
         }
+        Vec::new()
     }
 
-    fn on_wheel(&mut self, ev: WheelEvent) {
+    fn on_wheel(&mut self, ev: WheelEvent) -> Vec<InteractionCommand> {
         match ev {
             WheelEvent::Zoom { delta } => self.zoom(delta),
             WheelEvent::Rotate { delta } => self.roll(delta),
         }
+        Vec::new()
     }
 
-    fn on_node_drag(&mut self, _ev: NodeDragEvent) {}
+    fn on_node_drag(&mut self, _ev: NodeDragEvent) -> Vec<InteractionCommand> {
+        Vec::new()
+    }
 
     fn view_3d(&self) -> Option<ViewState3D> {
         Some(self.view.clone())
     }
+
+    fn on_activate(&mut self, _embedding_dims: Option<usize>) -> Vec<InteractionCommand> {
+        Vec::new()
+    }
+
+    fn as_any(&mut self) -> &mut dyn Any {
+        self
+    }
 }
diff --git a/src/viz/realtime/interaction/mod.rs b/src/viz/realtime/interaction/mod.rs
index 5b86d6c7..c944fee8 100644
--- a/src/viz/realtime/interaction/mod.rs
+++ b/src/viz/realtime/interaction/mod.rs
@@ -1,7 +1,8 @@
 use serde::{Deserialize, Serialize};
+use std::any::Any;
 
 pub mod globe_controller;
-mod math;
+pub mod math;
 pub mod pan_controller;
 
 pub use globe_controller::GlobeController;
@@ -59,13 +60,30 @@ pub struct ViewState3D {
     pub quat: [f64; 4],
 }
 
+/// Command that interaction controllers can send back to the engine
+#[derive(Debug, Clone)]
+pub enum InteractionCommand {
+    RotateEmbedding { axis_i: usize, axis_j: usize, radians: f64 },
+    TriggerRecomputation,
+    UpdateAutoScale { target_occupancy: f64, min_cell_size: f64 },
+    ExposeAutoScaleControls { target_occupancy: f64, min_cell_size: f64, enabled: bool },
+}
+
 /// Unified interaction controller interface
 pub trait InteractionController: Send {
     fn name(&self) -> &str;
 
-    fn on_pointer(&mut self, _ev: PointerEvent) {}
-    fn on_wheel(&mut self, _ev: WheelEvent) {}
-    fn on_node_drag(&mut self, _ev: NodeDragEvent) {}
+    fn on_pointer(&mut self, _ev: PointerEvent) -> Vec<InteractionCommand> {
+        Vec::new()
+    }
+
+    fn on_wheel(&mut self, _ev: WheelEvent) -> Vec<InteractionCommand> {
+        Vec::new()
+    }
+
+    fn on_node_drag(&mut self, _ev: NodeDragEvent) -> Vec<InteractionCommand> {
+        Vec::new()
+    }
 
     fn view_2d(&self) -> Option<ViewState2D> {
         None
@@ -74,6 +92,14 @@ pub trait InteractionController: Send {
     fn view_3d(&self) -> Option<ViewState3D> {
         None
     }
+
+    /// Called when controller is activated to set up context
+    fn on_activate(&mut self, _embedding_dims: Option<usize>) -> Vec<InteractionCommand> {
+        Vec::new()
+    }
+
+    /// Support for downcasting to specific controller types
+    fn as_any(&mut self) -> &mut dyn Any;
 }
 
 /// Policies for node dragging based on layout
@@ -92,12 +118,125 @@ pub enum CanvasDragPolicy {
     RotateNdThenProject,
 }
 
-/// Default honeycomb placeholder controller (reuses legacy logic incrementally)
-pub struct HoneycombController;
+/// Honeycomb controller for N-dimensional embeddings with drag constraints and rotation
+pub struct HoneycombController {
+    /// Current N-D rotation state as axis pairs and angles
+    rotations: Vec<(usize, usize, f64)>, // (axis_i, axis_j, radians)
+
+    /// Node drag constraints policy
+    drag_policy: NodeDragPolicy,
+
+    /// Active node being dragged
+    dragging_node: Option<usize>,
+
+    /// Starting position of current drag
+    drag_start: Option<(f64, f64)>,
+
+    /// Sensitivity settings for different interactions
+    rotation_sensitivity: f64,
+    drag_sensitivity: f64,
+
+    /// Embedding dimensions count (determined at runtime)
+    embedding_dims: Option<usize>,
+
+    /// Auto-scaling parameters (will be configurable via param plumbing)
+    target_occupancy: f64,
+    min_cell_size: f64,
+    auto_scale_enabled: bool,
+}
 
 impl HoneycombController {
     pub fn new() -> Self {
-        Self
+        Self {
+            rotations: Vec::new(),
+            drag_policy: NodeDragPolicy::Constrained,
+            dragging_node: None,
+            drag_start: None,
+            rotation_sensitivity: 0.01,
+            drag_sensitivity: 1.0,
+            embedding_dims: None,
+            target_occupancy: 1.0,  // One node per hexagonal cell for optimal clarity
+            min_cell_size: 10.0,
+            auto_scale_enabled: true,
+        }
+    }
+
+    /// Update embedding dimensions when layout changes
+    pub fn set_embedding_dims(&mut self, dims: usize) {
+        self.embedding_dims = Some(dims);
+        // Clear rotations that reference dimensions beyond the new count
+        self.rotations.retain(|(i, j, _)| *i < dims && *j < dims);
+    }
+
+    /// Configure auto-scaling parameters
+    pub fn configure_auto_scaling(&mut self, target_occupancy: f64, min_cell_size: f64, enabled: bool) {
+        self.target_occupancy = target_occupancy;
+        self.min_cell_size = min_cell_size;
+        self.auto_scale_enabled = enabled;
+    }
+
+    /// Add or update N-D rotation between two axes
+    pub fn rotate_embedding_axes(&mut self, axis_i: usize, axis_j: usize, radians: f64) {
+        // Check if embedding dimensions are set and axes are valid
+        if let Some(dims) = self.embedding_dims {
+            if axis_i >= dims || axis_j >= dims || axis_i == axis_j {
+                eprintln!("🔴 WARNING: Invalid axis rotation request: axis_i={}, axis_j={}, dims={}",
+                         axis_i, axis_j, dims);
+                return;
+            }
+        }
+
+        // Find existing rotation for this axis pair or add new one
+        if let Some(existing) = self.rotations.iter_mut().find(|(i, j, _)|
+            (*i == axis_i && *j == axis_j) || (*i == axis_j && *j == axis_i)) {
+            existing.2 += radians;
+        } else {
+            self.rotations.push((axis_i, axis_j, radians));
+        }
+
+        eprintln!("🔄 DEBUG: Added N-D rotation {} radians between axes {} and {}",
+                  radians, axis_i, axis_j);
+    }
+
+    /// Get current rotation transformations for broadcasting to engine
+    pub fn get_rotations(&self) -> &Vec<(usize, usize, f64)> {
+        &self.rotations
+    }
+
+    /// Apply drag constraints based on policy
+    fn constrain_drag_position(&self, node_id: usize, x: f64, y: f64) -> (f64, f64) {
+        match self.drag_policy {
+            NodeDragPolicy::Disabled => {
+                // Don't allow any movement
+                if let Some((start_x, start_y)) = self.drag_start {
+                    (start_x, start_y)
+                } else {
+                    (x, y)
+                }
+            },
+            NodeDragPolicy::Free => {
+                // Allow unlimited movement
+                (x, y)
+            },
+            NodeDragPolicy::Constrained => {
+                // Apply honeycomb-specific constraints
+                self.apply_honeycomb_constraints(node_id, x, y)
+            }
+        }
+    }
+
+    /// Apply honeycomb-specific drag constraints
+    fn apply_honeycomb_constraints(&self, _node_id: usize, x: f64, y: f64) -> (f64, f64) {
+        // For honeycomb layout, we might want to:
+        // 1. Snap to hex grid positions
+        // 2. Maintain minimum cell spacing
+        // 3. Preserve hexagonal neighborhood relationships
+
+        // For now, just apply minimum cell size constraint
+        let constrained_x = x.clamp(-1000.0, 1000.0); // Reasonable bounds
+        let constrained_y = y.clamp(-1000.0, 1000.0);
+
+        (constrained_x, constrained_y)
     }
 }
 
@@ -105,4 +244,134 @@ impl InteractionController for HoneycombController {
     fn name(&self) -> &str {
         "honeycomb-nd"
     }
+
+    fn on_pointer(&mut self, ev: PointerEvent) -> Vec<InteractionCommand> {
+        let mut commands = Vec::new();
+        match ev.phase {
+            PointerPhase::Start => {
+                self.drag_start = Some((0.0, 0.0)); // Will be updated with actual position
+                eprintln!("🫸 DEBUG: Honeycomb pointer start");
+            }
+            PointerPhase::Move => {
+                if self.drag_start.is_some() {
+                    if ev.shift && ev.ctrl {
+                        // Shift+Ctrl: Trigger N-D rotation on first two available axes
+                        if let Some(dims) = self.embedding_dims {
+                            if dims >= 2 {
+                                let rotation_amount = ev.dx * self.rotation_sensitivity;
+                                self.rotate_embedding_axes(0, 1, rotation_amount);
+                                commands.push(InteractionCommand::RotateEmbedding {
+                                    axis_i: 0,
+                                    axis_j: 1,
+                                    radians: rotation_amount,
+                                });
+                            }
+                        }
+                    } else if ev.shift {
+                        // Shift: Rotate different axis pair
+                        if let Some(dims) = self.embedding_dims {
+                            if dims >= 3 {
+                                let rotation_amount = ev.dx * self.rotation_sensitivity;
+                                self.rotate_embedding_axes(1, 2, rotation_amount);
+                                commands.push(InteractionCommand::RotateEmbedding {
+                                    axis_i: 1,
+                                    axis_j: 2,
+                                    radians: rotation_amount,
+                                });
+                            }
+                        }
+                    }
+                    // Regular pan/move would be handled by engine based on drag policy
+                }
+            }
+            PointerPhase::End => {
+                self.drag_start = None;
+                self.dragging_node = None;
+                eprintln!("🫸 DEBUG: Honeycomb pointer end");
+            }
+        }
+        commands
+    }
+
+    fn on_wheel(&mut self, ev: WheelEvent) -> Vec<InteractionCommand> {
+        let mut commands = Vec::new();
+        match ev {
+            WheelEvent::Zoom { delta: _ } => {
+                // Zoom could trigger auto-scaling adjustments
+                if self.auto_scale_enabled {
+                    eprintln!("🔍 DEBUG: Honeycomb zoom - considering auto-scale adjustments");
+                }
+            }
+            WheelEvent::Rotate { delta } => {
+                // Wheel rotation could trigger N-D axis rotations
+                if let Some(dims) = self.embedding_dims {
+                    if dims >= 2 {
+                        let rotation_amount = delta * self.rotation_sensitivity * 0.1;
+                        self.rotate_embedding_axes(0, 1, rotation_amount);
+                        commands.push(InteractionCommand::RotateEmbedding {
+                            axis_i: 0,
+                            axis_j: 1,
+                            radians: rotation_amount,
+                        });
+                    }
+                }
+            }
+        }
+        commands
+    }
+
+    fn on_node_drag(&mut self, ev: NodeDragEvent) -> Vec<InteractionCommand> {
+        let mut commands = Vec::new();
+        match ev {
+            NodeDragEvent::Start { node_id, x, y } => {
+                self.dragging_node = Some(node_id);
+                self.drag_start = Some((x, y));
+                eprintln!("🎯 DEBUG: Honeycomb node drag start: node={}, pos=({:.1}, {:.1})",
+                         node_id, x, y);
+            }
+            NodeDragEvent::Move { node_id, x, y } => {
+                if self.dragging_node == Some(node_id) {
+                    let (constrained_x, constrained_y) = self.constrain_drag_position(node_id, x, y);
+                    if (constrained_x - x).abs() > 0.1 || (constrained_y - y).abs() > 0.1 {
+                        eprintln!("⚠️  DEBUG: Honeycomb drag constrained: ({:.1}, {:.1}) -> ({:.1}, {:.1})",
+                                 x, y, constrained_x, constrained_y);
+                    }
+                    // The engine would use the constrained position for actual updates
+                }
+            }
+            NodeDragEvent::End { node_id } => {
+                if self.dragging_node == Some(node_id) {
+                    self.dragging_node = None;
+                    self.drag_start = None;
+                    eprintln!("🎯 DEBUG: Honeycomb node drag end: node={}", node_id);
+                }
+            }
+        }
+        commands
+    }
+
+    fn on_activate(&mut self, embedding_dims: Option<usize>) -> Vec<InteractionCommand> {
+        let mut commands = Vec::new();
+
+        if let Some(dims) = embedding_dims {
+            self.set_embedding_dims(dims);
+            eprintln!("🔧 DEBUG: Honeycomb controller activated with {} dimensions", dims);
+        }
+
+        // When honeycomb controller is activated, expose auto-scaling controls in UI
+        commands.push(InteractionCommand::ExposeAutoScaleControls {
+            target_occupancy: self.target_occupancy,
+            min_cell_size: self.min_cell_size,
+            enabled: self.auto_scale_enabled,
+        });
+
+        eprintln!("🎛️  DEBUG: Honeycomb auto-scale controls exposed - occupancy: {}, cell_size: {}, enabled: {}",
+                 self.target_occupancy, self.min_cell_size, self.auto_scale_enabled);
+
+        commands
+    }
+
+    fn as_any(&mut self) -> &mut dyn Any {
+        self
+    }
 }
diff --git a/src/viz/realtime/interaction/pan_controller.rs b/src/viz/realtime/interaction/pan_controller.rs
index 75f54ffc..bec51c14 100644
--- a/src/viz/realtime/interaction/pan_controller.rs
+++ b/src/viz/realtime/interaction/pan_controller.rs
@@ -1,6 +1,7 @@
 use super::{
-    InteractionController, NodeDragEvent, PointerEvent, PointerPhase, ViewState2D, WheelEvent,
+    InteractionCommand, InteractionController, NodeDragEvent, PointerEvent, PointerPhase, ViewState2D, WheelEvent,
 };
+use std::any::Any;
 
 pub struct PanController {
     view: ViewState2D,
@@ -30,7 +31,7 @@ impl InteractionController for PanController {
         "pan-2d"
     }
 
-    fn on_pointer(&mut self, ev: PointerEvent) {
+    fn on_pointer(&mut self, ev: PointerEvent) -> Vec<InteractionCommand> {
         match ev.phase {
             PointerPhase::Start => self.dragging = true,
             PointerPhase::Move => {
@@ -45,9 +46,10 @@ impl InteractionController for PanController {
             }
             PointerPhase::End => self.dragging = false,
         }
+        Vec::new()
     }
 
-    fn on_wheel(&mut self, ev: WheelEvent) {
+    fn on_wheel(&mut self, ev: WheelEvent) -> Vec<InteractionCommand> {
         match ev {
             WheelEvent::Zoom { delta } => {
                 let factor = if delta < 0.0 { 1.1 } else { 0.9 };
@@ -57,11 +59,22 @@ impl InteractionController for PanController {
                 self.view.rotation += delta * 0.01;
             }
         }
+        Vec::new()
     }
 
-    fn on_node_drag(&mut self, _ev: NodeDragEvent) {}
+    fn on_node_drag(&mut self, _ev: NodeDragEvent) -> Vec<InteractionCommand> {
+        Vec::new()
+    }
 
     fn view_2d(&self) -> Option<ViewState2D> {
         Some(self.view.clone())
     }
+
+    fn on_activate(&mut self, _embedding_dims: Option<usize>) -> Vec<InteractionCommand> {
+        Vec::new()
+    }
+
+    fn as_any(&mut self) -> &mut dyn Any {
+        self
+    }
 }
