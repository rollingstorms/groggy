{
  "types": {
    "functions": [
      {
        "name": "type_name",
        "signature": "(&self) -> &'static str ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Get runtime type information as string",
        "line": 68
      },
      {
        "name": "as_float",
        "signature": "(&self) -> Option<f32> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Try to convert to specific type with error handling",
        "line": 73
      },
      {
        "name": "as_int",
        "signature": "(&self) -> Option<i64> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "",
        "line": 77
      },
      {
        "name": "as_text",
        "signature": "(&self) -> Option<&str> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "",
        "line": 81
      },
      {
        "name": "as_float_vec",
        "signature": "(&self) -> Option<&[f32]> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "",
        "line": 85
      },
      {
        "name": "as_bool",
        "signature": "(&self) -> Option<bool> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "",
        "line": 89
      }
    ],
    "structs": [],
    "traits": [],
    "impls": [
      {
        "struct_name": "AttrValue",
        "trait_name": "Hash",
        "line": 61
      },
      {
        "struct_name": "AttrValue",
        "trait_name": null,
        "line": 65
      }
    ]
  },
  "util": {
    "functions": [
      {
        "name": "attr_value_hash",
        "signature": "(value: &AttrValue) -> u64 ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "we know the structure of AttrValue and can optimize accordingly",
        "line": 74
      },
      {
        "name": "merge_sorted_indices",
        "signature": "(a: &[usize], b: &[usize]) -> Vec<usize> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "USE CASES: Merging index lists, combining sorted query results",
        "line": 116
      },
      {
        "name": "binary_search_insert_point",
        "signature": "(vec: &[usize], value: usize) -> usize ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "If value already exists, returns the index of the existing element",
        "line": 149
      },
      {
        "name": "validate_attr_compatibility",
        "signature": "(existing: &AttrValue, new: &AttrValue) -> bool ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "is compatible with the existing type",
        "line": 162
      },
      {
        "name": "timestamp_now",
        "signature": "() -> u64 ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "FALLBACK: Returns 0 if system time is unavailable",
        "line": 173
      },
      {
        "name": "test_merge_sorted_indices",
        "signature": "()",
        "visibility": "private",
        "is_todo": false,
        "doc_comment": "",
        "line": 187
      },
      {
        "name": "test_merge_with_duplicates",
        "signature": "()",
        "visibility": "private",
        "is_todo": false,
        "doc_comment": "",
        "line": 195
      }
    ],
    "structs": [],
    "traits": [],
    "impls": []
  },
  "config": {
    "functions": [
      {
        "name": "new",
        "signature": "() -> Self ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Create a new configuration with reasonable defaults",
        "line": 184
      },
      {
        "name": "memory_optimized",
        "signature": "() -> Self ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "- Frequent snapshots to keep delta chains short",
        "line": 226
      },
      {
        "name": "performance_optimized",
        "signature": "() -> Self ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "- Minimal garbage collection",
        "line": 243
      },
      {
        "name": "development_optimized",
        "signature": "() -> Self ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "- Conservative resource usage",
        "line": 259
      },
      {
        "name": "production_optimized",
        "signature": "() -> Self ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "- Error handling without debug overhead",
        "line": 280
      },
      {
        "name": "validate",
        "signature": "(&self) -> Result<(), ConfigError> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Validate the configuration and return errors if invalid",
        "line": 293
      },
      {
        "name": "effective_worker_threads",
        "signature": "(&self) -> usize ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "(resolves 0 to actual CPU count)",
        "line": 306
      },
      {
        "name": "memory_cleanup_threshold",
        "signature": "(&self) -> usize ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Calculate the memory threshold for triggering cleanup",
        "line": 316
      },
      {
        "name": "with_memory_limit",
        "signature": "(mut self, limit: usize) -> Self ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Create a new configuration with updated memory limit",
        "line": 327
      },
      {
        "name": "with_cache_settings",
        "signature": "(mut self, enable_query_cache: bool, cache_size: usize) -> Self ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Create a new configuration with updated cache settings",
        "line": 332
      },
      {
        "name": "with_worker_threads",
        "signature": "(mut self, threads: usize) -> Self ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Create a new configuration with updated worker thread count",
        "line": 337
      },
      {
        "name": "with_storage_strategy",
        "signature": "(mut self, strategy: StorageStrategyType) -> Self ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Create a new configuration with specific temporal storage strategy",
        "line": 342
      },
      {
        "name": "from_environment",
        "signature": "(mut self) -> Self ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "- GROGGY_COMPRESSION_LEVEL: Compression level (1-9)",
        "line": 359
      },
      {
        "name": "to_environment",
        "signature": "(&self)",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Save current configuration to environment variables",
        "line": 381
      },
      {
        "name": "default",
        "signature": "() -> Self ",
        "visibility": "private",
        "is_todo": false,
        "doc_comment": "",
        "line": 388
      },
      {
        "name": "fmt",
        "signature": "(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result ",
        "visibility": "private",
        "is_todo": false,
        "doc_comment": "",
        "line": 413
      }
    ],
    "structs": [
      {
        "name": "GraphConfig",
        "visibility": "public",
        "line": 47
      }
    ],
    "traits": [],
    "impls": [
      {
        "struct_name": "GraphConfig",
        "trait_name": null,
        "line": 181
      },
      {
        "struct_name": "GraphConfig",
        "trait_name": "Default",
        "line": 386
      },
      {
        "struct_name": "std",
        "trait_name": null,
        "line": 411
      },
      {
        "struct_name": "std",
        "trait_name": null,
        "line": 438
      }
    ]
  },
  "lib": {
    "functions": [
      {
        "name": "info",
        "signature": "() -> LibraryInfo ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Get library information",
        "line": 163
      },
      {
        "name": "banner",
        "signature": "(&self) -> String ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Get a formatted string representation",
        "line": 181
      },
      {
        "name": "test_library_info",
        "signature": "()",
        "visibility": "private",
        "is_todo": false,
        "doc_comment": "",
        "line": 191
      },
      {
        "name": "test_basic_integration",
        "signature": "()",
        "visibility": "private",
        "is_todo": false,
        "doc_comment": "",
        "line": 199
      },
      {
        "name": "test_error_handling",
        "signature": "()",
        "visibility": "private",
        "is_todo": false,
        "doc_comment": "",
        "line": 251
      },
      {
        "name": "test_configuration",
        "signature": "()",
        "visibility": "private",
        "is_todo": false,
        "doc_comment": "",
        "line": 266
      }
    ],
    "structs": [
      {
        "name": "LibraryInfo",
        "visibility": "public",
        "line": 173
      }
    ],
    "traits": [],
    "impls": [
      {
        "struct_name": "LibraryInfo",
        "trait_name": null,
        "line": 178
      }
    ]
  },
  "errors": {
    "functions": [
      {
        "name": "node_not_found",
        "signature": "(node_id: NodeId, operation: &str) -> Self ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Create a NodeNotFound error with helpful context",
        "line": 309
      },
      {
        "name": "edge_not_found",
        "signature": "(edge_id: EdgeId, operation: &str) -> Self ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Create an EdgeNotFound error with helpful context",
        "line": 318
      },
      {
        "name": "state_not_found",
        "signature": "(state_id: StateId, operation: &str, available: Vec<StateId>) -> Self ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Create a StateNotFound error with available alternatives",
        "line": 327
      },
      {
        "name": "branch_not_found",
        "signature": "(branch_name: BranchName, operation: &str, available: Vec<BranchName>) -> Self ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Create a BranchNotFound error with available alternatives",
        "line": 336
      },
      {
        "name": "uncommitted_changes",
        "signature": "(operation: &str, change_count: usize) -> Self ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Create an UncommittedChanges error with helpful context",
        "line": 345
      },
      {
        "name": "internal",
        "signature": "(message: &str, location: &str) -> Self ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Create an InternalError for unexpected conditions",
        "line": 369
      },
      {
        "name": "is_user_error",
        "signature": "(&self) -> bool ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Check if this error indicates a user mistake (vs system problem)",
        "line": 396
      },
      {
        "name": "is_recoverable",
        "signature": "(&self) -> bool ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Check if this error might be recoverable",
        "line": 428
      },
      {
        "name": "category",
        "signature": "(&self) -> ErrorCategory ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Get the error category for grouping similar errors",
        "line": 449
      },
      {
        "name": "short_description",
        "signature": "(&self) -> String ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Get a short description suitable for logging",
        "line": 493
      },
      {
        "name": "suggestions",
        "signature": "(&self) -> Vec<String> ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Get actionable suggestions for resolving this error",
        "line": 509
      },
      {
        "name": "fmt",
        "signature": "(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result ",
        "visibility": "private",
        "is_todo": false,
        "doc_comment": "",
        "line": 570
      },
      {
        "name": "fmt",
        "signature": "(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result ",
        "visibility": "private",
        "is_todo": false,
        "doc_comment": "",
        "line": 605
      },
      {
        "name": "source",
        "signature": "(&self) -> Option<&(dyn std::error::Error + 'static)> ",
        "visibility": "private",
        "is_todo": true,
        "doc_comment": "",
        "line": 655
      },
      {
        "name": "io_error_to_graph_error",
        "signature": "(err: std::io::Error, operation: &str, path: &str) -> GraphError ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Convert a standard I/O error to a GraphError",
        "line": 666
      }
    ],
    "structs": [
      {
        "name": "MergeConflictDetail",
        "visibility": "public",
        "line": 583
      }
    ],
    "traits": [],
    "impls": [
      {
        "struct_name": "GraphError",
        "trait_name": null,
        "line": 301
      },
      {
        "struct_name": "std",
        "trait_name": null,
        "line": 568
      },
      {
        "struct_name": "std",
        "trait_name": null,
        "line": 603
      },
      {
        "struct_name": "std",
        "trait_name": null,
        "line": 653
      }
    ]
  },
  "core::strategies": {
    "functions": [
      {
        "name": "record_node_addition",
        "signature": "(&mut self, node_id: NodeId)",
        "visibility": "private",
        "is_todo": false,
        "doc_comment": "Record that a node was added to the graph",
        "line": 45
      },
      {
        "name": "record_node_removal",
        "signature": "(&mut self, node_id: NodeId)",
        "visibility": "private",
        "is_todo": false,
        "doc_comment": "Record that a node was removed from the graph",
        "line": 48
      },
      {
        "name": "record_edge_addition",
        "signature": "(&mut self, edge_id: EdgeId, source: NodeId, target: NodeId)",
        "visibility": "private",
        "is_todo": false,
        "doc_comment": "Record that an edge was added to the graph",
        "line": 51
      },
      {
        "name": "record_edge_removal",
        "signature": "(&mut self, edge_id: EdgeId)",
        "visibility": "private",
        "is_todo": false,
        "doc_comment": "Record that an edge was removed from the graph",
        "line": 54
      },
      {
        "name": "create_delta",
        "signature": "(&self) -> DeltaObject;",
        "visibility": "private",
        "is_todo": false,
        "doc_comment": "This is used when committing to history",
        "line": 82
      },
      {
        "name": "has_changes",
        "signature": "(&self) -> bool;",
        "visibility": "private",
        "is_todo": false,
        "doc_comment": "Check if there are any uncommitted changes",
        "line": 90
      },
      {
        "name": "change_count",
        "signature": "(&self) -> usize;",
        "visibility": "private",
        "is_todo": false,
        "doc_comment": "Get the total number of changes recorded",
        "line": 93
      },
      {
        "name": "clear_changes",
        "signature": "(&mut self)",
        "visibility": "private",
        "is_todo": false,
        "doc_comment": "Clear all recorded changes (after successful commit)",
        "line": 96
      },
      {
        "name": "strategy_name",
        "signature": "(&self) -> &'static str;",
        "visibility": "private",
        "is_todo": false,
        "doc_comment": "Get the name of this strategy",
        "line": 104
      },
      {
        "name": "storage_characteristics",
        "signature": "(&self) -> StorageCharacteristics;",
        "visibility": "private",
        "is_todo": false,
        "doc_comment": "Get performance characteristics of this strategy",
        "line": 107
      },
      {
        "name": "as_any",
        "signature": "(&mut self) -> &mut dyn std::any::Any;",
        "visibility": "private",
        "is_todo": false,
        "doc_comment": "This allows access to strategy-specific methods",
        "line": 111
      },
      {
        "name": "name",
        "signature": "(&self) -> &'static str ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Get a human-readable name for this strategy",
        "line": 162
      },
      {
        "name": "description",
        "signature": "(&self) -> &'static str ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Get a description of this strategy",
        "line": 169
      },
      {
        "name": "default",
        "signature": "() -> Self ",
        "visibility": "private",
        "is_todo": false,
        "doc_comment": "",
        "line": 178
      },
      {
        "name": "create_strategy",
        "signature": "(strategy_type: StorageStrategyType) -> Box<dyn TemporalStorageStrategy> ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "based on configuration without tight coupling to specific implementations.",
        "line": 187
      },
      {
        "name": "new",
        "signature": "() -> Self ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Create a new empty index delta strategy",
        "line": 247
      },
      {
        "name": "update_change_metadata",
        "signature": "(&mut self)",
        "visibility": "private",
        "is_todo": true,
        "doc_comment": "Helper method to update change metadata",
        "line": 302
      },
      {
        "name": "current_timestamp",
        "signature": "(&self) -> u64 ",
        "visibility": "private",
        "is_todo": true,
        "doc_comment": "Get current timestamp (placeholder - would use actual time in real implementation)",
        "line": 310
      },
      {
        "name": "record_node_addition",
        "signature": "(&mut self, node_id: NodeId)",
        "visibility": "private",
        "is_todo": false,
        "doc_comment": "",
        "line": 316
      },
      {
        "name": "record_node_removal",
        "signature": "(&mut self, node_id: NodeId)",
        "visibility": "private",
        "is_todo": false,
        "doc_comment": "",
        "line": 321
      },
      {
        "name": "record_edge_addition",
        "signature": "(&mut self, edge_id: EdgeId, source: NodeId, target: NodeId)",
        "visibility": "private",
        "is_todo": false,
        "doc_comment": "",
        "line": 328
      },
      {
        "name": "record_edge_removal",
        "signature": "(&mut self, edge_id: EdgeId)",
        "visibility": "private",
        "is_todo": false,
        "doc_comment": "",
        "line": 333
      },
      {
        "name": "create_delta",
        "signature": "(&self) -> DeltaObject ",
        "visibility": "private",
        "is_todo": false,
        "doc_comment": "",
        "line": 364
      },
      {
        "name": "has_changes",
        "signature": "(&self) -> bool ",
        "visibility": "private",
        "is_todo": false,
        "doc_comment": "",
        "line": 395
      },
      {
        "name": "change_count",
        "signature": "(&self) -> usize ",
        "visibility": "private",
        "is_todo": false,
        "doc_comment": "",
        "line": 404
      },
      {
        "name": "clear_changes",
        "signature": "(&mut self)",
        "visibility": "private",
        "is_todo": false,
        "doc_comment": "",
        "line": 408
      },
      {
        "name": "strategy_name",
        "signature": "(&self) -> &'static str ",
        "visibility": "private",
        "is_todo": false,
        "doc_comment": "",
        "line": 419
      },
      {
        "name": "storage_characteristics",
        "signature": "(&self) -> StorageCharacteristics ",
        "visibility": "private",
        "is_todo": false,
        "doc_comment": "",
        "line": 423
      },
      {
        "name": "as_any",
        "signature": "(&mut self) -> &mut dyn std::any::Any ",
        "visibility": "private",
        "is_todo": false,
        "doc_comment": "",
        "line": 435
      },
      {
        "name": "default",
        "signature": "() -> Self ",
        "visibility": "private",
        "is_todo": false,
        "doc_comment": "",
        "line": 441
      }
    ],
    "structs": [
      {
        "name": "StorageCharacteristics",
        "visibility": "public",
        "line": 119
      },
      {
        "name": "IndexDeltaStrategy",
        "visibility": "public",
        "line": 215
      }
    ],
    "traits": [
      {
        "name": "TemporalStorageStrategy",
        "visibility": "public",
        "line": 38
      }
    ],
    "impls": [
      {
        "struct_name": "StorageStrategyType",
        "trait_name": null,
        "line": 159
      },
      {
        "struct_name": "StorageStrategyType",
        "trait_name": "Default",
        "line": 176
      },
      {
        "struct_name": "IndexDeltaStrategy",
        "trait_name": null,
        "line": 244
      },
      {
        "struct_name": "IndexDeltaStrategy",
        "trait_name": "TemporalStorageStrategy",
        "line": 314
      },
      {
        "struct_name": "IndexDeltaStrategy",
        "trait_name": "Default",
        "line": 439
      }
    ]
  },
  "core::query": {
    "functions": [
      {
        "name": "new",
        "signature": "() -> Self ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Create a new query engine with default configuration",
        "line": 80
      },
      {
        "name": "with_config",
        "signature": "(config: QueryConfig) -> Self ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Create a query engine with custom configuration",
        "line": 86
      },
      {
        "name": "update_statistics",
        "signature": "(&mut self, pool: &GraphPool) -> GraphResult<()> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "This is used for query optimization",
        "line": 238
      },
      {
        "name": "clear_cache",
        "signature": "(&mut self)",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Clear the query cache (useful after large data changes)",
        "line": 246
      },
      {
        "name": "cache_statistics",
        "signature": "(&self) -> CacheStatistics ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Get cache statistics",
        "line": 251
      },
      {
        "name": "optimize_query_plan",
        "signature": "(&self, plan: QueryPlan) -> QueryPlan ",
        "visibility": "private",
        "is_todo": true,
        "doc_comment": "Optimize a query plan before execution",
        "line": 256
      },
      {
        "name": "default",
        "signature": "() -> Self ",
        "visibility": "private",
        "is_todo": true,
        "doc_comment": "",
        "line": 326
      },
      {
        "name": "matches",
        "signature": "(&self, value: &AttrValue) -> bool ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Check if a value matches this filter",
        "line": 373
      },
      {
        "name": "estimated_selectivity",
        "signature": "(&self, stats: &AttributeStatistics) -> f64 ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Estimate the selectivity of this filter (0.0 = very selective, 1.0 = not selective)",
        "line": 378
      },
      {
        "name": "default",
        "signature": "() -> Self ",
        "visibility": "private",
        "is_todo": false,
        "doc_comment": "",
        "line": 785
      }
    ],
    "structs": [
      {
        "name": "QueryEngine",
        "visibility": "public",
        "line": 49
      },
      {
        "name": "QueryConfig",
        "visibility": "public",
        "line": 308
      },
      {
        "name": "DegreeFilter",
        "visibility": "public",
        "line": 431
      },
      {
        "name": "NodePattern",
        "visibility": "public",
        "line": 439
      },
      {
        "name": "NeighborPattern",
        "visibility": "public",
        "line": 452
      },
      {
        "name": "StructureMatch",
        "visibility": "public",
        "line": 510
      },
      {
        "name": "GraphQuery",
        "visibility": "public",
        "line": 523
      },
      {
        "name": "AggregateOperation",
        "visibility": "public",
        "line": 569
      },
      {
        "name": "OrderBy",
        "visibility": "public",
        "line": 625
      },
      {
        "name": "GroupBy",
        "visibility": "public",
        "line": 638
      },
      {
        "name": "AggregationResult",
        "visibility": "public",
        "line": 675
      },
      {
        "name": "AggregationMetadata",
        "visibility": "public",
        "line": 692
      },
      {
        "name": "DegreeDistribution",
        "visibility": "public",
        "line": 710
      },
      {
        "name": "CachedQueryResult",
        "visibility": "private",
        "line": 724
      },
      {
        "name": "AttributeStatistics",
        "visibility": "public",
        "line": 733
      },
      {
        "name": "QueryPerformance",
        "visibility": "private",
        "line": 744
      },
      {
        "name": "CacheStatistics",
        "visibility": "public",
        "line": 753
      },
      {
        "name": "QueryPlan",
        "visibility": "private",
        "line": 770
      }
    ],
    "traits": [],
    "impls": [
      {
        "struct_name": "QueryEngine",
        "trait_name": null,
        "line": 77
      },
      {
        "struct_name": "QueryConfig",
        "trait_name": "Default",
        "line": 324
      },
      {
        "struct_name": "AttributeFilter",
        "trait_name": null,
        "line": 370
      },
      {
        "struct_name": "QueryEngine",
        "trait_name": "Default",
        "line": 783
      }
    ]
  },
  "core::history": {
    "functions": [
      {
        "name": "new",
        "signature": "() -> Self ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Create a new empty history system",
        "line": 96
      },
      {
        "name": "create_branch",
        "signature": "(&mut self, name: BranchName, commit_id: StateId) -> Result<(), GraphError> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Create a new branch pointing to a specific commit",
        "line": 153
      },
      {
        "name": "delete_branch",
        "signature": "(&mut self, name: &BranchName) -> Result<(), GraphError> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Delete a branch (but not the commits it pointed to)",
        "line": 161
      },
      {
        "name": "update_branch_head",
        "signature": "(&mut self, name: &BranchName, new_head: StateId) -> Result<(), GraphError> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Update a branch to point to a different commit (e.g., after new commit)",
        "line": 169
      },
      {
        "name": "list_branches",
        "signature": "(&self) -> Vec<BranchInfo> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "List all branches with their head commits",
        "line": 176
      },
      {
        "name": "get_branch_head",
        "signature": "(&self, name: &BranchName) -> Result<StateId, GraphError> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Get the head commit of a branch",
        "line": 181
      },
      {
        "name": "get_commit",
        "signature": "(&self, state_id: StateId) -> Result<Arc<Commit>, GraphError> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Get a specific commit by ID",
        "line": 191
      },
      {
        "name": "get_commit_history",
        "signature": "(&self) -> Vec<Arc<Commit>> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Get all commits in chronological order",
        "line": 196
      },
      {
        "name": "get_branch_history",
        "signature": "(&self, branch_name: &BranchName) -> Result<Vec<Arc<Commit>>, GraphError> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Get the commit history for a specific branch (following parent chain)",
        "line": 201
      },
      {
        "name": "get_children",
        "signature": "(&self, commit_id: StateId) -> Vec<StateId> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Get all children of a commit",
        "line": 209
      },
      {
        "name": "get_parents",
        "signature": "(&self, commit_id: StateId) -> Result<Vec<StateId>, GraphError> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Get the parent(s) of a commit",
        "line": 214
      },
      {
        "name": "is_ancestor",
        "signature": "(&self, ancestor: StateId, descendant: StateId) -> Result<bool, GraphError> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Check if one commit is an ancestor of another",
        "line": 219
      },
      {
        "name": "find_common_ancestor",
        "signature": "(&self, commit1: StateId, commit2: StateId) -> Result<Option<StateId>, GraphError> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Find the lowest common ancestor of two commits (useful for merging)",
        "line": 224
      },
      {
        "name": "diff_commits",
        "signature": "(&self, from: StateId, to: StateId) -> Result<CommitDiff, GraphError> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Compute the changes between two commits",
        "line": 234
      },
      {
        "name": "get_commit_delta",
        "signature": "(&self, commit_id: StateId) -> Result<Arc<Delta>, GraphError> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Get the delta (direct changes) introduced by a specific commit",
        "line": 243
      },
      {
        "name": "reconstruct_state_at",
        "signature": "(&self, commit_id: StateId) -> Result<GraphSnapshot, GraphError> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "This is expensive but necessary for time-travel functionality",
        "line": 254
      },
      {
        "name": "get_delta_sequence",
        "signature": "(&self, from: StateId, to: StateId) -> Result<Vec<Arc<Delta>>, GraphError> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Get the sequence of deltas needed to go from one commit to another",
        "line": 263
      },
      {
        "name": "find_reachable_commits",
        "signature": "(&self) -> HashSet<StateId> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Find all commits reachable from branches and tags",
        "line": 273
      },
      {
        "name": "garbage_collect",
        "signature": "(&mut self, keep_commits: &HashSet<StateId>) -> usize ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Remove unreachable commits and their deltas",
        "line": 281
      },
      {
        "name": "statistics",
        "signature": "(&self) -> HistoryStatistics ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Get statistics about the history system",
        "line": 296
      },
      {
        "name": "list_all_commits",
        "signature": "(&self) -> Vec<StateId> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "List all commit IDs in the system",
        "line": 301
      },
      {
        "name": "has_commit",
        "signature": "(&self, commit_id: StateId) -> bool ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Check if a commit exists",
        "line": 306
      },
      {
        "name": "is_root",
        "signature": "(&self) -> bool ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Check if this is a root commit (no parents)",
        "line": 357
      },
      {
        "name": "is_merge",
        "signature": "(&self) -> bool ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Check if this is a merge commit (multiple parents)",
        "line": 362
      },
      {
        "name": "from_changes",
        "signature": "(changes: ChangeSet) -> Self ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Create a delta from a change set",
        "line": 396
      },
      {
        "name": "is_empty",
        "signature": "(&self) -> bool ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Check if this delta is empty (no changes)",
        "line": 402
      },
      {
        "name": "summary",
        "signature": "(&self) -> String ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Get a summary of what changed",
        "line": 407
      },
      {
        "name": "default",
        "signature": "() -> Self ",
        "visibility": "private",
        "is_todo": false,
        "doc_comment": "",
        "line": 454
      },
      {
        "name": "new",
        "signature": "(history: &'a HistoryForest, state_id: StateId) -> GraphResult<Self> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "LAZY: Doesn't reconstruct the state until needed",
        "line": 521
      },
      {
        "name": "get_snapshot",
        "signature": "(&mut self) -> GraphResult<&GraphSnapshot> ",
        "visibility": "private",
        "is_todo": true,
        "doc_comment": "PERFORMANCE: O(depth * changes) first time, O(1) after caching",
        "line": 555
      },
      {
        "name": "clear_cache",
        "signature": "(&mut self)",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "won't be accessed again soon",
        "line": 570
      },
      {
        "name": "is_cached",
        "signature": "(&self) -> bool ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Check if the snapshot is currently cached",
        "line": 579
      },
      {
        "name": "get_node_ids",
        "signature": "(&mut self) -> GraphResult<Vec<NodeId>> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Get all active node IDs at this state",
        "line": 590
      },
      {
        "name": "has_node",
        "signature": "(&mut self, node: NodeId) -> GraphResult<bool> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Check if a specific node exists at this state",
        "line": 598
      },
      {
        "name": "node_count",
        "signature": "(&mut self) -> GraphResult<usize> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Get the number of active nodes at this state",
        "line": 606
      },
      {
        "name": "get_node_attribute",
        "signature": "(&mut self, node: NodeId, attr_name: &AttrName) -> GraphResult<Option<AttrValue>> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "by reconstructing only the requested attribute",
        "line": 617
      },
      {
        "name": "get_node_attributes",
        "signature": "(&mut self, node: NodeId) -> GraphResult<HashMap<AttrName, AttrValue>> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Get all attributes for a specific node",
        "line": 632
      },
      {
        "name": "get_edge_ids",
        "signature": "(&mut self) -> GraphResult<Vec<EdgeId>> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Get all active edge IDs at this state",
        "line": 652
      },
      {
        "name": "has_edge",
        "signature": "(&mut self, edge: EdgeId) -> GraphResult<bool> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Check if a specific edge exists at this state",
        "line": 660
      },
      {
        "name": "edge_count",
        "signature": "(&mut self) -> GraphResult<usize> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Get the number of active edges at this state",
        "line": 668
      },
      {
        "name": "get_edge_endpoints",
        "signature": "(&mut self, edge: EdgeId) -> GraphResult<(NodeId, NodeId)> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Get the endpoints of an edge",
        "line": 676
      },
      {
        "name": "get_edge_attribute",
        "signature": "(&mut self, edge: EdgeId, attr_name: &AttrName) -> GraphResult<Option<AttrValue>> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Get a specific attribute value for an edge",
        "line": 686
      },
      {
        "name": "get_edge_attributes",
        "signature": "(&mut self, edge: EdgeId) -> GraphResult<HashMap<AttrName, AttrValue>> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Get all attributes for a specific edge",
        "line": 701
      },
      {
        "name": "get_neighbors",
        "signature": "(&mut self, node: NodeId) -> GraphResult<Vec<NodeId>> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Get all neighbors of a node at this state",
        "line": 721
      },
      {
        "name": "get_degree",
        "signature": "(&mut self, node: NodeId) -> GraphResult<usize> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Get the degree (number of incident edges) of a node",
        "line": 744
      },
      {
        "name": "are_connected",
        "signature": "(&mut self, node1: NodeId, node2: NodeId) -> GraphResult<bool> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Check if two nodes are connected by an edge",
        "line": 752
      },
      {
        "name": "state_id",
        "signature": "(&self) -> StateId ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Get the state ID this view represents",
        "line": 771
      },
      {
        "name": "get_state_metadata",
        "signature": "(&self) -> GraphResult<&StateMetadata> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Get metadata about the state this view represents",
        "line": 777
      },
      {
        "name": "is_root",
        "signature": "(&self) -> GraphResult<bool> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Check if this view represents a root state (no parent)",
        "line": 785
      },
      {
        "name": "get_parent",
        "signature": "(&self) -> GraphResult<Option<StateId>> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Get the parent state ID, if any",
        "line": 793
      },
      {
        "name": "get_children",
        "signature": "(&self) -> Vec<StateId> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Get all child state IDs",
        "line": 801
      },
      {
        "name": "summary",
        "signature": "(&mut self) -> GraphResult<ViewSummary> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Get a summary of this view's state",
        "line": 807
      },
      {
        "name": "diff_with",
        "signature": "(&mut self, other: &mut HistoricalView) -> GraphResult<StateDiff> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Compare this view with another view to find differences",
        "line": 833
      },
      {
        "name": "path_to",
        "signature": "(&self, target_state: StateId) -> GraphResult<Vec<StateId>> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Get the path of changes from this state to another state",
        "line": 843
      },
      {
        "name": "description",
        "signature": "(&self) -> String ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Get a human-readable description of this view",
        "line": 866
      },
      {
        "name": "age_seconds",
        "signature": "(&self) -> u64 ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Get the age of this state in seconds",
        "line": 877
      }
    ],
    "structs": [
      {
        "name": "HistoryForest",
        "visibility": "public",
        "line": 49
      },
      {
        "name": "Commit",
        "visibility": "public",
        "line": 319
      },
      {
        "name": "Delta",
        "visibility": "public",
        "line": 371
      },
      {
        "name": "CommitDiff",
        "visibility": "public",
        "line": 415
      },
      {
        "name": "AttributeChange",
        "visibility": "public",
        "line": 427
      },
      {
        "name": "HistoryStatistics",
        "visibility": "public",
        "line": 443
      },
      {
        "name": "HistoricalView",
        "visibility": "public",
        "line": 478
      },
      {
        "name": "ViewSummary",
        "visibility": "public",
        "line": 853
      }
    ],
    "traits": [],
    "impls": [
      {
        "struct_name": "HistoryForest",
        "trait_name": null,
        "line": 93
      },
      {
        "struct_name": "Commit",
        "trait_name": null,
        "line": 341
      },
      {
        "struct_name": "Delta",
        "trait_name": null,
        "line": 393
      },
      {
        "struct_name": "HistoryForest",
        "trait_name": "Default",
        "line": 452
      },
      {
        "struct_name": "ViewSummary",
        "trait_name": null,
        "line": 863
      }
    ]
  },
  "core::state": {
    "functions": [
      {
        "name": "new_root",
        "signature": "(delta: DeltaObject, label: String, author: String) -> Self ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Create a root state (no parent)",
        "line": 75
      },
      {
        "name": "parent",
        "signature": "(&self) -> Option<StateId> ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Get the parent state ID",
        "line": 80
      },
      {
        "name": "delta",
        "signature": "(&self) -> &DeltaObject ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Get the delta object",
        "line": 85
      },
      {
        "name": "metadata",
        "signature": "(&self) -> &StateMetadata ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Get the metadata",
        "line": 90
      },
      {
        "name": "is_root",
        "signature": "(&self) -> bool ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Check if this is a root state (no parent)",
        "line": 95
      },
      {
        "name": "content_hash",
        "signature": "(&self) -> [u8; 32] ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Get the content hash",
        "line": 100
      },
      {
        "name": "timestamp",
        "signature": "(&self) -> u64 ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Get the timestamp",
        "line": 105
      },
      {
        "name": "author",
        "signature": "(&self) -> &str ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Get the author",
        "line": 110
      },
      {
        "name": "label",
        "signature": "(&self) -> &str ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Get the label",
        "line": 115
      },
      {
        "name": "message",
        "signature": "(&self) -> Option<&str> ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Get the commit message",
        "line": 120
      },
      {
        "name": "tags",
        "signature": "(&self) -> &[String] ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Get tags",
        "line": 125
      },
      {
        "name": "add_tag",
        "signature": "(&mut self, tag: String)",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Add a tag to this state's metadata",
        "line": 130
      },
      {
        "name": "remove_tag",
        "signature": "(&mut self, tag: &str)",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Remove a tag from this state's metadata",
        "line": 138
      },
      {
        "name": "has_tag",
        "signature": "(&self, tag: &str) -> bool ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Check if this state has a specific tag",
        "line": 145
      },
      {
        "name": "set_label",
        "signature": "(&mut self, label: String)",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Update the label",
        "line": 150
      },
      {
        "name": "set_message",
        "signature": "(&mut self, message: Option<String>)",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Update the message",
        "line": 157
      },
      {
        "name": "delta_size",
        "signature": "(&self) -> usize ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Get the size of this state's delta in terms of change count",
        "line": 164
      },
      {
        "name": "is_empty_delta",
        "signature": "(&self) -> bool ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Check if this state represents an empty delta",
        "line": 169
      },
      {
        "name": "new",
        "signature": "(label: String, author: String, hash: [u8; 32]) -> Self ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Create new metadata",
        "line": 176
      },
      {
        "name": "with_message",
        "signature": "(label: String, author: String, hash: [u8; 32], message: String) -> Self ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Create metadata with a message",
        "line": 188
      },
      {
        "name": "timestamp_string",
        "signature": "(&self) -> String ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Get a human-readable timestamp",
        "line": 200
      },
      {
        "name": "short_hash",
        "signature": "(&self) -> String ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Get a short hash representation",
        "line": 207
      },
      {
        "name": "empty",
        "signature": "(state_id: StateId) -> Self ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Create an empty snapshot for the given state",
        "line": 251
      },
      {
        "name": "apply_delta",
        "signature": "(&self, delta: &DeltaObject, target_state: StateId) -> Self ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "PERFORMANCE: O(changes in delta + size of current snapshot for cloning)",
        "line": 274
      },
      {
        "name": "diff_with",
        "signature": "(&self, other: &GraphSnapshot) -> StateDiff ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "4. Return structured diff",
        "line": 338
      },
      {
        "name": "statistics",
        "signature": "(&self) -> SnapshotStatistics ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Get basic statistics about this snapshot",
        "line": 363
      },
      {
        "name": "estimate_memory_usage",
        "signature": "(&self) -> usize ",
        "visibility": "private",
        "is_todo": true,
        "doc_comment": "Estimate memory usage of this snapshot in bytes",
        "line": 378
      },
      {
        "name": "contains_node",
        "signature": "(&self, node_id: NodeId) -> bool ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Check if a node exists in this snapshot",
        "line": 385
      },
      {
        "name": "contains_edge",
        "signature": "(&self, edge_id: EdgeId) -> bool ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Check if an edge exists in this snapshot",
        "line": 391
      },
      {
        "name": "get_neighbors",
        "signature": "(&self, node_id: NodeId) -> GraphResult<Vec<NodeId>> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Get all neighbors of a node in this snapshot",
        "line": 397
      },
      {
        "name": "empty",
        "signature": "(from_state: StateId, to_state: StateId) -> Self ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Create an empty diff between two states",
        "line": 440
      },
      {
        "name": "is_empty",
        "signature": "(&self) -> bool ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Check if this diff represents any changes",
        "line": 455
      },
      {
        "name": "summary",
        "signature": "(&self) -> DiffSummary ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Get a summary of the changes in this diff",
        "line": 466
      },
      {
        "name": "validate_snapshot",
        "signature": "(snapshot: &GraphSnapshot) -> GraphResult<()> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "3. No duplicate IDs",
        "line": 543
      },
      {
        "name": "test_state_object_creation",
        "signature": "()",
        "visibility": "private",
        "is_todo": false,
        "doc_comment": "",
        "line": 565
      },
      {
        "name": "test_state_tags",
        "signature": "()",
        "visibility": "private",
        "is_todo": false,
        "doc_comment": "",
        "line": 580
      }
    ],
    "structs": [
      {
        "name": "StateObject",
        "visibility": "public",
        "line": 23
      },
      {
        "name": "StateMetadata",
        "visibility": "public",
        "line": 34
      },
      {
        "name": "GraphSnapshot",
        "visibility": "public",
        "line": 228
      },
      {
        "name": "StateDiff",
        "visibility": "public",
        "line": 428
      },
      {
        "name": "AttributeChange",
        "visibility": "public",
        "line": 481
      },
      {
        "name": "SnapshotStatistics",
        "visibility": "public",
        "line": 497
      },
      {
        "name": "DiffSummary",
        "visibility": "public",
        "line": 507
      }
    ],
    "traits": [],
    "impls": [
      {
        "struct_name": "StateObject",
        "trait_name": null,
        "line": 48
      },
      {
        "struct_name": "StateMetadata",
        "trait_name": null,
        "line": 173
      },
      {
        "struct_name": "GraphSnapshot",
        "trait_name": null,
        "line": 248
      },
      {
        "struct_name": "StateDiff",
        "trait_name": null,
        "line": 437
      }
    ]
  },
  "core::space": {
    "functions": [
      {
        "name": "new",
        "signature": "(base_state: StateId) -> Self ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Create a new empty graph space with default strategy",
        "line": 111
      },
      {
        "name": "with_strategy",
        "signature": "(base_state: StateId, strategy: StorageStrategyType) -> Self ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Create a new graph space with specific temporal storage strategy",
        "line": 116
      },
      {
        "name": "activate_node",
        "signature": "(&mut self, node_id: NodeId)",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Add a node to the active set (called by Graph.add_node())",
        "line": 135
      },
      {
        "name": "deactivate_node",
        "signature": "(&mut self, node_id: NodeId)",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Remove a node from the active set (called by Graph.remove_node())",
        "line": 142
      },
      {
        "name": "activate_edge",
        "signature": "(&mut self, edge_id: EdgeId, source: NodeId, target: NodeId)",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Add an edge to the active set (called by Graph.add_edge())",
        "line": 151
      },
      {
        "name": "deactivate_edge",
        "signature": "(&mut self, edge_id: EdgeId)",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Remove an edge from the active set (called by Graph.remove_edge())",
        "line": 158
      },
      {
        "name": "set_node_attr",
        "signature": "(&mut self, pool: &mut GraphPool, node_id: NodeId, attr_name: AttrName, value: AttrValue) -> GraphResult<()> ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Set node attribute using index-based storage",
        "line": 172
      },
      {
        "name": "get_node_attr",
        "signature": "(&self, pool: &GraphPool, node_id: NodeId, attr_name: &AttrName) -> GraphResult<Option<&AttrValue>> ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Get node attribute by resolving index through pool",
        "line": 201
      },
      {
        "name": "set_edge_attr",
        "signature": "(&mut self, pool: &mut GraphPool, edge_id: EdgeId, attr_name: AttrName, value: AttrValue) -> GraphResult<()> ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Set edge attribute using index-based storage",
        "line": 215
      },
      {
        "name": "get_edge_attr",
        "signature": "(&self, pool: &GraphPool, edge_id: EdgeId, attr_name: &AttrName) -> GraphResult<Option<&AttrValue>> ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Get edge attribute by resolving index through pool",
        "line": 235
      },
      {
        "name": "get_all_node_attrs",
        "signature": "(&self, pool: &GraphPool, node_id: NodeId) -> HashMap<AttrName, AttrValue> ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Get all attributes for a node by resolving indices through pool",
        "line": 245
      },
      {
        "name": "get_all_edge_attrs",
        "signature": "(&self, pool: &GraphPool, edge_id: EdgeId) -> HashMap<AttrName, AttrValue> ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Get all attributes for an edge by resolving indices through pool",
        "line": 258
      },
      {
        "name": "node_count",
        "signature": "(&self) -> usize ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Get the number of active nodes",
        "line": 276
      },
      {
        "name": "edge_count",
        "signature": "(&self) -> usize ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Get the number of active edges",
        "line": 281
      },
      {
        "name": "contains_node",
        "signature": "(&self, node_id: NodeId) -> bool ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Check if a node is currently active",
        "line": 286
      },
      {
        "name": "contains_edge",
        "signature": "(&self, edge_id: EdgeId) -> bool ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Check if an edge is currently active",
        "line": 291
      },
      {
        "name": "get_active_nodes",
        "signature": "(&self) -> &HashSet<NodeId> ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Get all active node IDs (for iteration)",
        "line": 296
      },
      {
        "name": "get_active_edges",
        "signature": "(&self) -> &HashSet<EdgeId> ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Get all active edge IDs (for iteration)",
        "line": 301
      },
      {
        "name": "node_ids",
        "signature": "(&self) -> Vec<NodeId> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Get all active node IDs as a vector",
        "line": 311
      },
      {
        "name": "edge_ids",
        "signature": "(&self) -> Vec<EdgeId> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Get all active edge IDs as a vector",
        "line": 317
      },
      {
        "name": "has_uncommitted_changes",
        "signature": "(&self) -> bool ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Check if there are uncommitted changes",
        "line": 331
      },
      {
        "name": "uncommitted_change_count",
        "signature": "(&self) -> usize ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Get the number of uncommitted changes",
        "line": 337
      },
      {
        "name": "change_summary",
        "signature": "(&self) -> ChangeSummary ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Get summary of uncommitted changes",
        "line": 343
      },
      {
        "name": "get_base_state",
        "signature": "(&self) -> StateId ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Get the base state this workspace is built on",
        "line": 349
      },
      {
        "name": "create_change_delta",
        "signature": "(&self, pool: &GraphPool) -> DeltaObject ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "USAGE: Called when committing changes to history",
        "line": 356
      },
      {
        "name": "reset_hard",
        "signature": "(&mut self) -> GraphResult<()> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "WARNING: This loses all work since the last commit",
        "line": 367
      }
    ],
    "structs": [
      {
        "name": "GraphSpace",
        "visibility": "public",
        "line": 63
      }
    ],
    "traits": [],
    "impls": [
      {
        "struct_name": "GraphSpace",
        "trait_name": null,
        "line": 108
      }
    ]
  },
  "core::change_tracker": {
    "functions": [
      {
        "name": "new",
        "signature": "() -> Self ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Create a new change tracker with default strategy (IndexDeltas)",
        "line": 55
      },
      {
        "name": "with_strategy",
        "signature": "(strategy_type: StorageStrategyType) -> Self ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Create a new change tracker with specific strategy",
        "line": 60
      },
      {
        "name": "with_custom_strategy",
        "signature": "(strategy: Box<dyn TemporalStorageStrategy>) -> Self ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Create a change tracker with a custom strategy instance",
        "line": 67
      },
      {
        "name": "record_node_addition",
        "signature": "(&mut self, node_id: NodeId)",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Record that a new node was added",
        "line": 82
      },
      {
        "name": "record_node_removal",
        "signature": "(&mut self, node_id: NodeId)",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Record that a node was removed",
        "line": 87
      },
      {
        "name": "record_edge_addition",
        "signature": "(&mut self, edge_id: EdgeId, source: NodeId, target: NodeId)",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Record that a new edge was added",
        "line": 92
      },
      {
        "name": "record_edge_removal",
        "signature": "(&mut self, edge_id: EdgeId)",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Record that an edge was removed",
        "line": 97
      },
      {
        "name": "record_node_additions",
        "signature": "(&mut self, node_ids: &[NodeId])",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Record multiple node additions efficiently",
        "line": 169
      },
      {
        "name": "has_changes",
        "signature": "(&self) -> bool ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Check if there are any uncommitted changes",
        "line": 220
      },
      {
        "name": "change_count",
        "signature": "(&self) -> usize ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Get the total number of changes recorded",
        "line": 225
      },
      {
        "name": "get_modified_nodes",
        "signature": "(&self) -> HashSet<NodeId> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Get all nodes that have been modified (added, removed, or attrs changed)",
        "line": 232
      },
      {
        "name": "get_modified_edges",
        "signature": "(&self) -> HashSet<EdgeId> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Get all edges that have been modified",
        "line": 240
      },
      {
        "name": "is_node_modified",
        "signature": "(&self, node_id: NodeId) -> bool ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Check if a specific node has been modified",
        "line": 245
      },
      {
        "name": "is_edge_modified",
        "signature": "(&self, edge_id: EdgeId) -> bool ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Check if a specific edge has been modified",
        "line": 252
      },
      {
        "name": "create_delta",
        "signature": "(&self) -> DeltaObject ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "This is used when committing to history",
        "line": 267
      },
      {
        "name": "create_change_set",
        "signature": "(&self) -> ChangeSet ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Create a change set that can be passed to HistoryForest",
        "line": 272
      },
      {
        "name": "clear",
        "signature": "(&mut self)",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Clear all recorded changes (rollback to last commit state)",
        "line": 287
      },
      {
        "name": "strategy_name",
        "signature": "(&self) -> &'static str ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Get the name of the current strategy",
        "line": 296
      },
      {
        "name": "storage_characteristics",
        "signature": "(&self) -> StorageCharacteristics ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Get the storage characteristics of the current strategy",
        "line": 301
      },
      {
        "name": "change_summary",
        "signature": "(&self) -> ChangeSummary ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Get a summary of what has changed (compatibility method)",
        "line": 306
      },
      {
        "name": "generate_reverse_operations",
        "signature": "(&self) -> Vec<ReverseOperation> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "This is useful for implementing rollback functionality",
        "line": 323
      },
      {
        "name": "merge",
        "signature": "(&mut self, other: &ChangeTracker) -> Result<(), MergeConflict> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "This is complex because changes might conflict",
        "line": 338
      },
      {
        "name": "would_conflict_with",
        "signature": "(&self, other: &ChangeTracker) -> Vec<MergeConflict> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Check if merging with another change tracker would cause conflicts",
        "line": 347
      },
      {
        "name": "optimize",
        "signature": "(&mut self)",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "we only need to track the final change",
        "line": 359
      },
      {
        "name": "memory_usage",
        "signature": "(&self) -> usize ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Estimate the memory usage of the change tracker",
        "line": 367
      },
      {
        "name": "statistics",
        "signature": "(&self) -> ChangeStatistics ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Get statistics about the changes",
        "line": 377
      },
      {
        "name": "time_since_first_change",
        "signature": "(&self) -> Option<u64> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Get the time elapsed since the first change",
        "line": 382
      },
      {
        "name": "is_empty",
        "signature": "(&self) -> bool ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Check if any changes have been made",
        "line": 406
      },
      {
        "name": "description",
        "signature": "(&self) -> String ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Get a human-readable description of the changes",
        "line": 411
      },
      {
        "name": "execute",
        "signature": "(&self, pool: &mut GraphPool) -> Result<(), GraphError> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Execute this reverse operation on a graph pool",
        "line": 440
      },
      {
        "name": "is_empty",
        "signature": "(&self) -> bool ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Check if this change set is empty",
        "line": 503
      },
      {
        "name": "change_count",
        "signature": "(&self) -> usize ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Get the total number of changes in this set",
        "line": 508
      },
      {
        "name": "default",
        "signature": "() -> Self ",
        "visibility": "private",
        "is_todo": false,
        "doc_comment": "",
        "line": 514
      }
    ],
    "structs": [
      {
        "name": "ChangeTracker",
        "visibility": "public",
        "line": 45
      },
      {
        "name": "ChangeSummary",
        "visibility": "public",
        "line": 393
      },
      {
        "name": "MergeConflict",
        "visibility": "public",
        "line": 447
      },
      {
        "name": "ChangeStatistics",
        "visibility": "public",
        "line": 472
      },
      {
        "name": "ChangeSet",
        "visibility": "public",
        "line": 485
      }
    ],
    "traits": [],
    "impls": [
      {
        "struct_name": "ChangeTracker",
        "trait_name": null,
        "line": 52
      },
      {
        "struct_name": "ChangeSummary",
        "trait_name": null,
        "line": 403
      },
      {
        "struct_name": "ReverseOperation",
        "trait_name": null,
        "line": 437
      },
      {
        "struct_name": "ChangeSet",
        "trait_name": null,
        "line": 500
      },
      {
        "struct_name": "ChangeTracker",
        "trait_name": "Default",
        "line": 512
      }
    ]
  },
  "core::pool": {
    "functions": [
      {
        "name": "new",
        "signature": "() -> Self ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Create new empty graph store",
        "line": 97
      },
      {
        "name": "commit_baseline",
        "signature": "(&mut self)",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "In append-only storage, committing just means the current indices become the new baseline",
        "line": 109
      },
      {
        "name": "get_node_attr_by_index",
        "signature": "(&self, attr: &AttrName, index: usize) -> Option<&AttrValue> ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Get attribute value by index (for Space to resolve indices)",
        "line": 118
      },
      {
        "name": "get_edge_attr_by_index",
        "signature": "(&self, attr: &AttrName, index: usize) -> Option<&AttrValue> ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Get edge attribute value by index (for Space to resolve indices)",
        "line": 129
      },
      {
        "name": "add_node",
        "signature": "(&mut self) -> NodeId ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "DESIGN: Pool creates the node, Space tracks it as active",
        "line": 146
      },
      {
        "name": "add_edge",
        "signature": "(&mut self, source: NodeId, target: NodeId) -> EdgeId ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "DESIGN: Pool creates and stores the edge, Space tracks it as active",
        "line": 154
      },
      {
        "name": "get_edge_endpoints",
        "signature": "(&self, edge_id: EdgeId) -> Option<(NodeId, NodeId)> ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Get the endpoints of an edge from storage",
        "line": 162
      },
      {
        "name": "append_node_attr_value",
        "signature": "(&mut self, attr: AttrName, value: AttrValue) -> usize ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "DESIGN: Space will manage the node->index mapping, Pool just stores values",
        "line": 174
      },
      {
        "name": "append_node_attr_values",
        "signature": "(&mut self, attrs: HashMap<AttrName, AttrValue>) -> HashMap<AttrName, usize> ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Append multiple attribute values and return their indices",
        "line": 184
      },
      {
        "name": "append_nodes_attr_values",
        "signature": "(&mut self, attr: AttrName, values: Vec<AttrValue>) -> Vec<usize> ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Append same attribute for multiple nodes and return indices",
        "line": 197
      },
      {
        "name": "append_edge_attr_value",
        "signature": "(&mut self, attr: AttrName, value: AttrValue) -> usize ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Append edge attribute value to column and return its index",
        "line": 207
      },
      {
        "name": "get_node_attr_column",
        "signature": "(&self, attr: &AttrName) -> Option<&Vec<AttrValue>> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "RETURNS: Reference to the entire attribute vector",
        "line": 236
      },
      {
        "name": "get_edge_attr_column",
        "signature": "(&self, attr: &AttrName) -> Option<&Vec<AttrValue>> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "INTERNAL: This exposes the full column - Graph coordinator handles filtering",
        "line": 244
      },
      {
        "name": "get_node_attrs_at_indices",
        "signature": "(&self, attr: &AttrName, indices: &[NodeId]) -> GraphResult<Vec<Option<AttrValue>>> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "PERFORMANCE: More efficient than individual lookups for known valid indices",
        "line": 253
      },
      {
        "name": "get_edge_attrs_at_indices",
        "signature": "(&self, attr: &AttrName, indices: &[EdgeId]) -> GraphResult<Vec<Option<AttrValue>>> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Get attribute values for specific edge indices (internal)",
        "line": 272
      },
      {
        "name": "set_nodes_attrs",
        "signature": "(&mut self, attrs_values: HashMap<AttrName, Vec<(NodeId, AttrValue)",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Set multiple attributes on multiple nodes (bulk operation)",
        "line": 280
      },
      {
        "name": "set_edges_attrs",
        "signature": "(&mut self, attrs_values: HashMap<AttrName, Vec<(EdgeId, AttrValue)",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Set multiple attributes on multiple edges (bulk operation)",
        "line": 315
      },
      {
        "name": "statistics",
        "signature": "(&self) -> PoolStatistics ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Get basic statistics about the graph",
        "line": 335
      },
      {
        "name": "attribute_names",
        "signature": "(&self) -> (Vec<AttrName>, Vec<AttrName>) ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "List all attribute names currently in use",
        "line": 341
      },
      {
        "name": "new",
        "signature": "() -> Self ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Create new empty attribute column",
        "line": 362
      },
      {
        "name": "append_value",
        "signature": "(&mut self, value: AttrValue) -> usize ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Append a new value and return its index",
        "line": 371
      },
      {
        "name": "get_value",
        "signature": "(&self, index: usize) -> Option<&AttrValue> ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Get value at specific index",
        "line": 380
      },
      {
        "name": "increment_ref",
        "signature": "(&mut self, index: usize)",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Increment reference count for an index",
        "line": 385
      },
      {
        "name": "decrement_ref",
        "signature": "(&mut self, index: usize)",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Decrement reference count for an index",
        "line": 390
      },
      {
        "name": "get_unreferenced_indices",
        "signature": "(&self) -> Vec<usize> ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Get all indices with zero references (for garbage collection)",
        "line": 397
      },
      {
        "name": "default",
        "signature": "() -> Self ",
        "visibility": "private",
        "is_todo": false,
        "doc_comment": "",
        "line": 418
      }
    ],
    "structs": [
      {
        "name": "GraphPool",
        "visibility": "public",
        "line": 59
      },
      {
        "name": "AttributeColumn",
        "visibility": "public",
        "line": 348
      },
      {
        "name": "PoolStatistics",
        "visibility": "public",
        "line": 409
      }
    ],
    "traits": [],
    "impls": [
      {
        "struct_name": "GraphPool",
        "trait_name": null,
        "line": 94
      },
      {
        "struct_name": "AttributeColumn",
        "trait_name": null,
        "line": 359
      },
      {
        "struct_name": "GraphPool",
        "trait_name": "Default",
        "line": 416
      }
    ]
  },
  "core::delta": {
    "functions": [
      {
        "name": "new",
        "signature": "() -> Self ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Create a new empty index delta",
        "line": 50
      },
      {
        "name": "add_index_change",
        "signature": "(&mut self, entity_index: usize, old_idx: Option<usize>, new_idx: usize)",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Add an index change at the specified entity index",
        "line": 59
      },
      {
        "name": "get_change",
        "signature": "(&self, entity_index: usize) -> Option<(Option<usize>, usize)> ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Get the change at a specific entity index",
        "line": 75
      },
      {
        "name": "has_change",
        "signature": "(&self, entity_index: usize) -> bool ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Check if this delta has changes at the given entity index",
        "line": 82
      },
      {
        "name": "len",
        "signature": "(&self) -> usize ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Get the number of changes in this delta",
        "line": 87
      },
      {
        "name": "is_empty",
        "signature": "(&self) -> bool ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Check if this delta is empty",
        "line": 92
      },
      {
        "name": "new",
        "signature": "() -> Self ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Create a new empty column delta",
        "line": 116
      },
      {
        "name": "with_capacity",
        "signature": "(capacity: usize) -> Self ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Create a column delta with initial capacity",
        "line": 124
      },
      {
        "name": "add_change",
        "signature": "(&mut self, index: usize, value: AttrValue)",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Add a change at the specified index",
        "line": 132
      },
      {
        "name": "get",
        "signature": "(&self, index: usize) -> Option<&AttrValue> ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Get the value at a specific index, if it exists",
        "line": 147
      },
      {
        "name": "has_change",
        "signature": "(&self, index: usize) -> bool ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Check if this delta has changes at the given index",
        "line": 154
      },
      {
        "name": "len",
        "signature": "(&self) -> usize ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Get the number of changes in this delta",
        "line": 159
      },
      {
        "name": "is_empty",
        "signature": "(&self) -> bool ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Check if this delta is empty",
        "line": 164
      },
      {
        "name": "merge",
        "signature": "(&mut self, other: &ColumnDelta)",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Merge another column delta into this one",
        "line": 169
      },
      {
        "name": "empty",
        "signature": "() -> Self ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Create an empty delta object",
        "line": 274
      },
      {
        "name": "is_empty",
        "signature": "(&self) -> bool ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Check if this delta is empty (no changes)",
        "line": 284
      },
      {
        "name": "change_count",
        "signature": "(&self) -> usize ",
        "visibility": "public",
        "is_todo": false,
        "doc_comment": "Get the total number of changes in this delta",
        "line": 292
      },
      {
        "name": "eq",
        "signature": "(&self, other: &Self) -> bool ",
        "visibility": "private",
        "is_todo": false,
        "doc_comment": "",
        "line": 307
      },
      {
        "name": "test_column_delta_basic_operations",
        "signature": "()",
        "visibility": "private",
        "is_todo": false,
        "doc_comment": "",
        "line": 319
      },
      {
        "name": "test_column_delta_maintains_order",
        "signature": "()",
        "visibility": "private",
        "is_todo": false,
        "doc_comment": "",
        "line": 334
      }
    ],
    "structs": [
      {
        "name": "ColumnIndexDelta",
        "visibility": "public",
        "line": 39
      },
      {
        "name": "ColumnDelta",
        "visibility": "public",
        "line": 107
      },
      {
        "name": "DeltaObject",
        "visibility": "public",
        "line": 187
      }
    ],
    "traits": [],
    "impls": [
      {
        "struct_name": "ColumnIndexDelta",
        "trait_name": null,
        "line": 47
      },
      {
        "struct_name": "ColumnIndexDelta",
        "trait_name": "Hash",
        "line": 96
      },
      {
        "struct_name": "ColumnDelta",
        "trait_name": null,
        "line": 113
      },
      {
        "struct_name": "ColumnDelta",
        "trait_name": "Hash",
        "line": 175
      },
      {
        "struct_name": "DeltaObject",
        "trait_name": null,
        "line": 199
      },
      {
        "struct_name": "DeltaObject",
        "trait_name": "Hash",
        "line": 299
      },
      {
        "struct_name": "DeltaObject",
        "trait_name": "PartialEq",
        "line": 305
      },
      {
        "struct_name": "DeltaObject",
        "trait_name": "Eq",
        "line": 311
      }
    ]
  },
  "core::ref_manager": {
    "functions": [
      {
        "name": "new",
        "signature": "(name: BranchName, head: StateId, created_by: String) -> Self ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Create a new branch pointing to a specific state",
        "line": 72
      },
      {
        "name": "update_head",
        "signature": "(&mut self, new_head: StateId)",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "USAGE: Called when new commits are made on this branch",
        "line": 105
      },
      {
        "name": "set_description",
        "signature": "(&mut self, description: Option<String>)",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Set or update the description",
        "line": 111
      },
      {
        "name": "is_older_than_days",
        "signature": "(&self, days: u64) -> bool ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Check if this branch is older than a certain number of days",
        "line": 117
      },
      {
        "name": "new",
        "signature": "() -> Self ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Create a new reference manager with a default branch",
        "line": 169
      },
      {
        "name": "with_default_branch",
        "signature": "(default_name: BranchName) -> Self ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Create a new reference manager with a custom default branch name",
        "line": 192
      },
      {
        "name": "checkout_branch",
        "signature": "(&mut self, name: &BranchName) -> GraphResult<StateId> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "3. Return the state ID that should be loaded",
        "line": 240
      },
      {
        "name": "delete_branch",
        "signature": "(&mut self, name: &BranchName) -> GraphResult<()> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "- Branch must exist",
        "line": 261
      },
      {
        "name": "list_branches",
        "signature": "(&self) -> Vec<BranchInfo> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "List all branches with their metadata",
        "line": 289
      },
      {
        "name": "get_current_branch",
        "signature": "(&self) -> GraphResult<&Branch> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Get the currently checked out branch",
        "line": 306
      },
      {
        "name": "get_branch",
        "signature": "(&self, name: &BranchName) -> GraphResult<&Branch> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Get a specific branch by name",
        "line": 318
      },
      {
        "name": "update_current_branch_head",
        "signature": "(&mut self, new_head: StateId) -> GraphResult<()> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "USAGE: Called after making a new commit",
        "line": 332
      },
      {
        "name": "update_branch_head",
        "signature": "(&mut self, branch_name: &BranchName, new_head: StateId) -> GraphResult<()> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Update the head of a specific branch",
        "line": 349
      },
      {
        "name": "create_tag",
        "signature": "(&mut self, tag_name: String, state_id: StateId) -> GraphResult<()> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "IMMUTABILITY: Tags cannot be moved once created",
        "line": 371
      },
      {
        "name": "delete_tag",
        "signature": "(&mut self, tag_name: &str) -> GraphResult<()> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Delete a tag",
        "line": 385
      },
      {
        "name": "list_tags",
        "signature": "(&self) -> Vec<TagInfo> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "List all tags",
        "line": 399
      },
      {
        "name": "get_tag",
        "signature": "(&self, tag_name: &str) -> Option<StateId> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Get the state ID for a specific tag",
        "line": 411
      },
      {
        "name": "get_referenced_states",
        "signature": "(&self) -> Vec<StateId> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "USAGE: For garbage collection - these states should not be deleted",
        "line": 423
      },
      {
        "name": "prune_invalid_branches",
        "signature": "(&mut self, valid_states: &[StateId]) -> usize ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "RETURNS: Number of branches that were removed",
        "line": 448
      },
      {
        "name": "prune_invalid_tags",
        "signature": "(&mut self, valid_states: &[StateId]) -> usize ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "RETURNS: Number of tags that were removed",
        "line": 470
      },
      {
        "name": "statistics",
        "signature": "(&self) -> RefStatistics ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Get basic information about the reference manager",
        "line": 490
      },
      {
        "name": "list_branch_names",
        "signature": "(&self) -> Vec<BranchName> ",
        "visibility": "private",
        "is_todo": true,
        "doc_comment": "Get list of all branch names (for error messages)",
        "line": 506
      },
      {
        "name": "current_branch_name",
        "signature": "(&self) -> &BranchName ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Get the current branch name",
        "line": 512
      },
      {
        "name": "default_branch_name",
        "signature": "(&self) -> &BranchName ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Get the default branch name",
        "line": 518
      },
      {
        "name": "has_branch",
        "signature": "(&self, name: &BranchName) -> bool ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Check if a branch exists",
        "line": 524
      },
      {
        "name": "has_tag",
        "signature": "(&self, name: &str) -> bool ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Check if a tag exists",
        "line": 530
      },
      {
        "name": "default",
        "signature": "() -> Self ",
        "visibility": "private",
        "is_todo": false,
        "doc_comment": "",
        "line": 537
      },
      {
        "name": "display_name",
        "signature": "(&self) -> String ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Get a human-readable description of this branch",
        "line": 560
      },
      {
        "name": "age_days",
        "signature": "(&self) -> u64 ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Get the age of this branch in days",
        "line": 574
      },
      {
        "name": "test_ref_manager_creation",
        "signature": "()",
        "visibility": "private",
        "is_todo": true,
        "doc_comment": "",
        "line": 607
      },
      {
        "name": "test_branch_creation_and_deletion",
        "signature": "()",
        "visibility": "private",
        "is_todo": true,
        "doc_comment": "",
        "line": 621
      },
      {
        "name": "test_branch_checkout",
        "signature": "()",
        "visibility": "private",
        "is_todo": true,
        "doc_comment": "",
        "line": 649
      },
      {
        "name": "test_tag_operations",
        "signature": "()",
        "visibility": "private",
        "is_todo": true,
        "doc_comment": "",
        "line": 668
      },
      {
        "name": "test_reference_cleanup",
        "signature": "()",
        "visibility": "private",
        "is_todo": true,
        "doc_comment": "",
        "line": 692
      },
      {
        "name": "test_error_handling",
        "signature": "()",
        "visibility": "private",
        "is_todo": true,
        "doc_comment": "",
        "line": 712
      }
    ],
    "structs": [
      {
        "name": "Branch",
        "visibility": "public",
        "line": 48
      },
      {
        "name": "RefManager",
        "visibility": "public",
        "line": 140
      },
      {
        "name": "BranchInfo",
        "visibility": "public",
        "line": 548
      },
      {
        "name": "TagInfo",
        "visibility": "public",
        "line": 584
      },
      {
        "name": "RefStatistics",
        "visibility": "public",
        "line": 591
      }
    ],
    "traits": [],
    "impls": [
      {
        "struct_name": "Branch",
        "trait_name": null,
        "line": 69
      },
      {
        "struct_name": "RefManager",
        "trait_name": null,
        "line": 166
      },
      {
        "struct_name": "RefManager",
        "trait_name": "Default",
        "line": 535
      },
      {
        "struct_name": "BranchInfo",
        "trait_name": null,
        "line": 557
      }
    ]
  },
  "api::graph": {
    "functions": [
      {
        "name": "new",
        "signature": "() -> Self ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Create a new empty graph with default settings",
        "line": 94
      },
      {
        "name": "with_config",
        "signature": "(config: GraphConfig) -> Self ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Create a graph with custom configuration",
        "line": 101
      },
      {
        "name": "load_from_path",
        "signature": "(path: &Path) -> Result<Self, GraphError> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Load an existing graph from storage",
        "line": 106
      },
      {
        "name": "add_node",
        "signature": "(&mut self) -> NodeId ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "PERFORMANCE: O(1) amortized",
        "line": 125
      },
      {
        "name": "add_nodes",
        "signature": "(&mut self, count: usize) -> Vec<NodeId> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "More efficient than calling add_node() in a loop",
        "line": 134
      },
      {
        "name": "add_edge",
        "signature": "(&mut self, source: NodeId, target: NodeId) -> Result<EdgeId, GraphError> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "4. Return edge ID",
        "line": 146
      },
      {
        "name": "add_edges",
        "signature": "(&mut self, edges: &[(NodeId, NodeId)",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "More efficient than calling add_edge() in a loop",
        "line": 158
      },
      {
        "name": "remove_node",
        "signature": "(&mut self, node: NodeId) -> Result<(), GraphError> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "1. Ask space to remove the node (it handles incident edges)",
        "line": 167
      },
      {
        "name": "remove_edge",
        "signature": "(&mut self, edge: EdgeId) -> Result<(), GraphError> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Remove an edge",
        "line": 173
      },
      {
        "name": "set_node_attr",
        "signature": "(&mut self, node: NodeId, attr: AttrName, value: AttrValue) -> Result<(), GraphError> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "2. Space records the change for commit delta",
        "line": 189
      },
      {
        "name": "set_node_attrs",
        "signature": "(&mut self, attrs_values: HashMap<AttrName, Vec<(NodeId, AttrValue)",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Set node attributes in bulk (handles multiple nodes and multiple attributes efficiently)",
        "line": 203
      },
      {
        "name": "set_edge_attr",
        "signature": "(&mut self, edge: EdgeId, attr: AttrName, value: AttrValue) -> Result<(), GraphError> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "2. Space records the change for commit delta",
        "line": 228
      },
      {
        "name": "set_edge_attrs",
        "signature": "(&mut self, attrs_values: HashMap<AttrName, Vec<(EdgeId, AttrValue)",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Set edge attributes in bulk (handles multiple edges and multiple attributes efficiently)",
        "line": 239
      },
      {
        "name": "get_node_attr",
        "signature": "(&self, node: NodeId, attr: &AttrName) -> Result<Option<AttrValue>, GraphError> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "2. Return the value",
        "line": 262
      },
      {
        "name": "get_edge_attr",
        "signature": "(&self, edge: EdgeId, attr: &AttrName) -> Result<Option<AttrValue>, GraphError> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "2. Return the value",
        "line": 272
      },
      {
        "name": "get_node_attrs",
        "signature": "(&self, node: NodeId) -> Result<HashMap<AttrName, AttrValue>, GraphError> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "2. Return the attributes",
        "line": 281
      },
      {
        "name": "get_edge_attrs",
        "signature": "(&self, edge: EdgeId) -> Result<HashMap<AttrName, AttrValue>, GraphError> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "2. Return the attributes",
        "line": 290
      },
      {
        "name": "get_nodes_attrs",
        "signature": "(&self, attr: &AttrName, requested_nodes: &[NodeId]) -> GraphResult<Vec<Option<AttrValue>>> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "PERFORMANCE: Uses efficient column access internally",
        "line": 325
      },
      {
        "name": "get_edges_attrs",
        "signature": "(&self, attr: &AttrName, requested_edges: &[EdgeId]) -> GraphResult<Vec<Option<AttrValue>>> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Get attribute values for specific edges (secure and efficient)",
        "line": 352
      },
      {
        "name": "contains_node",
        "signature": "(&self, node: NodeId) -> bool ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Check if a node exists in the graph",
        "line": 368
      },
      {
        "name": "contains_edge",
        "signature": "(&self, edge: EdgeId) -> bool ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Check if an edge exists in the graph",
        "line": 374
      },
      {
        "name": "node_ids",
        "signature": "(&self) -> Vec<NodeId> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Get all node IDs currently in the graph",
        "line": 380
      },
      {
        "name": "edge_ids",
        "signature": "(&self) -> Vec<EdgeId> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Get all edge IDs currently in the graph",
        "line": 386
      },
      {
        "name": "edge_endpoints",
        "signature": "(&self, edge: EdgeId) -> Result<(NodeId, NodeId), GraphError> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Get the endpoints of an edge",
        "line": 392
      },
      {
        "name": "neighbors",
        "signature": "(&self, node: NodeId) -> Result<Vec<NodeId>, GraphError> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Get all neighbors of a node",
        "line": 398
      },
      {
        "name": "degree",
        "signature": "(&self, node: NodeId) -> Result<usize, GraphError> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Get the degree (number of incident edges) of a node",
        "line": 404
      },
      {
        "name": "statistics",
        "signature": "(&self) -> GraphStatistics ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Get basic statistics about the current graph",
        "line": 410
      },
      {
        "name": "has_uncommitted_changes",
        "signature": "(&self) -> bool ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Check if there are uncommitted changes",
        "line": 422
      },
      {
        "name": "commit",
        "signature": "(&mut self, message: String, author: String) -> Result<StateId, GraphError> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "5. Return new commit ID",
        "line": 434
      },
      {
        "name": "reset_hard",
        "signature": "(&mut self) -> Result<(), GraphError> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Reset all uncommitted changes",
        "line": 447
      },
      {
        "name": "create_branch",
        "signature": "(&mut self, branch_name: BranchName) -> Result<(), GraphError> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Create a new branch from current state",
        "line": 456
      },
      {
        "name": "checkout_branch",
        "signature": "(&mut self, branch_name: BranchName) -> Result<(), GraphError> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Switch to a different branch",
        "line": 463
      },
      {
        "name": "list_branches",
        "signature": "(&self) -> Vec<BranchInfo> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "List all branches",
        "line": 476
      },
      {
        "name": "commit_history",
        "signature": "(&self) -> Vec<CommitInfo> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Get the commit history",
        "line": 481
      },
      {
        "name": "find_nodes",
        "signature": "(&self, filter: NodeFilter) -> Result<Vec<NodeId>, GraphError> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Find nodes matching attribute criteria",
        "line": 492
      },
      {
        "name": "find_edges",
        "signature": "(&self, filter: EdgeFilter) -> Result<Vec<EdgeId>, GraphError> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Find edges matching attribute criteria",
        "line": 497
      },
      {
        "name": "query",
        "signature": "(&self, query: GraphQuery) -> Result<QueryResult, GraphError> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Run a complex query with multiple criteria",
        "line": 502
      },
      {
        "name": "create_view",
        "signature": "(&self) -> GraphView ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Create a read-only view of the graph for analysis",
        "line": 507
      },
      {
        "name": "view_at_commit",
        "signature": "(&self, commit_id: StateId) -> Result<HistoricalView, GraphError> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Create a read-only view of the graph at a specific commit",
        "line": 518
      },
      {
        "name": "diff_commits",
        "signature": "(&self, from: StateId, to: StateId) -> Result<CommitDiff, GraphError> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Compare two commits and show differences",
        "line": 523
      },
      {
        "name": "optimize",
        "signature": "(&mut self) -> Result<(), GraphError> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Optimize internal data structures for better performance",
        "line": 533
      },
      {
        "name": "gc_history",
        "signature": "(&mut self) -> Result<usize, GraphError> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Garbage collect unreferenced historical states",
        "line": 542
      },
      {
        "name": "save_to_path",
        "signature": "(&self, path: &Path) -> Result<(), GraphError> ",
        "visibility": "public",
        "is_todo": true,
        "doc_comment": "Save graph to persistent storage",
        "line": 550
      },
      {
        "name": "default",
        "signature": "() -> Self ",
        "visibility": "private",
        "is_todo": false,
        "doc_comment": "",
        "line": 595
      }
    ],
    "structs": [
      {
        "name": "Graph",
        "visibility": "public",
        "line": 44
      },
      {
        "name": "GraphStatistics",
        "visibility": "public",
        "line": 564
      },
      {
        "name": "BranchInfo",
        "visibility": "public",
        "line": 576
      },
      {
        "name": "CommitInfo",
        "visibility": "public",
        "line": 585
      }
    ],
    "traits": [],
    "impls": [
      {
        "struct_name": "Graph",
        "trait_name": null,
        "line": 91
      },
      {
        "struct_name": "Graph",
        "trait_name": "Default",
        "line": 593
      }
    ]
  }
}