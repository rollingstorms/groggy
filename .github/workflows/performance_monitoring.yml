name: Continuous Performance Monitoring

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/storage/array/**'
      - 'Cargo.toml'
      - '.github/workflows/performance_monitoring.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/storage/array/**'
      - 'Cargo.toml'
  schedule:
    # Run daily at 2 AM UTC for baseline monitoring
    - cron: '0 2 * * *'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  performance_monitoring:
    name: NumArray Performance Monitoring
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
        
    - name: Cache Cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
          
    - name: Build project in release mode
      run: cargo build --release
      
    - name: Run NumArray benchmark suite
      run: |
        # Run comprehensive benchmark
        cargo run --release --bin numarray_benchmark_runner -- --comprehensive > benchmark_results.txt
        
        # Run quick memory analysis
        echo "=== MEMORY ANALYSIS ===" >> benchmark_results.txt
        cargo test --release quick_memory_analysis -- --nocapture >> benchmark_results.txt
        
    - name: Parse benchmark results
      id: parse_results
      run: |
        # Extract key performance metrics
        MEDIAN_10K=$(grep -A 1 "Size:.*10000.*MEDIAN" benchmark_results.txt | tail -1 | grep -o '[0-9.]*ms' | head -1 || echo "0ms")
        SUM_10K=$(grep -A 1 "Size:.*10000.*SUM" benchmark_results.txt | tail -1 | grep -o '[0-9.]*Âµs' | head -1 || echo "0Âµs")
        
        echo "median_10k=${MEDIAN_10K}" >> $GITHUB_OUTPUT
        echo "sum_10k=${SUM_10K}" >> $GITHUB_OUTPUT
        
        # Check for performance regressions (baseline from compatibility doc)
        BASELINE_MEDIAN="3.46ms"
        BASELINE_SUM="80.76Âµs"
        
        echo "baseline_median=${BASELINE_MEDIAN}" >> $GITHUB_OUTPUT
        echo "baseline_sum=${BASELINE_SUM}" >> $GITHUB_OUTPUT
        
    - name: Performance regression check
      run: |
        # Simple regression detection logic
        echo "Current median (10K elements): ${{ steps.parse_results.outputs.median_10k }}"
        echo "Baseline median: ${{ steps.parse_results.outputs.baseline_median }}"
        echo "Current sum (10K elements): ${{ steps.parse_results.outputs.sum_10k }}"
        echo "Baseline sum: ${{ steps.parse_results.outputs.baseline_sum }}"
        
        # Note: More sophisticated comparison logic can be added here
        # For now, we just report the values
        
    - name: Store benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results-${{ github.sha }}
        path: |
          benchmark_results.txt
        retention-days: 30
        
    - name: Comment PR with performance results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const results = fs.readFileSync('benchmark_results.txt', 'utf8');
          
          // Extract summary section
          const summaryStart = results.indexOf('ðŸŽ¯ PERFORMANCE ANALYSIS');
          const summaryEnd = results.indexOf('âœ… Benchmark completed');
          const summary = summaryStart !== -1 && summaryEnd !== -1 
            ? results.substring(summaryStart, summaryEnd)
            : 'Benchmark results not found';
            
          const comment = `## ðŸš€ NumArray Performance Report
          
          **Performance Monitoring Results for ${{ github.sha }}**
          
          ### Key Metrics
          - Median (10K elements): ${{ steps.parse_results.outputs.median_10k }}
          - Sum (10K elements): ${{ steps.parse_results.outputs.sum_10k }}
          
          ### Baseline Comparison
          - Baseline Median: ${{ steps.parse_results.outputs.baseline_median }}
          - Baseline Sum: ${{ steps.parse_results.outputs.baseline_sum }}
          
          ### Summary
          \`\`\`
          ${summary}
          \`\`\`
          
          Full results are available in the [benchmark artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}).
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  memory_analysis:
    name: Memory Usage Analysis
    runs-on: ubuntu-latest
    needs: performance_monitoring
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      
    - name: Build and run memory analysis
      run: |
        cargo build --release
        
        # Test memory profiler with multiple sizes
        echo "Running memory analysis for different array sizes..."
        
        # Note: The memory profiler needs to be integrated as a binary or test
        # For now, we'll run a simple test to verify the infrastructure exists
        cargo test --release memory_profiler -- --nocapture || echo "Memory profiler tests not yet integrated"

  benchmark_regression_detection:
    name: Regression Detection
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout PR branch
      uses: actions/checkout@v4
      
    - name: Checkout main branch
      run: |
        git fetch origin main
        git checkout main
        
    - name: Run baseline benchmarks
      run: |
        cargo build --release
        cargo run --release --bin numarray_benchmark_runner -- --quick > baseline_results.txt
        
    - name: Checkout PR branch again
      run: |
        git checkout ${{ github.event.pull_request.head.sha }}
        
    - name: Run PR benchmarks
      run: |
        cargo build --release  
        cargo run --release --bin numarray_benchmark_runner -- --quick > pr_results.txt
        
    - name: Compare results
      run: |
        echo "=== PERFORMANCE COMPARISON ===" 
        echo "Baseline (main branch):"
        tail -20 baseline_results.txt
        echo ""
        echo "PR branch results:"
        tail -20 pr_results.txt
        echo ""
        echo "Manual comparison required - automated comparison logic can be added here"